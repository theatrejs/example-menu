{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://@theatrejs/example-menu/webpack/runtime/async module","webpack://@theatrejs/example-menu/./sources/index.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/plugin-aseprite/sources/factories.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/plugin-aseprite/sources/aseprite.js","webpack://@theatrejs/example-menu/./sources/actors/button-continue/button-continue-64x16.aseprite","webpack://@theatrejs/example-menu/./sources/actors/button-continue/actor-button-continue.js","webpack://@theatrejs/example-menu/./sources/actors/button-dlc/button-dlc-64x16.aseprite","webpack://@theatrejs/example-menu/./sources/actors/button-dlc/actor-button-dlc.js","webpack://@theatrejs/example-menu/./sources/actors/button-new-game/button-new-game-64x16.aseprite","webpack://@theatrejs/example-menu/./sources/actors/button-new-game/actor-button-new-game.js","webpack://@theatrejs/example-menu/./sources/actors/button-quit/button-quit-64x16.aseprite","webpack://@theatrejs/example-menu/./sources/actors/button-quit/actor-button-quit.js","webpack://@theatrejs/example-menu/./sources/actors/actor-menu/navigation.mp3","webpack://@theatrejs/example-menu/./sources/actors/actor-menu/selection.mp3","webpack://@theatrejs/example-menu/./sources/actors/actor-menu/actor-menu.js","webpack://@theatrejs/example-menu/./sources/stages/stage-menu.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/collidertypes.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/contenttypes.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/gamepad.xbox.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertyeditors.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertynavigators.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/mathematics.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/preloadable.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/actor.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/stage.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/aabb.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/collider.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/engine.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/factories.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/finitestatemachine.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/loop.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/shader.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/sound.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/sprite.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/storage.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/timeline.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/timelinekeyframe.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/utils.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/vector2.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/vector3.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/vibration.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/events/gamepad.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/events/gamepadanalog.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/events/gamepaddigital.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/extensions/gamepad.extension.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/actor.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/audio.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/collision.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/input.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/render.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/vibration.system.js","webpack://@theatrejs/example-menu/webpack/bootstrap","webpack://@theatrejs/example-menu/webpack/runtime/define property getters","webpack://@theatrejs/example-menu/webpack/runtime/global","webpack://@theatrejs/example-menu/webpack/runtime/hasOwnProperty shorthand","webpack://@theatrejs/example-menu/webpack/runtime/make namespace object","webpack://@theatrejs/example-menu/webpack/runtime/publicPath","webpack://@theatrejs/example-menu/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","import {Engine, ExtensionGamepad} from '@theatrejs/theatrejs';\n\nimport StageMenu from 'stages/stage-menu.js';\n\nExtensionGamepad.activate();\n\nconst engine = new Engine({$container: document.body});\nengine.initiate(60);\n\nawait engine.preloadStage(StageMenu);\nengine.createStage(StageMenu);\n","import {Actor, Preloadable, Timeline, TimelineKeyframe} from '@theatrejs/theatrejs';\n\nimport {Aseprite} from './index.js';\n\n/**\n * @module FACTORIES\n */\n\n/**\n * Prepares an actor with spritesheet.\n * @template {string} T The generic type of the tags.\n * @param {Object} $parameters The given parameters.\n * @param {Aseprite<T>} $parameters.$aseprite The aseprite module manager.\n * @param {boolean} [$parameters.$loop] The loop status.\n * @param {T} $parameters.$tag The given tag.\n * @returns {typeof Actor}\n *\n * @memberof module:FACTORIES\n */\nfunction ActorWithSpritesheet({$aseprite, $loop = false, $tag}) {\n\n    /**\n     * @ignore\n     */\n    class ActorWithSpritesheet extends Actor {\n\n        /**\n         * Stores the timeline.\n         * @type {Timeline}\n         * @private\n         */\n        $timeline;\n\n        /**\n         * Creates the timeline.\n         * @returns {Timeline}\n         * @private\n         */\n        $createTimeline() {\n\n            const sprites = $aseprite.getSprites($tag);\n\n            if (sprites.size === 0) {\n\n                return new Timeline();\n            }\n\n            let timecode = 0;\n\n            const keyframes = Array.from(sprites.entries()).map(([$sprite, $duration]) => {\n\n                const timelinekeyframe = new TimelineKeyframe({\n\n                    $onEnter: () => {\n\n                        this.setSprite($sprite);\n                    },\n                    $timecode: timecode\n                });\n\n                timecode += $duration;\n\n                return timelinekeyframe;\n            });\n\n            if ($loop === true) {\n\n                keyframes.push(new TimelineKeyframe({\n\n                    $onEnter: ($timeline) => {\n\n                        $timeline.seekTimecode(0);\n                    },\n                    $timecode: timecode\n                }));\n            }\n\n            return new Timeline(keyframes);\n        }\n\n        /**\n         * Called when the actor is being created.\n         * @public\n         */\n        onCreate() {\n\n            this.$timeline = this.$createTimeline();\n            this.$timeline.seekTimecode(0);\n        }\n\n        /**\n         * Called when the actor is being updated by one tick update.\n         * @param {number} $timetick The tick duration (in ms).\n         * @public\n         */\n        onTick($timetick) {\n\n            this.$timeline.tick($timetick);\n        }\n    }\n\n    return ActorWithSpritesheet;\n}\n\n/**\n * Prepares a preloadable Aseprite module.\n * @param {Aseprite<string>} $aseprite The preloadable Aseprite module.\n * @returns {typeof Preloadable}\n *\n * @memberof module:FACTORIES\n */\nfunction PreloadableAseprite($aseprite) {\n\n    /**\n     * @ignore\n     */\n    class PreloadableAseprite extends Preloadable {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = [$aseprite.textureColor];\n    };\n\n    return PreloadableAseprite;\n}\n\nexport {\n\n    ActorWithSpritesheet,\n    PreloadableAseprite\n};\n","import {AABB, Sprite, Vector2} from '@theatrejs/theatrejs';\n\n/**\n * Creates Aseprite module managers.\n * @template {string} T The generic type of the tags.\n *\n * @example\n *\n * const aseprite = new Aseprite(textureColor, data);\n * aseprite.getSprites(tag);\n */\nclass Aseprite {\n\n    /**\n     * @template {string} T The generic type of the tags.\n     * @typedef {Object} typeaseprite An Aseprite JSON data.\n     * @property {Array<typeasepriteframe>} typeaseprite.frames The Aseprite JSON frames data.\n     * @property {typeasepritemeta<T>} typeaseprite.meta The Aseprite JSON meta data.\n     * @protected\n     *\n     * @memberof Aseprite\n     */\n\n    /**\n     * @typedef {Object} typeasepriteframe An Aseprite JSON frame data.\n     * @property {number} typeasepriteframe.duration The duration.\n     * @property {string} typeasepriteframe.filename The file name.\n     * @property {Object} typeasepriteframe.frame The frame.\n     * @property {number} typeasepriteframe.frame.x The x position of the frame.\n     * @property {number} typeasepriteframe.frame.y The y position of the frame.\n     * @property {number} typeasepriteframe.frame.w The width of the frame.\n     * @property {number} typeasepriteframe.frame.h The height of the frame.\n     * @property {boolean} typeasepriteframe.rotated The rotated status.\n     * @property {Object} typeasepriteframe.spriteSourceSize The sprite source size.\n     * @property {number} typeasepriteframe.spriteSourceSize.x The x position of the sprite source.\n     * @property {number} typeasepriteframe.spriteSourceSize.y The y position of the sprite source.\n     * @property {number} typeasepriteframe.spriteSourceSize.w The width of the sprite source.\n     * @property {number} typeasepriteframe.spriteSourceSize.h The height of the sprite source.\n     * @property {Object} typeasepriteframe.sourceSize The sprite size.\n     * @property {number} typeasepriteframe.sourceSize.w The width of the source.\n     * @property {number} typeasepriteframe.sourceSize.h The height of the source.\n     * @property {boolean} typeasepriteframe.trimmed The trimmed status.\n     * @protected\n     *\n     * @memberof Aseprite\n     */\n\n    /**\n     * @template {string} T The generic type of the tags.\n     * @typedef {Object} typeasepritemeta An Aseprite JSON meta data.\n     * @property {string} typeasepritemeta.app The app meta data.\n     * @property {string} typeasepritemeta.format The format meta data.\n     * @property {string} typeasepritemeta.image The image meta data.\n     * @property {string} typeasepritemeta.scale The scale meta data.\n     * @property {Object} typeasepritemeta.size The size meta data.\n     * @property {number} typeasepritemeta.size.w The size width meta data.\n     * @property {number} typeasepritemeta.size.h The size height meta data.\n     * @property {string} typeasepritemeta.version The version meta data.\n     * @property {Array<typeasepriteframetag<T>>} typeasepritemeta.frameTags The Aseprite JSON tags meta data.\n     * @protected\n     *\n     * @memberof Aseprite\n     */\n\n    /**\n     * @template {string} T The generic type of the tags.\n     * @typedef {Object} typeasepriteframetag An Aseprite JSON tag meta data.\n     * @property {T} typeasepriteframetag.name The name.\n     * @property {number} typeasepriteframetag.from The first frame.\n     * @property {number} typeasepriteframetag.to The last frame.\n     * @property {string} typeasepriteframetag.direction The animation direction.\n     * @property {string} typeasepriteframetag.color The color.\n     * @protected\n     *\n     * @memberof Aseprite\n     */\n\n    /**\n     * Stores the sprites and their duration.\n     * @type {Map<Sprite, number>}\n     * @private\n     */\n    $sprites;\n\n    /**\n     * Stores the sprites and their duration by tags.\n     * @type {Map.<T, Map<Sprite, number>>}\n     * @private\n     */\n    $tags;\n\n    /**\n     * Stores the color texture source.\n     * @type {string}\n     * @private\n     */\n    $textureColor;\n\n    /**\n     * Gets the color texture source.\n     * @type {string}\n     * @public\n     */\n    get textureColor() {\n\n        return this.$textureColor;\n    }\n\n    /**\n     * Creates a new Aseprite module manager.\n     * @param {string} $textureColor The color texture source.\n     * @param {typeaseprite<T>} $data The Aseprite JSON file.\n     */\n    constructor($textureColor, $data) {\n\n        this.$textureColor = $textureColor;\n\n        this.$sprites = new Map();\n\n        $data.frames.forEach(($frame) => {\n\n            const sprite = new Sprite({\n\n                $frameSource: new AABB(\n\n                    new Vector2($frame.frame.x / $data.meta.size.w, $frame.frame.y / $data.meta.size.h),\n                    new Vector2(($frame.frame.x + $frame.frame.w) / $data.meta.size.w, ($frame.frame.y + $frame.frame.h) / $data.meta.size.h)\n                ),\n                $sizeTarget: new Vector2($frame.frame.w, $frame.frame.h),\n                $textureColor: $textureColor\n            });\n\n            this.$sprites.set(sprite, $frame.duration);\n        });\n\n        this.$tags = new Map();\n\n        $data.meta.frameTags.forEach(($tag) => {\n\n            const subset = Array.from(this.$sprites.entries())\n            .slice($tag.from, $tag.to + 1);\n\n            this.$tags.set($tag.name, new Map(subset));\n        });\n    }\n\n    /**\n     * Gets the sprites and their duration for the given tag.\n     * @param {T} $tag The given tag.\n     * @returns {Map<Sprite, number>}\n     * @public\n     */\n    getSprites($tag) {\n\n        if (this.$tags.size === 0) {\n\n            return new Map();\n        }\n\n        if (this.$tags.has($tag) === false) {\n\n            const first = Array.from(this.$tags.keys())[0];\n\n            return this.$tags.get(first);\n        }\n\n        return this.$tags.get($tag);\n    }\n}\n\nexport {\n\n    Aseprite\n};\n\nexport default Aseprite;\n","import {Aseprite} from '@theatrejs/plugin-aseprite';import texture from './button-continue-64x16.png';import data from './button-continue-64x16.json';export default new Aseprite(texture, data);","import {Actor, FACTORIES} from '@theatrejs/theatrejs';\nimport * as PLUGINASEPRITE from '@theatrejs/plugin-aseprite';\n\nimport asepriteButtonContinue from './button-continue-64x16.aseprite';\n\nclass ActorButtonContinue extends FACTORIES.ActorWithPreloadables([PLUGINASEPRITE.FACTORIES.PreloadableAseprite(asepriteButtonContinue)]) {\n\n    /**\n     * Stores the spritesheet actor.\n     * @type {Actor}\n     * @private\n     */\n    $spritesheet;\n\n    /**\n     * Animates a spritesheet from the given animation tag.\n     * @param {('activated' | 'disabled' | 'focus' | 'idle')} $animation The given animation tag.\n     * @private\n     */\n    $animateSpritesheet($animation) {\n\n        this.stage.removeActor(this.$spritesheet);\n\n        this.$spritesheet = this.stage.createActor(\n\n            PLUGINASEPRITE.FACTORIES.ActorWithSpritesheet({\n\n                $aseprite: /** @type {PLUGINASEPRITE.Aseprite<('activated' | 'disabled' | 'focus' | 'idle')>} **/(asepriteButtonContinue),\n                $loop: true,\n                $tag: $animation\n            })\n        )\n        .setVisible(this.visible)\n        .setZIndex(this.zIndex)\n        .translate(this.translation);\n    }\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$animateSpritesheet('activated');\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$animateSpritesheet('disabled');\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$animateSpritesheet('focus');\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$animateSpritesheet('idle');\n    }\n\n    /**\n     * @type {Actor['onBeforeRemove']}\n     */\n    onBeforeRemove() {\n\n        this.stage.removeActor(this.$spritesheet);\n    }\n\n    /**\n     * @type {Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {Actor['onSetVisible']}\n     */\n    onSetVisible($visible) {\n\n        this.$spritesheet.setVisible($visible);\n    }\n\n    /**\n     * @type {Actor['onSetZIndex']}\n     */\n    onSetZIndex($zIndex) {\n\n        this.$spritesheet.setZIndex($zIndex);\n    }\n\n    /**\n     * @type {Actor['onTranslate']}\n     */\n    onTranslate($translation) {\n\n        this.$spritesheet.translate($translation);\n    }\n}\n\nexport default ActorButtonContinue;\n","import {Aseprite} from '@theatrejs/plugin-aseprite';import texture from './button-dlc-64x16.png';import data from './button-dlc-64x16.json';export default new Aseprite(texture, data);","import {Actor, FACTORIES} from '@theatrejs/theatrejs';\nimport * as PLUGINASEPRITE from '@theatrejs/plugin-aseprite';\n\nimport asepriteButtonDlc from './button-dlc-64x16.aseprite';\n\nclass ActorButtonDlc extends FACTORIES.ActorWithPreloadables([PLUGINASEPRITE.FACTORIES.PreloadableAseprite(asepriteButtonDlc)]) {\n\n    /**\n     * Stores the spritesheet actor.\n     * @type {Actor}\n     * @private\n     */\n    $spritesheet;\n\n    /**\n     * Animates a spritesheet from the given animation tag.\n     * @param {('activated' | 'disabled' | 'focus' | 'idle')} $animation The given animation tag.\n     * @private\n     */\n    $animateSpritesheet($animation) {\n\n        this.stage.removeActor(this.$spritesheet);\n\n        this.$spritesheet = this.stage.createActor(\n\n            PLUGINASEPRITE.FACTORIES.ActorWithSpritesheet({\n\n                $aseprite: /** @type {PLUGINASEPRITE.Aseprite<('activated' | 'disabled' | 'focus' | 'idle')>} **/(asepriteButtonDlc),\n                $loop: true,\n                $tag: $animation\n            })\n        )\n        .setVisible(this.visible)\n        .setZIndex(this.zIndex)\n        .translate(this.translation);\n    }\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$animateSpritesheet('activated');\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$animateSpritesheet('disabled');\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$animateSpritesheet('focus');\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$animateSpritesheet('idle');\n    }\n\n    /**\n     * @type {Actor['onBeforeRemove']}\n     */\n    onBeforeRemove() {\n\n        this.stage.removeActor(this.$spritesheet);\n    }\n\n    /**\n     * @type {Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {Actor['onSetVisible']}\n     */\n    onSetVisible($visible) {\n\n        this.$spritesheet.setVisible($visible);\n    }\n\n    /**\n     * @type {Actor['onSetZIndex']}\n     */\n    onSetZIndex($zIndex) {\n\n        this.$spritesheet.setZIndex($zIndex);\n    }\n\n    /**\n     * @type {Actor['onTranslate']}\n     */\n    onTranslate($translation) {\n\n        this.$spritesheet.translate($translation);\n    }\n}\n\nexport default ActorButtonDlc;\n","import {Aseprite} from '@theatrejs/plugin-aseprite';import texture from './button-new-game-64x16.png';import data from './button-new-game-64x16.json';export default new Aseprite(texture, data);","import {Actor, FACTORIES} from '@theatrejs/theatrejs';\nimport * as PLUGINASEPRITE from '@theatrejs/plugin-aseprite';\n\nimport asepriteButtonNewGame from './button-new-game-64x16.aseprite';\n\nclass ActorButtonNewGame extends FACTORIES.ActorWithPreloadables([PLUGINASEPRITE.FACTORIES.PreloadableAseprite(asepriteButtonNewGame)]) {\n\n    /**\n     * Stores the spritesheet actor.\n     * @type {Actor}\n     * @private\n     */\n    $spritesheet;\n\n    /**\n     * Animates a spritesheet from the given animation tag.\n     * @param {('activated' | 'disabled' | 'focus' | 'idle')} $animation The given animation tag.\n     * @private\n     */\n    $animateSpritesheet($animation) {\n\n        this.stage.removeActor(this.$spritesheet);\n\n        this.$spritesheet = this.stage.createActor(\n\n            PLUGINASEPRITE.FACTORIES.ActorWithSpritesheet({\n\n                $aseprite: /** @type {PLUGINASEPRITE.Aseprite<('activated' | 'disabled' | 'focus' | 'idle')>} **/(asepriteButtonNewGame),\n                $loop: true,\n                $tag: $animation\n            })\n        )\n        .setVisible(this.visible)\n        .setZIndex(this.zIndex)\n        .translate(this.translation);\n    }\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$animateSpritesheet('activated');\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$animateSpritesheet('disabled');\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$animateSpritesheet('focus');\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$animateSpritesheet('idle');\n    }\n\n    /**\n     * @type {Actor['onBeforeRemove']}\n     */\n    onBeforeRemove() {\n\n        this.stage.removeActor(this.$spritesheet);\n    }\n\n    /**\n     * @type {Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {Actor['onSetVisible']}\n     */\n    onSetVisible($visible) {\n\n        this.$spritesheet.setVisible($visible);\n    }\n\n    /**\n     * @type {Actor['onSetZIndex']}\n     */\n    onSetZIndex($zIndex) {\n\n        this.$spritesheet.setZIndex($zIndex);\n    }\n\n    /**\n     * @type {Actor['onTranslate']}\n     */\n    onTranslate($translation) {\n\n        this.$spritesheet.translate($translation);\n    }\n}\n\nexport default ActorButtonNewGame;\n","import {Aseprite} from '@theatrejs/plugin-aseprite';import texture from './button-quit-64x16.png';import data from './button-quit-64x16.json';export default new Aseprite(texture, data);","import {Actor, FACTORIES} from '@theatrejs/theatrejs';\nimport * as PLUGINASEPRITE from '@theatrejs/plugin-aseprite';\n\nimport asepriteButtonQuit from './button-quit-64x16.aseprite';\n\nclass ActorButtonQuit extends FACTORIES.ActorWithPreloadables([PLUGINASEPRITE.FACTORIES.PreloadableAseprite(asepriteButtonQuit)]) {\n\n    /**\n     * Stores the spritesheet actor.\n     * @type {Actor}\n     * @private\n     */\n    $spritesheet;\n\n    /**\n     * Animates a spritesheet from the given animation tag.\n     * @param {('activated' | 'disabled' | 'focus' | 'idle')} $animation The given animation tag.\n     * @private\n     */\n    $animateSpritesheet($animation) {\n\n        this.stage.removeActor(this.$spritesheet);\n\n        this.$spritesheet = this.stage.createActor(\n\n            PLUGINASEPRITE.FACTORIES.ActorWithSpritesheet({\n\n                $aseprite: /** @type {PLUGINASEPRITE.Aseprite<('activated' | 'disabled' | 'focus' | 'idle')>} **/(asepriteButtonQuit),\n                $loop: true,\n                $tag: $animation\n            })\n        )\n        .setVisible(this.visible)\n        .setZIndex(this.zIndex)\n        .translate(this.translation);\n    }\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$animateSpritesheet('activated');\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$animateSpritesheet('disabled');\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$animateSpritesheet('focus');\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$animateSpritesheet('idle');\n    }\n\n    /**\n     * @type {Actor['onBeforeRemove']}\n     */\n    onBeforeRemove() {\n\n        this.stage.removeActor(this.$spritesheet);\n    }\n\n    /**\n     * @type {Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {Actor['onSetVisible']}\n     */\n    onSetVisible($visible) {\n\n        this.$spritesheet.setVisible($visible);\n    }\n\n    /**\n     * @type {Actor['onSetZIndex']}\n     */\n    onSetZIndex($zIndex) {\n\n        this.$spritesheet.setZIndex($zIndex);\n    }\n\n    /**\n     * @type {Actor['onTranslate']}\n     */\n    onTranslate($translation) {\n\n        this.$spritesheet.translate($translation);\n    }\n}\n\nexport default ActorButtonQuit;\n","export default __webpack_public_path__ + \"4378e9fa9e4ca0b2781ec67b69c8af0f.mp3\";","export default __webpack_public_path__ + \"f2651d13f4de25921433f7a8c179abd0.mp3\";","import {Actor, EVENTCODES, FACTORIES, FiniteStateMachine, Sound, STORAGE, UTILS, Vector2, Vibration} from '@theatrejs/theatrejs';\n\nimport StageMenu from 'stages/stage-menu.js';\n\nimport ActorButtonContinue from 'actors/button-continue/actor-button-continue.js';\nimport ActorButtonDlc from 'actors/button-dlc/actor-button-dlc.js';\nimport ActorButtonNewGame from 'actors/button-new-game/actor-button-new-game.js';\nimport ActorButtonQuit from 'actors/button-quit/actor-button-quit.js';\n\nimport soundNavigation from './navigation.mp3';\nimport soundSelection from './selection.mp3';\n\nclass ActorMenu extends FACTORIES.ActorWithPreloadables([\n\n    ActorButtonContinue,\n    ActorButtonDlc,\n    ActorButtonNewGame,\n    ActorButtonQuit,\n    FACTORIES.PreloadableSound(soundNavigation),\n    FACTORIES.PreloadableSound(soundSelection)\n]) {\n\n    /**\n     * Stores the 'continue' button.\n     * @type {ActorButtonContinue}\n     * @private\n     */\n    $buttonContinue;\n\n    /**\n     * Stores the 'new game' button.\n     * @type {ActorButtonNewGame}\n     * @private\n     */\n    $buttonNewGame;\n\n    /**\n     * Stores the 'DLC' button.\n     * @type {ActorButtonDlc}\n     * @private\n     */\n    $buttonDlc;\n\n    /**\n     * Stores the 'quit' button.\n     * @type {ActorButtonQuit}\n     * @private\n     */\n    $buttonQuit;\n\n    /**\n     * Stores the finite state machine.\n     * @type {FiniteStateMachine<('INITIATE' | 'CONTINUESELECTED' | 'CONTINUEACTIVATED' | 'NEWGAMESELECTED' | 'NEWGAMEACTIVATED' | 'QUITSELECTED' | 'QUITACTIVATED')>}\n     * @private\n     */\n    $finiteStateMachineMenu;\n\n    /**\n     * @type {Actor['onBeforeRemove']}\n     */\n    onBeforeRemove() {\n\n        this.stage.removeActor(this.$buttonContinue);\n        this.stage.removeActor(this.$buttonNewGame);\n        this.stage.removeActor(this.$buttonDlc);\n        this.stage.removeActor(this.$buttonQuit);\n    }\n\n    /**\n     * @type {Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$buttonContinue = /** @type {ActorButtonContinue} */(this.stage.createActor(ActorButtonContinue)).translate(new Vector2(0, 24 * 1.5));\n        this.$buttonNewGame = /** @type {ActorButtonNewGame} */(this.stage.createActor(ActorButtonNewGame)).translate(new Vector2(0, 24 * 0.5));\n        this.$buttonDlc = /** @type {ActorButtonDlc} */(this.stage.createActor(ActorButtonDlc)).translate(new Vector2(0, -24 * 0.5));\n        this.$buttonQuit = /** @type {ActorButtonQuit} */(this.stage.createActor(ActorButtonQuit)).translate(new Vector2(0, -24 * 1.5));\n\n        if (STORAGE.get('continue') !== true) {\n\n            this.$buttonContinue.actionDisable();\n        }\n\n        this.$buttonDlc.actionDisable();\n\n        const DEBOUNCEINITIATE = 800;\n        const DEBOUNCENAVIGATION = 200;\n        const DEBOUNCEQUIT = 1200;\n        const DEBOUNCESELECTION = 800;\n\n        const checkCommandActivate = () => {\n\n            return this.engine.getInput(EVENTCODES.KEYBOARDAZERTY.ENTER)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.A)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.START);\n        };\n\n        const checkCommandNavigateUp = () => {\n\n            return this.engine.getInput(EVENTCODES.KEYBOARDAZERTY.UP)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.UP)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.LSUP);\n        };\n\n        const checkCommandNavigateDown = () => {\n\n            return this.engine.getInput(EVENTCODES.KEYBOARDAZERTY.DOWN)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.DOWN)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.LSDOWN);\n        };\n\n        this.$finiteStateMachineMenu = new FiniteStateMachine([\n\n            {\n                $state: 'INITIATE',\n                $transitions: [\n\n                    {\n                        $state: 'CONTINUESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCEINITIATE && STORAGE.get('continue') === true\n                    },\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCEINITIATE && STORAGE.get('continue') !== true\n                    }\n                ]\n            },\n            {\n                $state: 'CONTINUESELECTED',\n                $onEnter: ({$previous}) => {\n\n                    this.$buttonContinue.actionFocus();\n\n                    if ($previous === 'INITIATE') {\n\n                        return;\n                    }\n\n                    if ($previous === 'CONTINUEACTIVATED') {\n\n                        return;\n                    }\n\n                    this.addSound(new Sound({\n\n                        $audio: soundNavigation,\n                        $volume: 0.5\n                    }));\n                },\n                $onLeave: () => this.$buttonContinue.actionRest(),\n                $transitions: [\n\n                    {\n                        $state: 'CONTINUEACTIVATED',\n                        $condition: () => checkCommandActivate() === true\n                    },\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCENAVIGATION && checkCommandNavigateDown() === true && checkCommandNavigateUp() === false && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'CONTINUEACTIVATED',\n                $onEnter: () => {\n\n                    this.$buttonContinue.actionActivate();\n\n                    this.addSound(new Sound({\n\n                        $audio: soundSelection,\n                        $volume: 0.5\n                    }));\n\n                    this.addVibration(new Vibration({\n\n                        $duration: 100,\n                        $intensityFrequencyHigh: 1,\n                        $intensityFrequencyLow: 0\n                    }));\n                },\n                $onLeave: () => {\n\n                    this.$buttonContinue.actionRest();\n\n                    console.log('Continue');\n                },\n                $transitions: [\n\n                    {\n                        $state: 'CONTINUESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCESELECTION && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'NEWGAMESELECTED',\n                $onEnter: ({$previous}) => {\n\n                    this.$buttonNewGame.actionFocus();\n\n                    if ($previous === 'INITIATE') {\n\n                        return;\n                    }\n\n                    if ($previous === 'NEWGAMEACTIVATED') {\n\n                        return;\n                    }\n\n                    this.addSound(new Sound({\n\n                        $audio: soundNavigation,\n                        $volume: 0.5\n                    }));\n                },\n                $onLeave: () => this.$buttonNewGame.actionRest(),\n                $transitions: [\n\n                    {\n                        $state: 'NEWGAMEACTIVATED',\n                        $condition: () => checkCommandActivate() === true\n                    },\n                    {\n                        $state: 'CONTINUESELECTED',\n                        $condition: ({$timer}) => STORAGE.get('continue') === true && $timer >= DEBOUNCENAVIGATION && checkCommandNavigateUp() === true && checkCommandNavigateDown() === false && checkCommandActivate() === false\n                    },\n                    {\n                        $state: 'QUITSELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCENAVIGATION && checkCommandNavigateDown() === true && checkCommandNavigateUp() === false && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'NEWGAMEACTIVATED',\n                $onEnter: () => {\n\n                    this.$buttonNewGame.actionActivate();\n\n                    this.addSound(new Sound({\n\n                        $audio: soundSelection,\n                        $volume: 0.5\n                    }));\n\n                    this.addVibration(new Vibration({\n\n                        $duration: 100,\n                        $intensityFrequencyHigh: 1,\n                        $intensityFrequencyLow: 0\n                    }));\n                },\n                $onLeave: () => {\n\n                    this.$buttonNewGame.actionRest();\n\n                    if (STORAGE.get('continue') !== true) {\n\n                        this.$buttonContinue.actionRest();\n                        STORAGE.set('continue', true);\n                    }\n\n                    console.log('New Game');\n                },\n                $transitions: [\n\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCESELECTION && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'QUITSELECTED',\n                $onEnter: ({$previous}) => {\n\n                    this.$buttonQuit.actionFocus();\n\n                    if ($previous === 'QUITACTIVATED') {\n\n                        return;\n                    }\n\n                    this.addSound(new Sound({\n\n                        $audio: soundNavigation,\n                        $volume: 0.5\n                    }));\n                },\n                $onLeave: () => this.$buttonQuit.actionRest(),\n                $transitions: [\n\n                    {\n                        $state: 'QUITACTIVATED',\n                        $condition: () => checkCommandActivate() === true\n                    },\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCENAVIGATION && checkCommandNavigateUp() === true && checkCommandNavigateDown() === false && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'QUITACTIVATED',\n                $onEnter: () => {\n\n                    this.$buttonQuit.actionActivate();\n\n                    this.addSound(new Sound({\n\n                        $audio: soundSelection,\n                        $volume: 0.5\n                    }));\n\n                    this.addVibration(new Vibration({\n\n                        $duration: 100,\n                        $intensityFrequencyHigh: 1,\n                        $intensityFrequencyLow: 0\n                    }));\n                },\n                $onLeave: async () => {\n\n                    this.$buttonQuit.actionRest();\n\n                    if (STORAGE.get('continue') === true) {\n\n                        this.$buttonContinue.actionDisable();\n                        STORAGE.set('continue', false);\n                    }\n\n                    console.log('Quit');\n\n                    window.close();\n\n                    window.queueMicrotask(async () => {\n\n                        this.engine.terminate();\n\n                        await UTILS.sleep(1000);\n\n                        this.engine.initiate(60);\n\n                        await this.engine.preloadStage(StageMenu);\n\n                        this.engine.createStage(StageMenu);\n                    });\n                },\n                $transitions: [\n\n                    {\n                        $state: 'QUITSELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCEQUIT && checkCommandActivate() === false\n                    }\n                ]\n            }\n        ]);\n\n        this.$finiteStateMachineMenu.initiate('INITIATE');\n    }\n\n    /**\n     * @type {Actor['onSetVisible']}\n     */\n    onSetVisible($visible) {\n\n        this.$buttonContinue.setVisible($visible);\n        this.$buttonNewGame.setVisible($visible);\n        this.$buttonDlc.setVisible($visible);\n        this.$buttonQuit.setVisible($visible);\n    }\n\n    /**\n     * @type {Actor['onSetZIndex']}\n     */\n    onSetZIndex($zIndex) {\n\n        this.$buttonContinue.setZIndex($zIndex);\n        this.$buttonNewGame.setZIndex($zIndex);\n        this.$buttonDlc.setZIndex($zIndex);\n        this.$buttonQuit.setZIndex($zIndex);\n    }\n\n    /**\n     * @type {Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$finiteStateMachineMenu.update($timetick);\n    }\n\n    /**\n     * @type {Actor['onTranslate']}\n     */\n    onTranslate($vector) {\n\n        this.$buttonContinue.translate($vector);\n        this.$buttonNewGame.translate($vector);\n        this.$buttonDlc.translate($vector);\n        this.$buttonQuit.translate($vector);\n    }\n}\n\nexport default ActorMenu;\n","import {FACTORIES, Stage, Vector2, Vector3} from '@theatrejs/theatrejs';\n\nimport ActorMenu from 'actors/actor-menu/actor-menu.js';\n\nclass StageMenu extends FACTORIES.StageWithPreloadables([ActorMenu]) {\n\n    /**\n     * @type {Stage['onCreate']}\n     */\n    onCreate() {\n\n        this.engine.setColor(new Vector3(27 / 255, 36 / 255, 71 / 255));\n        this.engine.setResolution(new Vector2(480, 360));\n\n        this.createActor(ActorMenu);\n    }\n}\n\nexport default StageMenu;\n","/**\n * @module COLLIDERTYPES\n */\n\n/**\n * The dynamic collider type.\n * @type {'DYNAMIC'}\n * @constant\n *\n * @memberof module:COLLIDERTYPES\n */\nconst DYNAMIC = 'DYNAMIC';\n\n/**\n * The kinetic collider type.\n * @type {'KINETIC'}\n * @constant\n *\n * @memberof module:COLLIDERTYPES\n */\nconst KINETIC = 'KINETIC';\n\n/**\n * The static collider type.\n * @type {'STATIC'}\n * @constant\n *\n * @memberof module:COLLIDERTYPES\n */\nconst STATIC = 'STATIC';\n\nexport {\n\n    DYNAMIC,\n    KINETIC,\n    STATIC\n};\n","/**\n * @module CONTENTTYPES\n */\n\n/**\n * The audio/mpeg Content-Type.\n * @type {'audio/mpeg'}\n * @constant\n *\n * @memberof module:CONTENTTYPES\n */\nconst AUDIOMPEG = 'audio/mpeg';\n\n/**\n * The audio/wave Content-Type.\n * @type {'audio/wave'}\n * @constant\n *\n * @memberof module:CONTENTTYPES\n */\nconst AUDIOWAVE = 'audio/wave';\n\n/**\n * The image/jpeg Content-Type.\n * @type {'image/jpeg'}\n * @constant\n *\n * @memberof module:CONTENTTYPES\n */\nconst IMAGEJPEG = 'image/jpeg';\n\n/**\n * The image/png Content-Type.\n * @type {'image/png'}\n * @constant\n *\n * @memberof module:CONTENTTYPES\n */\nconst IMAGEPNG = 'image/png';\n\nexport {\n\n    AUDIOMPEG,\n    AUDIOWAVE,\n    IMAGEJPEG,\n    IMAGEPNG\n};\n","/**\n * @module EVENTCODES/GAMEPADXBOX\n */\n\n/**\n * The XBOX gamepad 'A' event code.\n * @type {'ClusterRightButtonBottom'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst A = 'ClusterRightButtonBottom';\n\n/**\n * The XBOX gamepad 'B' event code.\n * @type {'ClusterRightButtonRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst B = 'ClusterRightButtonRight';\n\n/**\n * The XBOX gamepad 'X' event code.\n * @type {'ClusterRightButtonLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst X = 'ClusterRightButtonLeft';\n\n/**\n * The XBOX gamepad 'Y' event code.\n * @type {'ClusterRightButtonTop'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst Y = 'ClusterRightButtonTop';\n\n/**\n * The XBOX gamepad 'LB' event code.\n * @type {'ClusterFrontButtonTopLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LB = 'ClusterFrontButtonTopLeft';\n\n/**\n * The XBOX gamepad 'RB' event code.\n * @type {'ClusterFrontButtonTopRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RB = 'ClusterFrontButtonTopRight';\n\n/**\n * The XBOX gamepad 'LT' event code.\n * @type {'ClusterFrontButtonBottomLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LT = 'ClusterFrontButtonBottomLeft';\n\n/**\n * The XBOX gamepad 'RT' event code.\n * @type {'ClusterFrontButtonBottomRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RT = 'ClusterFrontButtonBottomRight';\n\n/**\n * The XBOX gamepad 'BACK' event code.\n * @type {'ClusterCenterButtonLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst BACK = 'ClusterCenterButtonLeft';\n\n/**\n * The XBOX gamepad 'START' event code.\n * @type {'ClusterCenterButtonRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst START = 'ClusterCenterButtonRight';\n\n/**\n * The XBOX gamepad 'LSB' event code.\n * @type {'StickLeftButton'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LSB = 'StickLeftButton';\n\n/**\n * The XBOX gamepad 'RSB' event code.\n * @type {'StickRightButton'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RSB = 'StickRightButton';\n\n/**\n * The XBOX gamepad 'UP' event code.\n * @type {'ClusterLeftButtonTop'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst UP = 'ClusterLeftButtonTop';\n\n/**\n * The XBOX gamepad 'DOWN' event code.\n * @type {'ClusterLeftButtonBottom'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst DOWN = 'ClusterLeftButtonBottom';\n\n/**\n * The XBOX gamepad 'LEFT' event code.\n * @type {'ClusterLeftButtonLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LEFT = 'ClusterLeftButtonLeft';\n\n/**\n * The XBOX gamepad 'RIGHT' event code.\n * @type {'ClusterLeftButtonRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RIGHT = 'ClusterLeftButtonRight';\n\n/**\n * The XBOX gamepad 'XBOX' event code.\n * @type {'ClusterCenterButtonCenter'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst XBOX = 'ClusterCenterButtonCenter';\n\n/**\n * The XBOX gamepad 'LSLEFT' event code.\n * @type {'StickLeftLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LSLEFT = 'StickLeftLeft';\n\n/**\n * The XBOX gamepad 'LSRIGHT' event code.\n * @type {'StickLeftRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LSRIGHT = 'StickLeftRight';\n\n/**\n * The XBOX gamepad 'LSUP' event code.\n * @type {'StickLeftUp'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LSUP = 'StickLeftUp';\n\n/**\n * The XBOX gamepad 'LSDOWN' event code.\n * @type {'StickLeftDown'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LSDOWN = 'StickLeftDown';\n\n/**\n * The XBOX gamepad 'RSLEFT' event code.\n * @type {'StickRightLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RSLEFT = 'StickRightLeft';\n\n/**\n * The XBOX gamepad 'RSRIGHT' event code.\n * @type {'StickRightRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RSRIGHT = 'StickRightRight';\n\n/**\n * The XBOX gamepad 'RSUP' event code.\n * @type {'StickRightUp'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RSUP = 'StickRightUp';\n\n/**\n * The XBOX gamepad 'RSDOWN' event code.\n * @type {'StickRightDown'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RSDOWN = 'StickRightDown';\n\n/**\n * The XBOX gamepad 'CONNECTED' event code.\n * @type {'Connected'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst CONNECTED = 'Connected';\n\n/**\n * The XBOX gamepad 'DISCONNECTED' event code.\n * @type {'Disconnected'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst DISCONNECTED = 'Disconnected';\n\n/**\n * The XBOX gamepad 'VIBRATEEND' event code.\n * @type {'VibrateEnd'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst VIBRATEEND = 'VibrateEnd';\n\n/**\n * The XBOX gamepad 'VIBRATESTART' event code.\n * @type {'VibrateStart'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst VIBRATESTART = 'VibrateStart';\n\nexport {\n\n    A,\n    B,\n    X,\n    Y,\n\n    LB,\n    RB,\n    LT,\n    RT,\n\n    BACK,\n    START,\n\n    LSB,\n    RSB,\n\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT,\n\n    XBOX,\n\n    LSLEFT,\n    LSRIGHT,\n    LSUP,\n    LSDOWN,\n    RSLEFT,\n    RSRIGHT,\n    RSUP,\n    RSDOWN,\n\n    CONNECTED,\n    DISCONNECTED,\n    VIBRATEEND,\n    VIBRATESTART\n};\n","/**\n * The AZERTY-based keyboard 'DELETE' event code.\n * @type {'Delete'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst DELETE = 'Delete';\n\n/**\n * The AZERTY-based keyboard 'ENTER' event code.\n * @type {'Enter'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst ENTER = 'Enter';\n\nexport {\n\n    DELETE,\n    ENTER\n};\n","/**\n * The AZERTY-based keyboard 'TAB' event code.\n * @type {'Tab'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst TAB = 'Tab';\n\n/**\n * The AZERTY-based keyboard 'UP' event code.\n * @type {'ArrowUp'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst UP = 'ArrowUp';\n\n/**\n * The AZERTY-based keyboard 'LEFT' event code.\n * @type {'ArrowLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst LEFT = 'ArrowLeft';\n\n/**\n * The AZERTY-based keyboard 'RIGHT' event code.\n * @type {'ArrowRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst RIGHT = 'ArrowRight';\n\n/**\n * The AZERTY-based keyboard 'DOWN' event code.\n * @type {'ArrowDown'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst DOWN = 'ArrowDown';\n\nexport {\n\n    TAB,\n\n    UP,\n    LEFT,\n    RIGHT,\n    DOWN\n};\n","/**\n * @module MATHEMATICS\n */\n\n/**\n * The value to convert an angle from degrees to radians.\n * @type {number}\n * @constant\n *\n * @memberof module:MATHEMATICS\n */\nconst RADIANS = Math.PI / 180;\n\nexport {\n\n    RADIANS\n};\n","/**\n * Abstract preloadables.\n *\n * @example\n *\n * class PreloadableExample extends Preloadable {}\n */\nclass Preloadable {\n\n    /**\n     * Stores the preloadable assets.\n     * @type {Array<string>}\n     * @public\n     * @static\n     */\n    static preloadables = [];\n}\n\nexport {\n\n    Preloadable\n};\n\nexport default Preloadable;\n","import {Collider, Engine, Preloadable, Sound, Sprite, Stage, UTILS, Vector2, Vibration} from '../index.js';\n\n/**\n * Abstract actors.\n *\n * @example\n *\n * class ActorExample extends Actor {}\n */\nclass Actor extends Preloadable {\n\n    /**\n     * Stores the collider.\n     * @type {Collider}\n     * @private\n     */\n    $collider;\n\n    /**\n     * Stores the components.\n     * @type {Object<string, any>}\n     * @private\n     */\n    $components;\n\n    /**\n     * Stores the sounds.\n     * @type {Array<Sound>}\n     * @private\n     */\n    $sounds;\n\n    /**\n     * Stores the sprite.\n     * @type {Sprite}\n     * @private\n     */\n    $sprite;\n\n    /**\n     * Stores the current stage.\n     * @type {Stage}\n     * @private\n     */\n    $stage;\n\n    /**\n     * Stores the position.\n     * @type {Vector2}\n     * @private\n     */\n    $translation;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Stores the vibrations.\n     * @type {Array<Vibration>}\n     * @private\n     */\n    $vibrations;\n\n    /**\n     * Stores the visible status.\n     * @type {boolean}\n     * @private\n     */\n    $visible;\n\n    /**\n     * Stores the z-index.\n     * @type {number}\n     * @private\n     */\n    $zIndex;\n\n    /**\n     * Gets the collider.\n     * @type {Collider}\n     * @public\n     */\n    get collider() {\n\n        return this.$collider;\n    }\n\n    /**\n     * Gets the current engine.\n     * @type {Engine}\n     * @public\n     */\n    get engine() {\n\n        return this.stage.engine;\n    }\n\n    /**\n     * Gets the sounds.\n     * @type {Array<Sound>}\n     * @public\n     */\n    get sounds() {\n\n        return this.$sounds;\n    }\n\n    /**\n     * Gets the sprite.\n     * @type {Sprite}\n     * @public\n     */\n    get sprite() {\n\n        return this.$sprite;\n    }\n\n    /**\n     * Gets the current stage.\n     * @type {Stage}\n     * @public\n     */\n    get stage() {\n\n        return this.$stage;\n    }\n\n    /**\n     * Gets the position.\n     * @type {Vector2}\n     * @public\n     */\n    get translation() {\n\n        return this.$translation;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Gets the vibrations.\n     * @type {Array<Vibration>}\n     * @public\n     */\n    get vibrations() {\n\n        return this.$vibrations;\n    }\n\n    /**\n     * Gets the visible status.\n     * @type {boolean}\n     * @public\n     */\n    get visible() {\n\n        return this.$visible;\n    }\n\n    /**\n     * Gets the z-index.\n     * @type {number}\n     * @public\n     */\n    get zIndex() {\n\n        return this.$zIndex;\n    }\n\n    /**\n     * Create a new actor.\n     * @param {Stage} $stage The stage on which to create the actor.\n     */\n    constructor($stage) {\n\n        super();\n\n        this.$stage = $stage;\n\n        this.$components = {};\n        this.$sounds = [];\n        this.$translation = new Vector2(0, 0);\n        this.$uuid = UTILS.uuid();\n        this.$vibrations = [];\n        this.$visible = true;\n        this.$zIndex = 0;\n    }\n\n    /**\n     * Adds the given sound.\n     * @param {Sound} $sound The sound to add.\n     * @returns {this}\n     * @public\n     */\n    addSound($sound) {\n\n        this.$sounds.push($sound);\n\n        return this;\n    }\n\n    /**\n     * Adds the given vibration.\n     * @param {Vibration} $vibration The vibration to add.\n     * @returns {this}\n     * @public\n     */\n    addVibration($vibration) {\n\n        this.$vibrations.push($vibration);\n\n        return this;\n    }\n\n    /**\n     * Gets a component.\n     * @param {string} $name The name of the component to get.\n     * @returns {any}\n     * @public\n     */\n    getComponent($name) {\n\n        return this.$components[$name];\n    }\n\n    /**\n     * Checks if the actor has a collider.\n     * @returns {boolean}\n     * @public\n     */\n    hasCollider() {\n\n        return this.$collider instanceof Collider;\n    }\n\n    /**\n     * Checks if the actor has the given component.\n     * @param {string} $name The name of the component to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasComponent($name) {\n\n        return this.$components.hasOwnProperty($name) === true;\n    }\n\n    /**\n     * Checks if the actor has a sprite.\n     * @returns {boolean}\n     * @public\n     */\n    hasSprite() {\n\n        return this.$sprite instanceof Sprite;\n    }\n\n    /**\n     * Called just after removing the actor.\n     * @public\n     */\n    onAfterRemove() {}\n\n    /**\n     * Called just before removing the actor.\n     * @public\n     */\n    onBeforeRemove() {}\n\n    /**\n     * Called when a collision is being resolved.\n     * @param {Object} $parameters The given parameters.\n     * @param {Actor} $parameters.$actor The colliding actor.\n     * @param {boolean} $parameters.$east If the origin of collision is facing the east face.\n     * @param {boolean} $parameters.$north If the origin of collision is facing the north face.\n     * @param {boolean} $parameters.$south If the origin of collision is facing the south face.\n     * @param {boolean} $parameters.$west If the origin of collision is facing the west face.\n     * @public\n     */\n    onCollide({$actor, $east, $north, $south, $west}) {}\n\n    /**\n     * Called when a collision is being entered.\n     * @param {Object} $parameters The given parameters.\n     * @param {Actor} $parameters.$actor The colliding actor.\n     * @param {boolean} $parameters.$east If the origin of collision is facing the east face.\n     * @param {boolean} $parameters.$north If the origin of collision is facing the north face.\n     * @param {boolean} $parameters.$south If the origin of collision is facing the south face.\n     * @param {boolean} $parameters.$west If the origin of collision is facing the west face.\n     * @public\n     */\n    onCollideEnter({$actor, $east, $north, $south, $west}) {}\n\n    /**\n     * Called when a collision is being left.\n     * @param {Actor} $actor The colliding actor.\n     * @public\n     */\n    onCollideLeave($actor) {}\n\n    /**\n     * Called when the actor is being created.\n     * @public\n     */\n    onCreate() {}\n\n    /**\n     * Called when the visible status is being set.\n     * @param {boolean} $visible The visible status set.\n     * @public\n     */\n    onSetVisible($visible) {}\n\n    /**\n     * Called when the z-index is being set.\n     * @param {number} $zIndex The z-index set.\n     * @public\n     */\n    onSetZIndex($zIndex) {}\n\n    /**\n     * Called when a sound is finishing playing.\n     * @param {Sound} $sound The sound.\n     * @public\n     */\n    onSoundFinish($sound) {}\n\n    /**\n     * Called when the actor is being updated by one tick update.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    onTick($timetick) {}\n\n    /**\n     * Called when the actor is being translated.\n     * @param {Vector2} $vector The translation applied.\n     * @public\n     */\n    onTranslate($vector) {}\n\n    /**\n     * Removes the given sound.\n     * @param {Sound} $sound The sound to remove.\n     * @returns {this}\n     * @public\n     */\n    removeSound($sound) {\n\n        UTILS.extract($sound, this.$sounds);\n\n        return this;\n    }\n\n    /**\n     * Removes all sound.\n     * @returns {this}\n     * @public\n     */\n    removeSounds() {\n\n        this.$sounds = [];\n\n        return this;\n    }\n\n    /**\n     * Removes the given vibration.\n     * @param {Vibration} $vibration The vibration to remove.\n     * @returns {this}\n     * @public\n     */\n    removeVibration($vibration) {\n\n        UTILS.extract($vibration, this.$vibrations);\n\n        return this;\n    }\n\n    /**\n     * Removes all vibration.\n     * @returns {this}\n     * @public\n     */\n    removeVibrations() {\n\n        this.$vibrations = [];\n\n        return this;\n    }\n\n    /**\n     * Sets the collider.\n     * @param {Collider} $collider The collider to set.\n     * @returns {this}\n     * @public\n     */\n    setCollider($collider) {\n\n        this.$collider = $collider;\n\n        return this;\n    }\n\n    /**\n     * Sets a component.\n     * @param {string} $name The name of the component to set.\n     * @param {any} $component The value of the component to set.\n     * @returns {this}\n     * @public\n     */\n    setComponent($name, $component) {\n\n        this.$components[$name] = $component;\n\n        return this;\n    }\n\n    /**\n     * Sets the sprite.\n     * @param {Sprite} $sprite The sprite to set.\n     * @returns {this}\n     * @public\n     */\n    setSprite($sprite) {\n\n        this.$sprite = $sprite;\n\n        return this;\n    }\n\n    /**\n     * Sets the visible status.\n     * @param {boolean} $visible The visible status to set.\n     * @returns {this}\n     * @public\n     */\n    setVisible($visible) {\n\n        this.$visible = $visible;\n\n        this.onSetVisible($visible);\n\n        return this;\n    }\n\n    /**\n     * Sets the z-index.\n     * @param {number} $zIndex The z-index to set.\n     * @returns {this}\n     * @public\n     */\n    setZIndex($zIndex) {\n\n        this.$zIndex = $zIndex;\n\n        this.onSetZIndex($zIndex);\n\n        return this;\n    }\n\n    /**\n     * Translates the actor in the world space from a third person point of view.\n     * @param {Vector2} $vector The translation to apply.\n     * @returns {this}\n     * @public\n     */\n    translate($vector) {\n\n        const translation = $vector.clone();\n\n        this.$translation.add(translation);\n\n        this.onTranslate(translation);\n\n        return this;\n    }\n\n    /**\n     * Translates the actor in the world space to the given position.\n     * @param {Vector2} $vector The position to translate to.\n     * @returns {this}\n     * @public\n     */\n    translateTo($vector) {\n\n        const translation = $vector.clone().subtract(this.$translation);\n\n        this.$translation.add(translation);\n\n        this.onTranslate(translation);\n\n        return this;\n    }\n}\n\nexport {\n\n    Actor\n};\n\nexport default Actor;\n","import {Actor, Engine, Preloadable, UTILS} from '../index.js';\n\n/**\n * Abstract stages.\n *\n * @example\n *\n * class StageExample extends Stage {}\n */\nclass Stage extends Preloadable {\n\n    /**\n     * Stores the current actors.\n     * @type {Array<Actor>}\n     * @private\n     */\n    $actors;\n\n    /**\n     * Stores the current engine.\n     * @type {Engine}\n     * @private\n     */\n    $engine;\n\n    /**\n     * Stores the point of view.\n     * @type {Actor}\n     * @private\n     */\n    $pointOfView;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Gets the current actors.\n     * @type {Array<Actor>}\n     * @public\n     */\n    get actors() {\n\n        return this.$actors;\n    }\n\n    /**\n     * Gets the current engine.\n     * @type {Engine}\n     * @public\n     */\n    get engine() {\n\n        return this.$engine;\n    }\n\n    /**\n     * Gets the point of view.\n     * @type {Actor}\n     * @public\n     */\n    get pointOfView() {\n\n        return this.$pointOfView;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Creates a new stage.\n     * @param {Engine} $engine The engine on which to create the stage.\n     */\n    constructor($engine) {\n\n        super();\n\n        this.$engine = $engine;\n\n        this.$actors = [];\n        this.$pointOfView = this.createActor(Actor);\n        this.$uuid = UTILS.uuid();\n    }\n\n    /**\n     * Creates the given actor.\n     * @param {typeof Actor} [$actor] The actor to create.\n     * @public\n     */\n    createActor($actor = Actor) {\n\n        const actor = new $actor(this);\n\n        this.$actors.push(actor);\n\n        actor.onCreate();\n\n        return actor;\n    }\n\n    /**\n     * Checks if the stage has the given actor.\n     * @param {Actor} $actor The actor to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasActor($actor) {\n\n        return this.$actors.indexOf($actor) !== -1;\n    }\n\n    /**\n     * Called when the stage is being created.\n     * @public\n     */\n    onCreate() {}\n\n    /**\n     * Removes the given actor.\n     * @param {Actor} $actor The actor to remove.\n     * @public\n     */\n    removeActor($actor) {\n\n        const index = this.$actors.indexOf($actor);\n\n        if (index === -1) {\n\n            return;\n        }\n\n        $actor.onBeforeRemove();\n\n        this.$actors.splice(index, 1);\n\n        $actor.onAfterRemove();\n    }\n\n    /**\n     * Removes all actors.\n     * @public\n     */\n    removeActors() {\n\n        while (this.$actors.length > 0) {\n\n            this.removeActor(this.$actors[0]);\n        }\n    }\n\n    /**\n     * Sets the given actor as the point of view.\n     * @param {Actor} $actor The actor to set as the point of view.\n     * @public\n     */\n    setPointOfView($actor) {\n\n        this.$pointOfView = $actor;\n    }\n}\n\nexport {\n\n    Stage\n};\n\nexport default Stage;\n","import {Vector2} from '../index.js';\n\n/**\n * Creates AABBs.\n *\n * @example\n *\n * const aabb = new AABB(new Vector2(-1, -1), new Vector2(1, 1));\n */\nclass AABB {\n\n    /**\n     * Stores the maximum values of the AABB.\n     * @type {Vector2}\n     * @private\n     */\n    $maximum;\n\n    /**\n     * Stores the minimum values of the AABB.\n     * @type {Vector2}\n     * @private\n     */\n    $minimum;\n\n    /**\n     * Gets the center of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get center() {\n\n        return this.minimum.clone().add(this.halfSize);\n    }\n\n    /**\n     * Gets the half-size of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get halfSize() {\n\n        return this.size.clone().scale(0.5);\n    }\n\n    /**\n     * Gets the maximum values of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get maximum() {\n\n        return this.$maximum;\n    }\n\n    /**\n     * Gets the minimum values of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get minimum() {\n\n        return this.$minimum;\n    }\n\n    /**\n     * Gets the size of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get size() {\n\n        return this.$maximum.clone().subtract(this.$minimum);\n    }\n\n    /**\n     * Creates a new AABB.\n     * @param {Vector2} $minimum The minimum values of the AABB to create.\n     * @param {Vector2} $maximum The maximum values of the AABB to create.\n     */\n    constructor($minimum, $maximum) {\n\n        this.$maximum = $maximum;\n        this.$minimum = $minimum;\n    }\n\n    /**\n     * Gets the manhattan distance between two AABBs.\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceManhattan($a, $b) {\n\n        const distanceX = AABB.distanceX($a, $b);\n        const distanceY = AABB.distanceY($a, $b);\n\n        if (distanceX > 0 || distanceY > 0) {\n\n            return Math.max(distanceX, 0) + Math.max(distanceY, 0);\n        }\n\n        return distanceX + distanceY;\n    }\n\n    /**\n     * Gets the distance between two AABBs on the x-axis.\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceX($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.x - $a.center.x);\n        const distanceMinimum = $a.halfSize.x + $b.halfSize.x;\n\n        return distanceCenter - distanceMinimum;\n    }\n\n    /**\n     * Gets the distance between two AABBs on the y-axis.\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceY($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.y - $a.center.y);\n        const distanceMinimum = $a.halfSize.y + $b.halfSize.y;\n\n        return distanceCenter - distanceMinimum;\n    }\n\n    /**\n     * Creates a new AABB from the given AABB.\n     * @param {AABB} $aabb The given AABB.\n     * @returns {AABB}\n     * @public\n     * @static\n     */\n    static from($aabb) {\n\n        return $aabb.clone();\n    }\n\n    /**\n     * Gets the delta penetration between two AABBs strictly overlaping with each other on the x-axis (the common area).\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static overlapX($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.x - $a.center.x);\n        const distanceMinimum = $a.halfSize.x + $b.halfSize.x;\n\n        return distanceMinimum - distanceCenter;\n    }\n\n    /**\n     * Gets the delta penetration between two AABBs strictly overlaping with each other on the y-axis (the common area).\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static overlapY($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.y - $a.center.y);\n        const distanceMinimum = $a.halfSize.y + $b.halfSize.y;\n\n        return distanceMinimum - distanceCenter;\n    }\n\n    /**\n     * Clones the AABB.\n     * @returns {AABB}\n     * @public\n     */\n    clone() {\n\n        return new AABB(this.$minimum, this.$maximum);\n    }\n\n    /**\n     * Translates the AABB in the world space from a third person point of view.\n     * @param {Vector2} $vector The translation to apply.\n     * @returns {this}\n     * @public\n     */\n    translate($vector) {\n\n        this.$maximum = this.$maximum.clone().add($vector);\n        this.$minimum = this.$minimum.clone().add($vector);\n\n        return this;\n    }\n}\n\nexport {\n\n    AABB\n};\n\nexport default AABB;\n","import {AABB, COLLIDERTYPES} from '../index.js';\n\n/**\n * Creates colliders.\n *\n * @example\n *\n * const collider = new Collider({$boundaries, $traversable, $type});\n */\nclass Collider {\n\n    /**\n     * @typedef {(COLLIDERTYPES.DYNAMIC | COLLIDERTYPES.KINETIC | COLLIDERTYPES.STATIC)} typecollider A collider type.\n     * @protected\n     *\n     * @memberof Collider\n     */\n\n    /**\n     * Stores the boundaries.\n     * @type {AABB}\n     * @private\n     */\n    $boundaries;\n\n    /**\n     * Stores the traversable status.\n     * @type {boolean}\n     * @private\n     */\n    $traversable;\n\n    /**\n     * Stores the collider type.\n     * @type {typecollider}\n     * @private\n     */\n    $type;\n\n    /**\n     * Gets the boundaries.\n     * @type {AABB}\n     * @public\n     */\n    get boundaries() {\n\n        return this.$boundaries;\n    }\n\n    /**\n     * Gets the traversable status.\n     * @type {boolean}\n     * @public\n     */\n    get traversable() {\n\n        return this.$traversable;\n    }\n\n    /**\n     * Gets the collider type.\n     * @type {typecollider}\n     * @public\n     */\n    get type() {\n\n        return this.$type;\n    }\n\n    /**\n     * Creates a new collider.\n     * @param {Object} $parameters The given parameters.\n     * @param {AABB} $parameters.$boundaries The boundaries of the collider to create.\n     * @param {boolean} [$parameters.$traversable] The traversable status of the collider to create.\n     * @param {typecollider} $parameters.$type The type of the collider to create.\n     */\n    constructor({$boundaries, $traversable = false, $type}) {\n\n        this.$boundaries = $boundaries;\n        this.$traversable = $traversable;\n        this.$type = $type;\n    }\n}\n\nexport {\n\n    Collider\n};\n\nexport default Collider;\n","import {CONTENTTYPES, Loop, Stage, SystemActor, SystemAudio, SystemCollision, SystemInput, SystemRender, SystemVibration, UTILS, Vector2, Vector3} from '../index.js';\n\n/**\n * Creates game engines.\n *\n * @example\n *\n * const engine = new Engine({$color, $container, $resolution});\n * engine.initiate(60);\n *\n * await engine.preloadStage(SceneExample);\n *\n * engine.createStage(SceneExample);\n */\nclass Engine {\n\n    /**\n     * Stores the rendering background color.\n     * @type {Vector3}\n     * @private\n     */\n    $color;\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the loop.\n     * @type {Loop}\n     * @private\n     */\n    $loop;\n\n    /**\n     * Stores the next stage.\n     * @type {typeof Stage}\n     * @private\n     */\n    $next;\n\n    /**\n     * Stores the preloaded status of the assets.\n     * @type {Set<string>}\n     * @private\n     */\n    $preloaded;\n\n    /**\n     * Stores the rendering resolution.\n     * @type {Vector2}\n     * @private\n     */\n    $resolution;\n\n    /**\n     * Stores the current stage.\n     * @type {Stage}\n     * @private\n     */\n    $stage;\n\n    /**\n     * Stores the current actor system.\n     * @type {SystemActor}\n     * @private\n     */\n    $systemActor;\n\n    /**\n     * Stores the current audio system.\n     * @type {SystemAudio}\n     * @private\n     */\n    $systemAudio;\n\n    /**\n     * Stores the current collision system.\n     * @type {SystemCollision}\n     * @private\n     */\n    $systemCollision;\n\n    /**\n     * Stores the current input system.\n     * @type {SystemInput}\n     * @private\n     */\n    $systemInput;\n\n    /**\n     * Stores the current render system.\n     * @type {SystemRender}\n     * @private\n     */\n    $systemRender;\n\n    /**\n     * Stores the current vibration system.\n     * @type {SystemVibration}\n     * @private\n     */\n    $systemVibration;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Gets the container.\n     * @type {HTMLElement}\n     * @public\n     */\n    get container() {\n\n        return this.$container;\n    }\n\n    /**\n     * Gets the current stage.\n     * @type {Stage}\n     * @public\n     */\n    get stage() {\n\n        return this.$stage;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Creates a new game engine.\n     * @param {Object} $parameters The given parameters.\n     * @param {Vector3} [$parameters.$color] The rendering background color to use.\n     * @param {HTMLElement} $parameters.$container The container for the game engine to create.\n     * @param {Vector2} [$parameters.$resolution] The rendering resolution to use.\n     */\n    constructor({$color = new Vector3(0, 0, 0), $container, $resolution = new Vector2(320, 240)}) {\n\n        this.$color = $color;\n        this.$container = $container;\n        this.$resolution = $resolution;\n\n        this.$uuid = UTILS.uuid();\n\n        this.$loop = new Loop(this.tick.bind(this));\n        this.$preloaded = new Set();\n\n        this.$systemActor = new SystemActor();\n        this.$systemAudio = new SystemAudio();\n        this.$systemCollision = new SystemCollision();\n        this.$systemInput = new SystemInput({$container: this.$container});\n        this.$systemRender = new SystemRender({$color: this.$color, $container: this.$container, $resolution: this.$resolution});\n        this.$systemVibration = new SystemVibration();\n    }\n\n    /**\n     * Creates the given stage.\n     * @param {typeof Stage} $stage The stage to create.\n     * @private\n     */\n    $createStage($stage) {\n\n        this.$stage = new $stage(this);\n        this.$stage.onCreate();\n    }\n\n    /**\n     * Creates the given stage on the next tick update.\n     * @param {typeof Stage} $stage The stage to create on the next tick update.\n     * @public\n     */\n    createStage($stage) {\n\n        this.$next = $stage;\n    }\n\n    /**\n     * Gets the current input state value of the given digital input.\n     * @param {string} $input The event code of the given digital input.\n     * @returns {boolean}\n     * @public\n     */\n    getInput($input) {\n\n        return this.$systemInput.getInput($input);\n    }\n\n    /**\n     * Gets the current input state value of the given analog input.\n     * @param {string} $input The event code of the given analog input.\n     * @returns {number}\n     * @public\n     */\n    getInputAnalog($input) {\n\n        return this.$systemInput.getInputAnalog($input);\n    }\n\n    /**\n     * Checks if the engine has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        return this.$preloaded.has($asset) === true;\n    }\n\n    /**\n     * Initiates the engine.\n     * @param {number} [$tickrateMinimum] The minimum acceptable number of ticks per virtual second (in ticks/s).\n     * @public\n     */\n    initiate($tickrateMinimum = 60) {\n\n        this.$systemInput.initiate();\n        this.$systemActor.initiate();\n        this.$systemCollision.initiate();\n        this.$systemRender.initiate();\n        this.$systemAudio.initiate();\n        this.$systemVibration.initiate();\n\n        this.$loop.initiate($tickrateMinimum);\n    }\n\n    /**\n     * Preloads the assets of the given stage.\n     * @param {typeof Stage} $stage The stage to preload the assets from.\n     * @returns {Promise<Array<undefined | AudioBuffer | WebGLTexture>>}\n     * @public\n     */\n    preloadStage($stage) {\n\n        /**\n         * @type {Array<Promise<undefined | AudioBuffer | WebGLTexture>>}\n         */\n        const promises = [];\n\n        UTILS.deduplicate($stage.preloadables).forEach(($asset) => {\n\n            if (this.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            this.$preloaded.add($asset);\n\n            if (this.$systemAudio.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            if (this.$systemRender.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            /**\n             * @type {Promise<undefined | AudioBuffer | WebGLTexture>}\n             */\n            const promise = new Promise(($resolve) => {\n\n                fetch($asset)\n                .then(($content) => {\n\n                    const contentType = $content.headers.get('Content-Type');\n\n                    switch(contentType) {\n\n                        case CONTENTTYPES.IMAGEJPEG:\n                        case CONTENTTYPES.IMAGEPNG: {\n\n                            this.$systemRender.loadTexture($content)\n                            .then(($texture) => {\n\n                                $resolve($texture);\n                            });\n\n                            break;\n                        }\n\n                        case CONTENTTYPES.AUDIOMPEG:\n                        case CONTENTTYPES.AUDIOWAVE: {\n\n                            this.$systemAudio.loadAudio($content)\n                            .then(($bufferAudio) => {\n\n                                $resolve($bufferAudio);\n                            });\n\n                            break;\n                        }\n\n                        default: {\n\n                            $resolve(undefined);\n                        }\n                    }\n                });\n            });\n\n            promises.push(promise);\n        });\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Sets the rendering background color.\n     * @param {Vector3} $color The rendering background color to set.\n     * @public\n     */\n    setColor($color) {\n\n        return this.$systemRender.setColor($color);\n    }\n\n    /**\n     * Sets the rendering resolution.\n     * @param {Vector2} $resolution The rendering resolution to set.\n     * @public\n     */\n    setResolution($resolution) {\n\n        return this.$systemRender.setResolution($resolution);\n    }\n\n    /**\n     * Terminates the engine (immediately) (must be used outside the lifecycle of this engine).\n     * @public\n     */\n    terminate() {\n\n        this.$loop.terminate();\n\n        this.$createStage(Stage);\n        this.tick(0);\n\n        this.$systemInput.terminate();\n        this.$systemActor.terminate();\n        this.$systemCollision.terminate();\n        this.$systemRender.terminate();\n        this.$systemAudio.terminate();\n        this.$systemVibration.terminate();\n\n        this.$preloaded = new Set();\n    }\n\n    /**\n     * Updates each system once.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    tick($timetick) {\n\n        if (typeof this.$next === typeof Stage) {\n\n            const stage = this.$next;\n\n            this.$next = undefined;\n\n            this.$createStage(stage);\n        }\n\n        if (typeof this.$stage === 'undefined') {\n\n            return;\n        }\n\n        this.$systemInput.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n\n        this.$systemActor.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n\n        this.$systemCollision.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n\n        this.$systemRender.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n\n        this.$systemAudio.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n\n        this.$systemVibration.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n    }\n}\n\nexport {\n\n    Engine\n};\n\nexport default Engine;\n","import {Actor, Preloadable, Stage} from '../index.js';\n\n/**\n * @module FACTORIES\n */\n\n/**\n * Prepares an actor with preloadable assets.\n * @param {Array<typeof Preloadable | typeof Actor>} $preloadables The preloadable assets (mix of preloadable assets and/or actors with preloadable assets).\n * @returns {typeof Actor}\n *\n * @memberof module:FACTORIES\n */\nfunction ActorWithPreloadables($preloadables) {\n\n    /**\n     * @type {Set<string>}\n     */\n    const preloadables = new Set();\n\n    $preloadables.forEach(($preloadable) => {\n\n        if (typeof $preloadable !== typeof Preloadable) {\n\n            return;\n        }\n\n        $preloadable.preloadables.forEach(($preloadable) => {\n\n            if (preloadables.has($preloadable) === true) {\n\n                return;\n            }\n\n            preloadables.add($preloadable);\n        });\n    });\n\n    /**\n     * @ignore\n     */\n    class ActorWithPreloadables extends Actor {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = Array.from(preloadables);\n    };\n\n    return ActorWithPreloadables;\n}\n\n/**\n * Prepares a preloadable sound.\n * @param {string} $sound The preloadable sound.\n * @returns {typeof Preloadable}\n *\n * @memberof module:FACTORIES\n */\nfunction PreloadableSound($sound) {\n\n    /**\n     * @ignore\n     */\n    class PreloadableSound extends Preloadable {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = [$sound];\n    };\n\n    return PreloadableSound;\n}\n\n/**\n * Prepares a preloadable texture.\n * @param {string} $texture The preloadable texture.\n * @returns {typeof Preloadable}\n *\n * @memberof module:FACTORIES\n */\nfunction PreloadableTexture($texture) {\n\n    /**\n     * @ignore\n     */\n    class PreloadableTexture extends Preloadable {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = [$texture];\n    };\n\n    return PreloadableTexture;\n}\n\n/**\n * Prepares a stage with preloadable assets.\n * @param {Array<typeof Preloadable | typeof Actor>} $preloadables The preloadable assets (mix of preloadable assets and/or actors with preloadable assets).\n * @returns {typeof Stage}\n *\n * @memberof module:FACTORIES\n */\nfunction StageWithPreloadables($preloadables) {\n\n    /**\n     * @type {Set<string>}\n     */\n    const preloadables = new Set();\n\n    $preloadables.forEach(($preloadable) => {\n\n        if (typeof $preloadable !== typeof Preloadable) {\n\n            return;\n        }\n\n        $preloadable.preloadables.forEach(($preloadable) => {\n\n            if (preloadables.has($preloadable) === true) {\n\n                return;\n            }\n\n            preloadables.add($preloadable);\n        });\n    });\n\n    /**\n     * @ignore\n     */\n    class StageWithPreloadables extends Stage {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = Array.from(preloadables);\n    };\n\n    return StageWithPreloadables;\n}\n\nexport {\n\n    ActorWithPreloadables,\n    PreloadableSound,\n    PreloadableTexture,\n    StageWithPreloadables\n};\n","/**\n * Creates finite state machines.\n * @template {string} T The generic type of the names of a state.\n *\n * @example\n *\n * const toggle = new FiniteStateMachine([\n *\n *     {\n *         $state: 'ON',\n *         $transitions: [{\n *\n *             $state: 'OFF',\n *             $condition: ({$timer}) => ($timer >= 1000)\n *         }]\n *     },\n *     {\n *         $state: 'OFF',\n *         $transitions: [{\n *\n *             $state: 'ON',\n *             $condition: ({$timer}) => ($timer >= 1000)\n *         }]\n *     }\n * ]);\n */\nclass FiniteStateMachine {\n\n    /**\n     * @callback typestatehandlerenter A state entering handler.\n     * @param {Object} $parameters The given parameters.\n     * @param {T} $parameters.$previous The previous state.\n     * @returns {void}\n     * @protected\n     *\n     * @memberof FiniteStateMachine\n     */\n\n    /**\n     * @callback typestatehandlerleave A state leaving handler.\n     * @param {Object} $parameters The given parameters.\n     * @param {number} $parameters.$timer The timer of the current state.\n     * @param {T} $parameters.$next The next state.\n     * @returns {void}\n     * @protected\n     *\n     * @memberof FiniteStateMachine\n     */\n\n    /**\n     * @callback typestatetransitioncondition A state transition condition.\n     * @param {Object} $parameters The given parameters.\n     * @param {T} $parameters.$previous The previous state.\n     * @param {number} $parameters.$timer The timer of the current state.\n     * @returns {boolean}\n     * @protected\n     *\n     * @memberof FiniteStateMachine\n     */\n\n    /**\n     * @typedef {Object} typestatetransition A transition to a state.\n     * @property {typestatetransitioncondition} typestatetransition.$condition The condition to transition to given state.\n     * @property {T} typestatetransition.$state The given state to transition to.\n     * @protected\n     *\n     * @memberof FiniteStateMachine\n     */\n\n    /**\n     * @typedef {Object} typestate A state.\n     * @property {T} typestate.$state The name of the state.\n     * @property {typestatehandlerenter} [typestate.$onEnter] The handler to execute when entering the state.\n     * @property {typestatehandlerleave} [typestate.$onLeave] The handler to execute when leaving the state.\n     * @property {Array<typestatetransition>} typestate.$transitions The transitions to given states.\n     * @protected\n     *\n     * @memberof FiniteStateMachine\n     */\n\n    /**\n     * Stores the initiated status.\n     * @type {boolean}\n     * @private\n     */\n    $initiated;\n\n    /**\n     * Stores the previous state.\n     * @type {typestate}\n     * @private\n     */\n    $previous;\n\n    /**\n     * Stores the current state.\n     * @type {typestate}\n     * @private\n     */\n    $state;\n\n    /**\n     * Stores the states.\n     * @type {Map<T, typestate>}\n     * @private\n     */\n    $states;\n\n    /**\n     * Stores the timer of the current state.\n     * @type {number}\n     * @private\n     */\n    $timer;\n\n    /**\n     * Creates a new finite state machine.\n     * @param {Array<typestate>} $data The representation of the finite state machine.\n     */\n    constructor($data) {\n\n        this.$initiated = false;\n        this.$states = new Map();\n        this.$timer = 0;\n\n        $data.forEach(($state) => {\n\n            this.$states.set($state.$state, $state);\n        });\n    }\n\n    /**\n     * Initiates the finite state machine.\n     * @param {T} $state The name of the state to initiate.\n     * @public\n     */\n    initiate($state) {\n\n        if (this.$initiated === true) {\n\n            return;\n        }\n\n        this.$previous = this.$state\n        this.$state = this.$states.get($state);\n\n        if (typeof this.$state.$onEnter === 'function') {\n\n            this.$state.$onEnter({$previous: undefined});\n        }\n\n        this.$initiated = true;\n    }\n\n    /**\n     * Updates the finite state machine.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    update($timetick) {\n\n        if (this.$initiated === false) {\n\n            return;\n        }\n\n        this.$timer += $timetick;\n\n        for (let $transition of this.$state.$transitions) {\n\n            let previous;\n\n            if (typeof this.$previous !== 'undefined') {\n\n                previous = this.$previous.$state;\n            }\n\n            const current = this.$state.$state;\n            const next = $transition.$state;\n\n            if ($transition.$condition({$previous: previous, $timer: this.$timer}) === true) {\n\n                if (typeof this.$state.$onLeave === 'function') {\n\n                    this.$state.$onLeave({$timer: this.$timer, $next: next});\n                }\n\n                this.$timer = 0;\n\n                this.$previous = this.$state;\n                this.$state = this.$states.get(next);\n\n                if (typeof this.$state.$onEnter === 'function') {\n\n                    this.$state.$onEnter({$previous: current});\n                }\n\n                break;\n            }\n        }\n    }\n}\n\nexport {\n\n    FiniteStateMachine\n};\n\nexport default FiniteStateMachine;\n","/**\n * Creates update loops.\n *\n * @example\n *\n * const loop = new Loop(handler);\n * loop.initiate();\n */\nclass Loop {\n\n    /**\n     * Stores the handler to execute with the update loop.\n     * @type {Function}\n     * @private\n     */\n    $handler;\n\n    /**\n     * Stores the identifier of the last requestAnimationFrame call.\n     * @type {number}\n     * @private\n     */\n    $identifier;\n\n    /**\n     * Stores the time value of the previous tick call.\n     * @type {number}\n     * @private\n     */\n    $timePrevious;\n\n    /**\n     * Stores the global scope used.\n     * @type {Window}\n     * @private\n     */\n    $scope;\n\n    /**\n     * Creates a new update loop.\n     * @param {Function} $handler The handler to execute with the update loop.\n     * @param {Window} $scope The global scope to use.\n     */\n    constructor($handler, $scope = window) {\n\n        this.$handler = $handler;\n        this.$scope = $scope;\n    }\n\n    /**\n     * Loops the update loop.\n     * @param {number} $timetick The tick duration (in ms).\n     * @private\n     */\n    $loop($timetick) {\n\n        const timeCurrent = performance.now();\n\n        if (typeof this.$timePrevious !== 'undefined') {\n\n            const timetickCurrent = timeCurrent - this.$timePrevious;\n            const timetickMinimum = $timetick;\n            const timetickSafe = Math.min(timetickMinimum, timetickCurrent);\n\n            this.$handler(timetickSafe);\n        }\n\n        this.$identifier = this.$scope.requestAnimationFrame(this.$loop.bind(this, $timetick));\n\n        this.$timePrevious = timeCurrent;\n    }\n\n    /**\n     * Initiates the update loop.\n     * @param {number} [$tickrateMinimum] The minimum acceptable number of ticks per virtual second (in ticks/s).\n     * @public\n     */\n    initiate($tickrateMinimum = 60) {\n\n        this.$loop(1000 / $tickrateMinimum);\n    }\n\n    /**\n     * Terminates the update loop.\n     * @public\n     */\n    terminate() {\n\n        if (typeof this.$identifier !== 'undefined') {\n\n            this.$scope.cancelAnimationFrame(this.$identifier);\n\n            this.$timePrevious = undefined;\n        }\n    }\n}\n\nexport {\n\n    Loop\n};\n\nexport default Loop;\n","/**\n * Static default shader sources.\n *\n * @example\n *\n * const sourceFragment = Shader.sourceFragment;\n * const sourceVertex = Shader.sourceVertex;\n */\nclass Shader {\n\n    /**\n     * @typedef {('vec2' | 'vec3')} typetypeattribute A type of attribute.\n     * @protected\n     *\n     * @memberof Shader\n     */\n\n    /**\n     * @typedef {('bool' | 'bool[]' | 'float' | 'float[]' | 'int' | 'int[]' | 'mat4' | 'mat4[]' | 'sampler2D' | 'vec2' | 'vec2[]' | 'vec3' | 'vec3[]')} typetypeuniform A type of uniform.\n     * @protected\n     *\n     * @memberof Shader\n     */\n\n    /**\n     * Stores the attributes needed by the shader program.\n     * @type {Object<string, typetypeattribute>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static attributes = {\n\n        'attributePosition': 'vec2',\n        'attributeUvmapping': 'vec2'\n    };\n\n    /**\n     * Stores the fragment shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourceFragment = (\n\n        'precision highp float;' +\n\n        'uniform sampler2D uniformTextureColor;' +\n        'uniform sampler2D uniformTextureOpacity;' +\n        'uniform vec2 uniformTranslationPointOfView;' +\n\n        'varying vec2 varyingUvmapping;' +\n\n        'void main(void) {' +\n\n            'vec4 colorTextureColor = texture2D(uniformTextureColor, varyingUvmapping);' +\n            'vec4 colorTextureOpacity = texture2D(uniformTextureOpacity, varyingUvmapping);' +\n\n            'float alpha = colorTextureColor.a * colorTextureOpacity.r;' +\n\n            'gl_FragColor = vec4(colorTextureColor.rgb, alpha);' +\n        '}'\n    );\n\n    /**\n     * Stores the vertex shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourceVertex = (\n\n        'attribute vec2 attributePosition;' +\n        'attribute vec2 attributeUvmapping;' +\n\n        'uniform vec2 uniformAspect;' +\n        'uniform vec2 uniformSize;' +\n        'uniform vec2 uniformTranslation;' +\n        'uniform vec2 uniformTranslationPointOfView;' +\n\n        'varying vec2 varyingUvmapping;' +\n\n        'void main(void) {' +\n\n            'varyingUvmapping = attributeUvmapping;' +\n\n            'vec2 position = (attributePosition * uniformSize + uniformTranslation);' +\n            'vec2 projection = 2.0 * (position - uniformTranslationPointOfView) / uniformAspect;' +\n\n            'gl_Position = vec4(projection, 0.0, 1.0);' +\n        '}'\n    );\n\n    /**\n     * Stores the uniforms needed by the shader program.\n     * @type {Object<string, typetypeuniform>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static uniforms = {\n\n        'uniformAspect': 'vec2',\n        'uniformSize': 'vec2',\n        'uniformTextureColor': 'sampler2D',\n        'uniformTextureOpacity': 'sampler2D',\n        'uniformTranslation': 'vec2',\n        'uniformTranslationPointOfView': 'vec2'\n    };\n}\n\nexport {\n\n    Shader\n};\n\nexport default Shader;\n","/**\n * Creates sounds.\n *\n * @example\n *\n * // minimal\n * const sound = new Sound({\n *\n *     $audio: audio\n * });\n *\n * @example\n *\n * // full\n * const sound = new Sound({\n *\n *     $audio: audio,\n *     $durationFadeOut: 125,\n *     $loop: false,\n *     $volume: 1\n * });\n */\nclass Sound {\n\n    /**\n     * Stores the audio source.\n     * @type {string}\n     * @private\n     */\n    $audio;\n\n    /**\n     * Stores fade out duration.\n     * @type {number}\n     * @private\n     */\n    $durationFadeOut;\n\n    /**\n     * Stores the loop status.\n     * @type {boolean}\n     * @private\n     */\n    $loop;\n\n    /**\n     * Stores the volume.\n     * @type {number}\n     * @private\n     */\n    $volume;\n\n    /**\n     * Gets the audio source.\n     * @type {string}\n     * @public\n     */\n    get audio() {\n\n        return this.$audio;\n    }\n\n    /**\n     * Gets fade out duration (in ms) (must be positive).\n     * @type {number}\n     * @public\n     */\n    get durationFadeOut() {\n\n        return this.$durationFadeOut;\n    }\n\n    /**\n     * Gets the loop status.\n     * @type {boolean}\n     * @public\n     */\n    get loop() {\n\n        return this.$loop;\n    }\n\n    /**\n     * Gets the volume.\n     * @type {number}\n     * @public\n     */\n    get volume() {\n\n        return this.$volume;\n    }\n\n    /**\n     * Creates a new sound.\n     * @param {Object} $parameters The given parameters.\n     * @param {string} $parameters.$audio The audio source.\n     * @param {number} [$parameters.$durationFadeOut] The fade out duration (in ms) (must be positive).\n     * @param {boolean} [$parameters.$loop] The loop status.\n     * @param {number} [$parameters.$volume] The volume.\n     */\n    constructor({$audio, $durationFadeOut = 1000 / 60, $loop = false, $volume = 1}) {\n\n        this.$audio = $audio;\n        this.$durationFadeOut = $durationFadeOut;\n        this.$loop = $loop;\n        this.$volume = $volume;\n    }\n}\n\nexport {\n\n    Sound\n};\n\nexport default Sound;\n","import {AABB, Vector2} from '../index.js';\n\n/**\n * Creates sprites.\n *\n * @example\n *\n * // minimal\n * const sprite = new Sprite({\n *\n *     $sizeTarget: new Vector2(32, 32),\n *     $textureColor: textureColor\n * });\n *\n * @example\n *\n * // full\n * const sprite = new Sprite({\n *\n *     $frameSource: new AABB(new Vector2(0, 0), new Vector2(1, 1)),\n *     $sizeTarget: new Vector2(32, 32),\n *     $textureColor: textureColor,\n *     $textureOpacity: textureOpacity\n * });\n */\nclass Sprite {\n\n    /**\n     * Stores the frame to use from the texture sources (with values in [0, 1] ranges).\n     * @type {AABB}\n     * @private\n     */\n    $frameSource;\n\n    /**\n     * Stores the serialized value of frame to use from the texture sources (with values in [0, 1] ranges).\n     * @type {string}\n     * @private\n     */\n    $frameSourceSerialized;\n\n    /**\n     * Stores the target size.\n     * @type {Vector2}\n     * @private\n     */\n    $sizeTarget;\n\n    /**\n     * Stores the color texture source.\n     * @type {string}\n     * @private\n     */\n    $textureColor;\n\n    /**\n     * Stores the opacity texture source.\n     * @type {string}\n     * @private\n     */\n    $textureOpacity;\n\n    /**\n     * Gets the frame to use from the texture sources.\n     * @type {AABB}\n     * @public\n     */\n    get frameSource() {\n\n        return this.$frameSource;\n    }\n\n    /**\n     * Gets the serialized value of the frame to use from the texture sources.\n     * @type {string}\n     * @public\n     */\n    get frameSourceSerialized() {\n\n        return this.$frameSourceSerialized;\n    }\n\n    /**\n     * Gets the target size.\n     * @type {Vector2}\n     * @public\n     */\n    get sizeTarget() {\n\n        return this.$sizeTarget;\n    }\n\n    /**\n     * Gets the color texture source.\n     * @type {string}\n     * @public\n     */\n    get textureColor() {\n\n        return this.$textureColor;\n    }\n\n    /**\n     * Gets the opacity texture source.\n     * @type {string}\n     * @public\n     */\n    get textureOpacity() {\n\n        return this.$textureOpacity;\n    }\n\n    /**\n     * Creates a new sprite.\n     * @param {Object} $parameters The given parameters.\n     * @param {AABB} [$parameters.$frameSource] The frame to use from the texture sources (with values in [0, 1] ranges) (if not specified then the full texture is used).\n     * @param {Vector2} $parameters.$sizeTarget The target size.\n     * @param {string} $parameters.$textureColor The color texture source.\n     * @param {string} [$parameters.$textureOpacity] The opacity texture source.\n     */\n    constructor({$frameSource = new AABB(new Vector2(0, 0), new Vector2(1, 1)), $sizeTarget, $textureColor, $textureOpacity}) {\n\n        this.$frameSource = $frameSource;\n        this.$sizeTarget = $sizeTarget;\n        this.$textureColor = $textureColor;\n        this.$textureOpacity = $textureOpacity;\n\n        this.$frameSourceSerialized = JSON.stringify([\n\n            [$frameSource.minimum.x, $frameSource.minimum.y],\n            [$frameSource.maximum.x, $frameSource.maximum.y]\n        ]);\n    }\n}\n\nexport {\n\n    Sprite\n};\n\nexport default Sprite;\n","/**\n * @module STORAGE\n */\n\n/**\n * Gets the stored data with the given name.\n * @param {string} $name The name of the stored data to get.\n * @returns {any}\n *\n * @memberof module:STORAGE\n */\nfunction get($name) {\n\n    const value = window.localStorage.getItem($name);\n\n    if (value === null) {\n\n        return undefined;\n    }\n\n    return JSON.parse(value);\n}\n\n/**\n * Checks if the storage has data stored with the given name.\n * @param {string} $name The name of the stored data to check.\n * @returns {boolean}\n *\n * @memberof module:STORAGE\n */\nfunction has($name) {\n\n    const value = window.localStorage.getItem($name);\n\n    if (value === null) {\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Removes the stored data with the given name.\n * @param {string} $name The name of the stored data to remove.\n *\n * @memberof module:STORAGE\n */\nfunction remove($name) {\n\n    window.localStorage.removeItem($name);\n}\n\n/**\n * Sets the data to store with the given name.\n * @param {string} $name The name of the data to store.\n * @param {any} $value The value of the data to store.\n *\n * @memberof module:STORAGE\n */\nfunction set($name, $value) {\n\n    const value = JSON.stringify($value);\n\n    if (typeof value === 'undefined') {\n\n        return;\n    }\n\n    window.localStorage.setItem($name, value);\n}\n\nexport {\n\n    get,\n    has,\n    remove,\n    set\n};\n","import {Stage} from '../index.js';\n\n/**\n * Abstract systems.\n *\n * @example\n *\n * class SystemExample extends System {}\n */\nclass System {\n\n    /**\n     * Stores the initiated status.\n     * @type {boolean}\n     * @protected\n     */\n    $initiated;\n\n    /**\n     * Creates a new system.\n     * @protected\n     */\n    constructor() {\n\n        this.$initiated = false;\n    }\n\n    /**\n     * Initiates the system.\n     * @public\n     */\n    initiate() {\n\n        if (this.$initiated === true) {\n\n            return;\n        }\n\n        this.onInitiate();\n\n        this.$initiated = true;\n    }\n\n    /**\n     * Called when the system is being initiated.\n     * @public\n     */\n    onInitiate() {}\n\n    /**\n     * Called when the system is being terminated.\n     * @returns {(void | Promise<void>)}\n     * @public\n     */\n    onTerminate() {}\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage, $timetick}) {}\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        if (this.$initiated === false) {\n\n            return;\n        }\n\n        const terminated = this.onTerminate();\n\n        if (typeof terminated === 'undefined') {\n\n            this.$initiated = false;\n\n            return;\n        }\n\n        terminated.then(() => {\n\n            this.$initiated = false;\n        });\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    tick({$stage, $timetick}) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        this.onTick({$stage, $timetick});\n    }\n}\n\nexport {\n\n    System\n};\n\nexport default System;\n","import {TimelineKeyframe} from '../index.js';\n\n/**\n * Creates timelines.\n *\n * @example\n *\n * const timeline = new Timeline(keyframes);\n * timeline.seekTimecode(0);\n * timeline.tick(timetick);\n */\nclass Timeline {\n\n    /**\n     * Stores the keyframes.\n     * @type {Array<TimelineKeyframe>}\n     * @private\n     */\n    $keyframes;\n\n    /**\n     * Stores the timecode.\n     * @type {number}\n     * @private\n     */\n    $timecode;\n\n    /**\n     * Gets the timecode.\n     * @type {number}\n     * @public\n     */\n    get timecode() {\n\n        return this.$timecode;\n    }\n\n    /**\n     * Creates a new timeline.\n     * @param {Array<TimelineKeyframe>} [$keyframes] The keyframes.\n     */\n    constructor($keyframes = []) {\n\n        this.$keyframes = [...$keyframes].sort(($a, $b) => ($a.timecode - $b.timecode));\n\n        this.$timecode = 0;\n    }\n\n    /**\n     * Seeks to the given name.\n     * @param {string} $name The name of the keyframe to seek to.\n     * @returns {this}\n     * @public\n     */\n    seekName($name) {\n\n        const result = this.$keyframes.find(($keyframe) => ($keyframe.name === $name));\n\n        if (typeof result !== 'undefined') {\n\n            this.seekTimecode(result.timecode);\n        }\n\n        return this;\n    }\n\n    /**\n     * Seeks to the given timecode.\n     * @param {number} $timecode The timecode to seek to (in ms).\n     * @returns {this}\n     * @public\n     */\n    seekTimecode($timecode) {\n\n        this.$timecode = $timecode;\n\n        this.$keyframes.forEach(($keyframe) => {\n\n            if ($keyframe.timecode !== this.$timecode) {\n\n                return;\n            }\n\n            $keyframe.onEnter(this);\n        });\n\n        return this;\n    }\n\n    /**\n     * Updates the timeline by one tick update.\n     * @param {number} $timetick The tick duration (in ms).\n     * @returns {this}\n     * @public\n     */\n    tick($timetick) {\n\n        if ($timetick === 0) {\n\n            return this;\n        }\n\n        const previous = this.$timecode;\n\n        this.$timecode += $timetick;\n\n        const current = this.$timecode;\n\n        this.$keyframes.forEach(($keyframe) => {\n\n            if ($keyframe.timecode <= previous) {\n\n                return;\n            }\n\n            if ($keyframe.timecode > current) {\n\n                return;\n            }\n\n            $keyframe.onEnter(this);\n        });\n\n        return this;\n    }\n}\n\nexport {\n\n    Timeline\n};\n\nexport default Timeline;\n","import {Timeline} from '../index.js';\n\n/**\n * Creates timeline keyframes.\n *\n * @example\n *\n * // minimal\n * const keyframe = new TimelineKeyframe({$onEnter, $timecode});\n *\n * @example\n *\n * // full\n * const keyframe = new TimelineKeyframe({$name, $onEnter, $timecode});\n */\nclass TimelineKeyframe {\n\n    /**\n     * @callback typehandlerenter A handler to execute when entering a keyframe.\n     * @param {Timeline} $timeline The reference timeline.\n     * @returns {void}\n     * @protected\n     *\n     * @memberof TimelineKeyframe\n     */\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Stores the keyframe entering handler.\n     * @type {typehandlerenter}\n     * @private\n     */\n    $onEnter;\n\n    /**\n     * Stores the timecode.\n     * @type {number}\n     * @private\n     */\n    $timecode;\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Gets the keyframe entering handler.\n     * @type {typehandlerenter}\n     * @public\n     */\n    get onEnter() {\n\n        return this.$onEnter;\n    }\n\n    /**\n     * Gets the timecode.\n     * @type {number}\n     * @public\n     */\n    get timecode() {\n\n        return this.$timecode;\n    }\n\n    /**\n     * Creates a new timeline keyframe.\n     * @param {Object} $parameters The given parameters.\n     * @param {string} [$parameters.$name] The name.\n     * @param {typehandlerenter} $parameters.$onEnter The keyframe entering handler.\n     * @param {number} $parameters.$timecode The timecode.\n     */\n    constructor({$name, $onEnter, $timecode}) {\n\n        this.$name = $name;\n        this.$onEnter = $onEnter;\n        this.$timecode = $timecode;\n    }\n}\n\nexport {\n\n    TimelineKeyframe\n};\n\nexport default TimelineKeyframe;\n","/**\n * @module UTILS\n */\n\n/**\n * Deduplicates the items of the given array (a new array is created).\n * @template {any} T The generic type of the values of the array.\n * @param {Array<T>} $array The array.\n * @returns {Array<T>}\n *\n * @memberof module:UTILS\n */\nfunction deduplicate($array) {\n\n    return Array.from(new Set($array));\n}\n\n/**\n * Extracts the given item from the given array.\n * @template {any} T The generic type of the values of the array.\n * @param {T} $item The item to remove.\n * @param {Array<T>} $array The array.\n * @returns {Array<T>}\n *\n * @memberof module:UTILS\n */\nfunction extract($item, $array) {\n\n    const index = $array.indexOf($item);\n\n    if (index === -1) {\n\n        return [];\n    }\n\n    return $array.splice(index, 1);\n}\n\n/**\n * Resolves when the browser is ready to perform an animation frame request.\n * @returns {Promise<number>}\n *\n * @memberof module:UTILS\n */\nfunction frame() {\n\n    /**\n     * @type {Promise<number>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        window.requestAnimationFrame($resolve);\n    });\n\n    return promise;\n}\n\n/**\n * Resolves when the user has interacted at least once since page load.\n * @returns {Promise<void>}\n *\n * @memberof module:UTILS\n */\nfunction ready() {\n\n    /**\n     * @type {Promise<void>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        /**\n         * @type {number}\n         */\n        let id;\n\n        const check = () => {\n\n            if (navigator.userActivation.hasBeenActive === false) {\n\n                id = window.requestAnimationFrame(check);\n\n                return;\n            }\n\n            window.cancelAnimationFrame(id);\n\n            $resolve();\n        };\n\n        id = window.requestAnimationFrame(check);\n    });\n\n    return promise;\n}\n\n/**\n * Resolves when the given delay has passed.\n * @param {number} $delay The delay (in ms).\n * @returns {Promise<void>}\n *\n * @memberof module:UTILS\n */\nfunction sleep($delay) {\n\n    /**\n     * @type {Promise<void>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        window.setTimeout($resolve, $delay);\n    });\n\n    return promise;\n}\n\n/**\n * Gets a new UUID.\n * @returns {string}\n *\n * @memberof module:UTILS\n */\nfunction uuid() {\n\n    return window.crypto.randomUUID();\n}\n\nexport {\n\n    deduplicate,\n    extract,\n    frame,\n    ready,\n    sleep,\n    uuid\n};\n","import {MATHEMATICS} from '../index.js';\n\n/**\n * Creates two-dimensional vectors.\n *\n * @example\n *\n * // without chaining\n * const vector = new Vector2(3, 2);\n * vector.add(new Vector2(1, 0));\n *\n * @example\n *\n * // with chaining\n * const vector = new Vector2(3, 2).add(new Vector2(1, 0));\n */\nclass Vector2 {\n\n    /**\n     * Stores the x component.\n     * @type {number}\n     * @private\n     */\n    $x;\n\n    /**\n     * Stores the y component.\n     * @type {number}\n     * @private\n     */\n    $y;\n\n    /**\n     * Gets the x component.\n     * @type {number}\n     * @public\n     */\n    get x() {\n\n        return this.$x;\n    }\n\n    /**\n     * Gets the y component.\n     * @type {number}\n     * @public\n     */\n    get y() {\n\n        return this.$y;\n    }\n\n    /**\n     * Creates a new two-dimensional vector.\n     * @param {number} $x The x component of the vector to create.\n     * @param {number} $y The y component of the vector to create.\n     */\n    constructor($x, $y) {\n\n        this.$x = $x;\n        this.$y = $y;\n    }\n\n    /**\n     * Creates a new vector from the given vector.\n     * @param {Vector2} $vector The given vector.\n     * @returns {Vector2}\n     * @public\n     * @static\n     */\n    static from($vector) {\n\n        return $vector.clone();\n    }\n\n    /**\n     * Adds the given vector.\n     * @param {Vector2} $vector The vector to add.\n     * @returns {this}\n     * @public\n     */\n    add($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x + $vector.x;\n        this.$y = y + $vector.y;\n\n        return this;\n    }\n\n    /**\n     * Clones the vector.\n     * @returns {Vector2}\n     * @public\n     */\n    clone() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        return new Vector2(x, y);\n    }\n\n    /**\n     * Checks the equality with the given vector.\n     * @param {Vector2} $vector The vector to check with.\n     * @returns {boolean}\n     * @public\n     */\n    equal($vector) {\n\n        return this.$x === $vector.x\n        && this.$y === $vector.y;\n    }\n\n    /**\n     * Gets the length of the vector.\n     * @returns {number}\n     * @public\n     */\n    length() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    /**\n     * Multiplies with the given vector.\n     * @param {Vector2} $vector The vector to multiply with.\n     * @returns {this}\n     * @public\n     */\n    multiply($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x * $vector.x;\n        this.$y = y * $vector.y;\n\n        return this;\n    }\n\n    /**\n     * Negates the vector.\n     * @returns {this}\n     * @public\n     */\n    negate() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = - x;\n        this.$y = - y;\n\n        return this;\n    }\n\n    /**\n     * Normalizes the vector.\n     * @returns {this}\n     * @public\n     */\n    normalize() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        let length = x * x + y * y;\n\n        if (length > 0) {\n\n            length = 1 / Math.sqrt(length);\n        }\n\n        this.$x = x * length;\n        this.$y = y * length;\n\n        return this;\n    }\n\n    /**\n     * Rotates the vector by the given angle.\n     * @param {number} $angle The angle of rotation to apply (in degrees) (clockwise).\n     * @returns {this}\n     * @public\n     */\n    rotate($angle) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        const radians = $angle * MATHEMATICS.RADIANS;\n\n        const cosine = Math.cos(radians);\n        const sine = Math.sin(radians);\n\n        this.$x = x * cosine - y * sine;\n        this.$y = x * sine + y * cosine;\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by the given scalar factor.\n     * @param {number} $factor The scalar factor to multiply with.\n     * @returns {this}\n     * @public\n     */\n    scale($factor) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x * $factor;\n        this.$y = y * $factor;\n\n        return this;\n    }\n\n    /**\n     * Subtracts the given vector.\n     * @param {Vector2} $vector The vector to subtract.\n     * @returns {this}\n     * @public\n     */\n    subtract($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x - $vector.x;\n        this.$y = y - $vector.y;\n\n        return this;\n    }\n}\n\nexport {\n\n    Vector2\n};\n\nexport default Vector2;\n","import {Quaternion} from '../index.js';\n\n/**\n * Creates three-dimensional vectors.\n *\n * @example\n *\n * // without chaining\n * const vector = new Vector3(3, 2, 1);\n * vector.add(new Vector3(1, 0, -1));\n *\n * @example\n *\n * // with chaining\n * const vector = new Vector3(3, 2, 1).add(new Vector3(1, 0, -1));\n */\nclass Vector3 {\n\n    /**\n     * Stores the x component.\n     * @type {number}\n     * @private\n     */\n    $x;\n\n    /**\n     * Stores the y component.\n     * @type {number}\n     * @private\n     */\n    $y;\n\n    /**\n     * Stores the z component.\n     * @type {number}\n     * @private\n     */\n    $z;\n\n    /**\n     * Gets the x component.\n     * @type {number}\n     * @public\n     */\n    get x() {\n\n        return this.$x;\n    }\n\n    /**\n     * Gets the y component.\n     * @type {number}\n     * @public\n     */\n    get y() {\n\n        return this.$y;\n    }\n\n    /**\n     * Gets the z component.\n     * @type {number}\n     * @public\n     */\n    get z() {\n\n        return this.$z;\n    }\n\n    /**\n     * Creates a new three-dimensional vector.\n     * @param {number} $x The x component of the vector to create.\n     * @param {number} $y The y component of the vector to create.\n     * @param {number} $z The z component of the vector to create.\n     */\n    constructor($x, $y, $z) {\n\n        this.$x = $x;\n        this.$y = $y;\n        this.$z = $z;\n    }\n\n    /**\n     * Creates a new vector from the given vector.\n     * @param {Vector3} $vector The given vector.\n     * @returns {Vector3}\n     * @public\n     * @static\n     */\n    static from($vector) {\n\n        return $vector.clone();\n    }\n\n    /**\n     * Adds the given vector.\n     * @param {Vector3} $vector The vector to add.\n     * @returns {this}\n     * @public\n     */\n    add($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x + $vector.x;\n        this.$y = y + $vector.y;\n        this.$z = z + $vector.z;\n\n        return this;\n    }\n\n    /**\n     * Clones the vector.\n     * @returns {Vector3}\n     * @public\n     */\n    clone() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        return new Vector3(x, y, z);\n    }\n\n    /**\n     * Checks the equality with the given vector.\n     * @param {Vector3} $vector The vector to check with.\n     * @returns {boolean}\n     * @public\n     */\n    equal($vector) {\n\n        return this.$x === $vector.x\n        && this.$y === $vector.y\n        && this.$z === $vector.z;\n    }\n\n    /**\n     * Gets the length of the vector.\n     * @returns {number}\n     * @public\n     */\n    length() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n\n    /**\n     * Multiplies with the given vector.\n     * @param {Vector3} $vector The vector to multiply with.\n     * @returns {this}\n     * @public\n     */\n    multiply($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x * $vector.x;\n        this.$y = y * $vector.y;\n        this.$z = z * $vector.z;\n\n        return this;\n    }\n\n    /**\n     * Negates the vector.\n     * @returns {this}\n     * @public\n     */\n    negate() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = - x;\n        this.$y = - y;\n        this.$z = - z;\n\n        return this;\n    }\n\n    /**\n     * Normalizes the vector.\n     * @returns {this}\n     * @public\n     */\n    normalize() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        let length = x * x + y * y + z * z;\n\n        if (length > 0) {\n\n            length = 1 / Math.sqrt(length);\n        }\n\n        this.$x = x * length;\n        this.$y = y * length;\n        this.$z = z * length;\n\n        return this;\n    }\n\n    /**\n     * Rotates the vector.\n     * @param {Quaternion} $quaternion The rotation to apply.\n     * @returns {this}\n     * @public\n     */\n    rotate($quaternion) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        const xq = $quaternion.x;\n        const yq = $quaternion.y;\n        const zq = $quaternion.z;\n        const wq = $quaternion.w;\n\n        let xu = yq * z - zq * y;\n        let yu = zq * x - xq * z;\n        let zu = xq * y - yq * x;\n\n        let xv = yq * zu - zq * yu;\n        let yv = zq * xu - xq * zu;\n        let zv = xq * yu - yq * xu;\n\n        const w = wq * 2;\n\n        xu *= w;\n        yu *= w;\n        zu *= w;\n\n        xv *= 2;\n        yv *= 2;\n        zv *= 2;\n\n        this.$x = x + xu + xv;\n        this.$y = y + yu + yv;\n        this.$z = z + zu + zv;\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by the given scalar factor.\n     * @param {number} $factor The scalar factor to multiply with.\n     * @returns {this}\n     * @public\n     */\n    scale($factor) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x * $factor;\n        this.$y = y * $factor;\n        this.$z = z * $factor;\n\n        return this;\n    }\n\n    /**\n     * Subtracts the given vector.\n     * @param {Vector3} $vector The vector to subtract.\n     * @returns {this}\n     * @public\n     */\n    subtract($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x - $vector.x;\n        this.$y = y - $vector.y;\n        this.$z = z - $vector.z;\n\n        return this;\n    }\n}\n\nexport {\n\n    Vector3\n};\n\nexport default Vector3;\n","/**\n * Creates vibrations.\n *\n * @example\n *\n * const vibration = new Vibration({\n *\n *     $duration: 200,\n *     $intensityFrequencyHigh: 0.8,\n *     $intensityFrequencyLow: 0.2\n * });\n */\nclass Vibration {\n\n    /**\n     * Stores the duration.\n     * @type {number}\n     * @private\n     */\n    $duration;\n\n    /**\n     * Stores the intensity of the high-frequency (weak) rumble motors.\n     * @type {number}\n     * @private\n     */\n    $intensityFrequencyHigh;\n\n    /**\n     * Stores the intensity of the low-frequency (strong) rumble motors.\n     * @type {number}\n     * @private\n     */\n    $intensityFrequencyLow;\n\n    /**\n     * Gets the duration (in ms).\n     * @type {number}\n     * @public\n     */\n    get duration() {\n\n        return this.$duration;\n    }\n\n    /**\n     * Gets the intensity of the high-frequency (weak) rumble motors (with value in [0, 1] range).\n     * @type {number}\n     * @public\n     */\n    get intensityFrequencyHigh() {\n\n        return this.$intensityFrequencyHigh;\n    }\n\n    /**\n     * Gets the intensity of the low-frequency (strong) rumble motors (with value in [0, 1] range).\n     * @type {number}\n     * @public\n     */\n    get intensityFrequencyLow() {\n\n        return this.$intensityFrequencyLow;\n    }\n\n    /**\n     * Creates a new vibration.\n     * @param {Object} $parameters The given parameters.\n     * @param {number} $parameters.$duration The duration (in ms).\n     * @param {number} $parameters.$intensityFrequencyHigh The intensity of the high-frequency (weak) rumble motors (with value in [0, 1] range).\n     * @param {number} $parameters.$intensityFrequencyLow The intensity of the low-frequency (strong) rumble motors (with value in [0, 1] range).\n     */\n    constructor({$duration, $intensityFrequencyHigh, $intensityFrequencyLow}) {\n\n        this.$duration = $duration;\n        this.$intensityFrequencyHigh = $intensityFrequencyHigh;\n        this.$intensityFrequencyLow = $intensityFrequencyLow;\n    }\n}\n\nexport {\n\n    Vibration\n};\n\nexport default Vibration;\n","import {Vibration} from '../index.js';\n\n/**\n * Creates gamepad events.\n *\n * @example\n *\n * const event = new EventGamepad(type, code, vibration);\n */\nclass EventGamepad extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the vibration.\n     * @type {Vibration}\n     * @private\n     */\n    $vibration;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the vibration.\n     * @type {Vibration}\n     * @public\n     */\n    get vibration() {\n\n        return this.$vibration;\n    }\n\n    /**\n     * Creates a new gamepad event.\n     * @param {('gamepadvibrate')} $type The event type.\n     * @param {string} $code The event code.\n     * @param {Vibration} $vibration The vibration.\n     */\n    constructor($type, $code, $vibration) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$vibration = $vibration;\n    }\n}\n\nexport {\n\n    EventGamepad\n};\n\nexport default EventGamepad;\n","/**\n * Creates gamepad analog events.\n *\n * @example\n *\n * const event = new EventGamepadAnalog(type, code, value);\n */\nclass EventGamepadAnalog extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the analog value.\n     * @type {number}\n     * @private\n     */\n    $value;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the analog value.\n     * @type {number}\n     * @public\n     */\n    get value() {\n\n        return this.$value;\n    }\n\n    /**\n     * Creates a new gamepad analog event.\n     * @param {('gamepadanalog')} $type The event type.\n     * @param {string} $code The event code.\n     * @param {number} $value The analog value.\n     */\n    constructor($type, $code, $value) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$value = $value;\n    }\n}\n\nexport {\n\n    EventGamepadAnalog\n};\n\nexport default EventGamepadAnalog;\n","/**\n * Creates gamepad digital events.\n *\n * @example\n *\n * const event = new EventGamepadDigital(type, code);\n */\nclass EventGamepadDigital extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Creates a new gamepad digital event.\n     * @param {('gamepadconnect' | 'gamepaddown' | 'gamepadup' | 'gamepadvibrate')} $type The event type.\n     * @param {string} $code The event code.\n     */\n    constructor($type, $code) {\n\n        super($type);\n\n        this.$code = $code;\n    }\n}\n\nexport {\n\n    EventGamepadDigital\n};\n\nexport default EventGamepadDigital;\n","import {EventGamepad, EventGamepadAnalog, EventGamepadDigital} from '../index.js';\n\n/**\n * The ordered list of the axes event codes of the gamepad.\n * @type {Array<Array<string>>}\n * @constant\n * @private\n */\nconst $GAMEPADAXES = [\n\n    ['StickLeftLeft', 'StickLeftRight'],\n    ['StickLeftUp', 'StickLeftDown'],\n    ['StickRightLeft', 'StickRightRight'],\n    ['StickRightUp', 'StickRightDown']\n];\n\n/**\n * The ordered list of the buttons event codes of the gamepad.\n * @type {Array<string>}\n * @constant\n * @private\n */\nconst $GAMEPADBUTTONS = [\n\n    'ClusterRightButtonBottom',\n    'ClusterRightButtonRight',\n    'ClusterRightButtonLeft',\n    'ClusterRightButtonTop',\n    'ClusterFrontButtonTopLeft',\n    'ClusterFrontButtonTopRight',\n    'ClusterFrontButtonBottomLeft',\n    'ClusterFrontButtonBottomRight',\n    'ClusterCenterButtonLeft',\n    'ClusterCenterButtonRight',\n    'StickLeftButton',\n    'StickRightButton',\n    'ClusterLeftButtonTop',\n    'ClusterLeftButtonBottom',\n    'ClusterLeftButtonLeft',\n    'ClusterLeftButtonRight',\n    'ClusterCenterButtonCenter'\n];\n\n/**\n * The threshold of the gampead axes.\n * @type {number}\n * @constant\n * @private\n */\nconst $THRESHOLDGAMEPADAXES = 0.5;\n\n/**\n * Creates gamepad extensions.\n *\n * @example\n *\n * ExtensionGamepad.activate();\n */\nclass ExtensionGamepad {\n\n    /**\n     * Stores the activated status.\n     * @type {boolean}\n     * @private\n     * @static\n     */\n    static $activated = false;\n\n    /**\n     * Stores the index of the last connected gamepad.\n     * @type {number}\n     * @private\n     */\n    $indexLastConnected;\n\n    /**\n     * Stores the gamepad state.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    $stateGamepad;\n\n    /**\n     * Stores the unloaded status.\n     * @type {boolean}\n     * @private\n     */\n    $unloaded;\n\n    /**\n     * Creates a new gamepad extension.\n     */\n    constructor() {\n\n        this.$stateGamepad = {};\n        this.$unloaded = false;\n\n        [...$GAMEPADBUTTONS, ...$GAMEPADAXES.flat()].forEach(($code) => {\n\n            this.$stateGamepad[$code] = false;\n        });\n\n        window.addEventListener('beforeunload', this.$onBeforeUnload.bind(this));\n\n        window.addEventListener('gamepadconnected', this.$onConnect.bind(this));\n        window.addEventListener('gamepaddisconnected', this.$onDisconnect.bind(this));\n\n        window.addEventListener('gamepadvibrate', this.$onVibrate.bind(this));\n\n        window.requestAnimationFrame(this.$update.bind(this));\n    }\n\n    /**\n     * Activates the extension.\n     * @public\n     * @static\n     */\n    static activate() {\n\n        if (ExtensionGamepad.$activated === true) {\n\n            return;\n        }\n\n        new ExtensionGamepad();\n\n        ExtensionGamepad.$activated = true;\n    }\n\n    /**\n     * Called when the scope is about to be unloaded.\n     * @private\n     */\n    $onBeforeUnload() {\n\n        this.$unloaded = true;\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (typeof gamepad === 'undefined') {\n\n            return;\n        }\n\n        if (typeof gamepad.vibrationActuator === 'undefined') {\n\n            return;\n        }\n\n        gamepad.vibrationActuator.reset();\n    }\n\n    /**\n     * Called when the gamepad is connected.\n     * @param {GamepadEvent} $event The native gamepad connected event.\n     * @private\n     */\n    $onConnect($event) {\n\n        if ($event.gamepad.mapping !== 'standard') {\n\n            return;\n        }\n\n        Object.entries(this.$stateGamepad).forEach(([$code, $activated]) => {\n\n            if ($activated === true) {\n\n                this.$stateGamepad[$code] = false;\n\n                window.dispatchEvent(new EventGamepadDigital('gamepadup', $code));\n            }\n        });\n\n        this.$indexLastConnected = $event.gamepad.index;\n\n        window.dispatchEvent(new EventGamepadDigital('gamepadconnect', 'Connected'));\n    }\n\n    /**\n     * Called when the gamepad is disconnected.\n     * @param {GamepadEvent} $event The native gamepad disconnected event.\n     * @private\n     */\n    $onDisconnect($event) {\n\n        if ($event.gamepad.index !== this.$indexLastConnected) {\n\n            return;\n        }\n\n        Object.entries(this.$stateGamepad).forEach(([$code, $activated]) => {\n\n            if ($activated === true) {\n\n                this.$stateGamepad[$code] = false;\n\n                window.dispatchEvent(new EventGamepadDigital('gamepadup', $code));\n            }\n        });\n\n        this.$indexLastConnected = undefined;\n\n        window.dispatchEvent(new EventGamepadDigital('gamepadconnect', 'Disconnected'));\n    }\n\n    /**\n     * Called when a gamepad vibration is needed.\n     * @param {Event} $event The gamepad vibrate event.\n     * @private\n     */\n    $onVibrate($event) {\n\n        if (this.$unloaded === true) {\n\n            return;\n        }\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (typeof gamepad === 'undefined') {\n\n            return;\n        }\n\n        if (typeof gamepad.vibrationActuator === 'undefined') {\n\n            return;\n        }\n\n        if ($event instanceof EventGamepadDigital\n        && $event.code === 'VibrateEnd') {\n\n            gamepad.vibrationActuator.reset();\n\n            return;\n        }\n\n        if ($event instanceof EventGamepad\n        && $event.code === 'VibrateStart') {\n\n            gamepad.vibrationActuator.playEffect('dual-rumble', {\n\n                startDelay: 0,\n                duration: $event.vibration.duration,\n                strongMagnitude: $event.vibration.intensityFrequencyLow,\n                weakMagnitude: $event.vibration.intensityFrequencyHigh\n            });\n\n            return;\n        }\n    }\n\n    /**\n     * Updates the state of the gamepad.\n     * @private\n     */\n    $update() {\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (gamepad instanceof Gamepad) {\n\n            $GAMEPADBUTTONS.forEach(($button, $index) => {\n\n                const button = gamepad.buttons[$index];\n\n                if (button.pressed === true) {\n\n                    if (this.$stateGamepad[$button] === false) {\n\n                        this.$stateGamepad[$button] = true;\n                    }\n\n                    window.dispatchEvent(new EventGamepadDigital('gamepaddown', $button));\n                    window.dispatchEvent(new EventGamepadAnalog('gamepadanalog', $button, button.value));\n                }\n\n                else {\n\n                    if (this.$stateGamepad[$button] === true) {\n\n                        this.$stateGamepad[$button] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', $button));\n                    }\n                }\n            });\n\n            gamepad.axes.forEach(($direction, $index) => {\n\n                const [axeMinimum, axeMaximum] = $GAMEPADAXES[$index];\n\n                if ($direction <= - $THRESHOLDGAMEPADAXES) {\n\n                    if (this.$stateGamepad[axeMaximum] === true) {\n\n                        this.$stateGamepad[axeMaximum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMaximum));\n                    }\n\n                    this.$stateGamepad[axeMinimum] = true;\n                    window.dispatchEvent(new EventGamepadDigital('gamepaddown', axeMinimum));\n                    window.dispatchEvent(new EventGamepadAnalog('gamepadanalog', axeMinimum, ($direction - (Math.sign($direction) * $THRESHOLDGAMEPADAXES)) / (1 - $THRESHOLDGAMEPADAXES)));\n                }\n\n                else if ($direction >= $THRESHOLDGAMEPADAXES) {\n\n                    if (this.$stateGamepad[axeMinimum] === true) {\n\n                        this.$stateGamepad[axeMinimum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMinimum));\n                    }\n\n                    this.$stateGamepad[axeMaximum] = true;\n                    window.dispatchEvent(new EventGamepadDigital('gamepaddown', axeMaximum));\n                    window.dispatchEvent(new EventGamepadAnalog('gamepadanalog', axeMaximum, ($direction - (Math.sign($direction) * $THRESHOLDGAMEPADAXES)) / (1 - $THRESHOLDGAMEPADAXES)));\n                }\n\n                else {\n\n                    if (this.$stateGamepad[axeMinimum] === true) {\n\n                        this.$stateGamepad[axeMinimum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMinimum));\n                    }\n\n                    if (this.$stateGamepad[axeMaximum] === true) {\n\n                        this.$stateGamepad[axeMaximum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMaximum));\n                    }\n                }\n            });\n        }\n\n        window.requestAnimationFrame(this.$update.bind(this));\n    }\n}\n\nexport {\n\n    ExtensionGamepad\n};\n\nexport default ExtensionGamepad;\n","import {Stage, System} from '../index.js';\n\n/**\n * Creates actor systems.\n *\n * @example\n *\n * const system = new SystemActor();\n * system.tick({$stage, $timetick});\n */\nclass SystemActor extends System {\n\n    /**\n     * Creates a new actor system.\n     */\n    constructor() {\n\n        super();\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage, $timetick}) {\n\n        $stage.actors.forEach(($actor) => {\n\n            $actor.onTick($timetick);\n        });\n    }\n}\n\nexport {\n\n    SystemActor\n};\n\nexport default SystemActor;\n","import {Sound, Stage, System, UTILS} from '../index.js';\n\n/**\n * Creates audio systems.\n *\n * @example\n *\n * const system = new SystemAudio();\n */\nclass SystemAudio extends System {\n\n    /**\n     * @typedef {Object} typedataaudio The audio data.\n     * @property {AudioBufferSourceNode} typeaudio.$audio The audio buffer source node.\n     * @property {GainNode} typeaudio.$gain The gain.\n     * @property {number} typeaudio.$startTime The start time of the audio in the audio context timeline.\n     * @private\n     */\n\n    /**\n     * Stores the safe delay before removing the audio context when the system terminates.\n     * @type {number}\n     * @public\n     * @readonly\n     * @static\n     */\n    static DELAYCONTEXTCLEARSAFE = 1000;\n\n    /**\n     * Stores the cache of the audio assets.\n     * @type {Map<string, AudioBuffer>}\n     * @private\n     */\n    $cache;\n\n    /**\n     * Stores the audio context.\n     * @type {AudioContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Stores the mapping between the playing sounds and their audio data.\n     * @type {Map<Sound, typedataaudio>}\n     * @private\n     */\n    $mappingSoundsPlaying;\n\n    /**\n     * Creates a new audio system.\n     */\n    constructor() {\n\n        super();\n    }\n\n    /**\n     * Creates the values for the fade out curve.\n     * @param {number} $volume The volume of the sound.\n     * @returns {Array<number>}\n     * @private\n     */\n    $createValuesCurveFadeOut($volume) {\n\n        return [\n\n            - 1 + $volume * 1,\n            - 1 + $volume * 0\n        ];\n    }\n\n    /**\n     * Loads the audio from the given audio file content.\n     * @param {Response} $content The audio file content.\n     * @returns {Promise<AudioBuffer>}\n     * @private\n     */\n    $loadAudio($content) {\n\n        const promise = new Promise(($resolve) => {\n\n            $content.arrayBuffer()\n            .then(($bufferArray) => (this.$context.decodeAudioData($bufferArray))\n            .then(($bufferAudio) => {\n\n                this.$cache.set($content.url, $bufferAudio);\n\n                $resolve($bufferAudio);\n            }));\n        });\n\n        return promise;\n    }\n\n    /**\n     * Prepares the audio from the given audio source.\n     * @param {string} $audio The audio source.\n     * @private\n     */\n    $prepareAudio($audio) {\n\n        if (this.$cache.has($audio) === true) {\n\n            return;\n        }\n\n        this.$cache.set($audio, undefined);\n\n        fetch($audio)\n        .then(($content) => (this.$loadAudio($content)));\n    }\n\n    /**\n     * Terminates the given sound.\n     * @param {Sound} $sound The sound to terminate.\n     * @private\n     */\n    $terminateSound($sound) {\n\n        const {$audio, $gain, $startTime} = this.$mappingSoundsPlaying.get($sound);\n\n        if ($sound.loop === false\n        && this.$context.currentTime > $startTime + Math.max(0, $audio.buffer.duration - ($sound.durationFadeOut / 1000))) {\n\n            return\n        }\n\n        $gain.gain.cancelScheduledValues(this.$context.currentTime);\n        $gain.gain.setValueCurveAtTime(\n\n            this.$createValuesCurveFadeOut($sound.volume),\n            this.$context.currentTime,\n            Math.min($audio.buffer.duration, $sound.durationFadeOut / 1000)\n        );\n\n        this.$mappingSoundsPlaying.delete($sound);\n\n        $audio.onended = () => {\n\n            $audio.disconnect();\n            $gain.disconnect();\n        };\n    }\n\n    /**\n     * Checks if the system has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        return this.$cache.has($asset) === true;\n    }\n\n    /**\n     * Loads the audio from the given audio file content.\n     * @param {Response} $content The audio file content.\n     * @returns {Promise<AudioBuffer>}\n     * @public\n     */\n    loadAudio($content) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        if (this.$cache.has($content.url) === true) {\n\n            const promise = new Promise(($resolve) => {\n\n                const audio = this.$cache.get($content.url);\n\n                $resolve(audio);\n            });\n\n            return promise;\n        }\n\n        this.$cache.set($content.url, undefined);\n\n        return this.$loadAudio($content);\n    }\n\n    /**\n     * Called when the system is being initiated.\n     * @public\n     */\n    onInitiate() {\n\n        this.$cache = new Map();\n        this.$context = new AudioContext();\n        this.$mappingSoundsPlaying = new Map();\n    }\n\n    /**\n     * Called when the system is being terminated.\n     * @returns {(void | Promise<void>)}\n     * @public\n     */\n    onTerminate() {\n\n        let delayFadeOut = 0;\n\n        Array.from(this.$mappingSoundsPlaying.keys()).forEach(($sound) => {\n\n            if ($sound.durationFadeOut > delayFadeOut) {\n\n                delayFadeOut = $sound.durationFadeOut;\n            }\n\n            this.$terminateSound($sound);\n        });\n\n        const promise = new Promise(($resolve) => {\n\n            window.setTimeout(() => {\n\n                this.$context.close()\n                .then(() => {\n\n                    this.$context = undefined;\n\n                    $resolve();\n                });\n\n            }, delayFadeOut + SystemAudio.DELAYCONTEXTCLEARSAFE);\n        });\n\n        return promise;\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage}) {\n\n        /**\n         * @type {Array<Sound>}\n         */\n        const previous = Array.from(this.$mappingSoundsPlaying.keys());\n\n        $stage.actors.forEach(($actor) => {\n\n            $actor.sounds.forEach(($sound) => {\n\n                if (this.$mappingSoundsPlaying.has($sound) === true) {\n\n                    UTILS.extract($sound, previous);\n\n                    return;\n                }\n\n                this.$prepareAudio($sound.audio);\n\n                if (typeof this.$cache.get($sound.audio) === 'undefined') {\n\n                    return;\n                }\n\n                const bufferAudio = this.$cache.get($sound.audio);\n\n                const audio = this.$context.createBufferSource();\n                audio.buffer = bufferAudio;\n                audio.connect(this.$context.destination);\n                audio.start(0);\n\n                const gain = this.$context.createGain();\n                gain.gain.value = $sound.volume - 1;\n                gain.connect(this.$context.destination);\n\n                audio.connect(gain);\n\n                this.$mappingSoundsPlaying.set($sound, {\n\n                    $audio: audio,\n                    $gain: gain,\n                    $startTime: this.$context.currentTime\n                });\n\n                if ($sound.loop === true) {\n\n                    audio.loop = true;\n\n                    return;\n                }\n\n                gain.gain.setValueCurveAtTime(\n\n                    this.$createValuesCurveFadeOut($sound.volume),\n                    this.$context.currentTime + Math.max(0, audio.buffer.duration - ($sound.durationFadeOut / 1000)),\n                    Math.min(audio.buffer.duration, $sound.durationFadeOut / 1000)\n                );\n\n                audio.onended = () => {\n\n                    audio.disconnect();\n                    gain.disconnect();\n\n                    this.$mappingSoundsPlaying.delete($sound);\n\n                    $actor.removeSound($sound);\n                    $actor.onSoundFinish($sound);\n                };\n            });\n        });\n\n        previous.forEach(($sound) => {\n\n            this.$terminateSound($sound);\n        });\n    }\n}\n\nexport {\n\n    SystemAudio\n};\n\nexport default SystemAudio;\n","import {AABB, Actor, COLLIDERTYPES, Stage, System, Vector2} from '../index.js';\n\n/**\n * Creates collision systems.\n *\n * @example\n *\n * const system = new SystemCollision();\n */\nclass SystemCollision extends System {\n\n    /**\n     * @typedef {Array<Actor>} typepairactor A pair of actors.\n     * @private\n     */\n\n    /**\n     * Stores the current collision pairs.\n     * @type {Array<typepairactor>}\n     * @private\n     */\n    $current;\n\n    /**\n     * Stores the previous collision pairs.\n     * @type {Array<typepairactor>}\n     * @private\n     */\n    $previous;\n\n    /**\n     * Creates a new collision system.\n     */\n    constructor() {\n\n        super();\n    }\n\n    /**\n     * Checks if a collision previously existed between two given actors.\n     * @param {Actor} $dynamic The first actor to check on.\n     * @param {Actor} $inert The second actor to check with.\n     * @returns {boolean}\n     * @private\n     */\n    $hasCollisionPrevious($dynamic, $inert) {\n\n        const result = this.$previous.find(([$dynamicPrevious, $inertPrevious]) => {\n\n            return $dynamic === $dynamicPrevious\n            && $inert === $inertPrevious;\n        });\n\n        return typeof result !== 'undefined';\n    }\n\n    /**\n     * Called when the system is being initiated.\n     * @public\n     */\n    onInitiate() {\n\n        this.$current = [];\n        this.$previous = [];\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage}) {\n\n        /**\n         * @typedef {Object} typepaircollision A pair of candidates for collision.\n         * @property {number} typepaircollision.$distance The manhattan distance between the two actors.\n         * @property {Actor} typepaircollision.$dynamic The first actor.\n         * @property {Actor} typepaircollision.$inert The second actor.\n         * @private\n         */\n\n        /**\n         * @type {Array<typepaircollision>}\n         */\n        const pairs = [];\n\n        /**\n         * @type {Array<Actor>}\n         */\n        const dynamics = [];\n\n        /**\n         * @type {Array<Actor>}\n         */\n        const kinetics = [];\n\n        /**\n         * @type {Array<Actor>}\n         */\n        const statics = [];\n\n        $stage.actors.forEach(($actor) => {\n\n            if ($actor.hasCollider() === false) {\n\n                return;\n            }\n\n            switch ($actor.collider.type) {\n\n                case COLLIDERTYPES.DYNAMIC: {\n\n                    dynamics.push($actor);\n\n                    break;\n                }\n\n                case COLLIDERTYPES.KINETIC: {\n\n                    kinetics.push($actor);\n\n                    break;\n                }\n\n                case COLLIDERTYPES.STATIC: {\n\n                    statics.push($actor);\n\n                    break;\n                }\n            }\n        });\n\n        const inerts = [...statics, ...kinetics];\n\n        if (inerts.length === 0) {\n\n            return;\n        }\n\n        dynamics.forEach(($dynamic) => {\n\n            const boundariesDynamic = $dynamic.collider.boundaries.clone().translate($dynamic.translation);\n            const centerBoundariesDynamic = new AABB(boundariesDynamic.center, boundariesDynamic.center);\n\n            inerts.forEach(($inert) => {\n\n                const boundariesInert = $inert.collider.boundaries.clone().translate($inert.translation);\n\n                const distance = AABB.distanceManhattan(centerBoundariesDynamic, boundariesInert);\n\n                pairs.push({\n\n                    $distance: distance,\n                    $dynamic: $dynamic,\n                    $inert: $inert\n                });\n            });\n        });\n\n        pairs.sort(($a, $b) => {\n\n            return $a.$distance - $b.$distance;\n        });\n\n        pairs.forEach(($pair) => {\n\n            const {$dynamic, $inert} = $pair;\n\n            if ($stage.hasActor($dynamic) === false) {\n\n                return;\n            }\n\n            if ($stage.hasActor($inert) === false) {\n\n                return;\n            }\n\n            const boundariesDynamic = $dynamic.collider.boundaries.clone().translate($dynamic.translation);\n            const boundariesInert = $inert.collider.boundaries.clone().translate($inert.translation);\n\n            const overlapX = AABB.overlapX(boundariesDynamic, boundariesInert);\n\n            if (overlapX <= 0) {\n\n                return;\n            }\n\n            const overlapY = AABB.overlapY(boundariesDynamic, boundariesInert);\n\n            if (overlapY <= 0) {\n\n                return;\n            }\n\n            this.$current.push([$dynamic, $inert]);\n\n            const directionX = Math.sign($inert.translation.x - $dynamic.translation.x);\n            const directionY = Math.sign($inert.translation.y - $dynamic.translation.y);\n\n            const checkMinimumX = (overlapX <= overlapY);\n            const checkMinimumY = (overlapY <= overlapX);\n\n            if ($dynamic.collider.traversable === false\n            && $inert.collider.traversable === false) {\n\n                const resolverDynamic = new Vector2(\n\n                    checkMinimumX ? - directionX * overlapX : 0,\n                    checkMinimumY ? - directionY * overlapY : 0\n                );\n\n                $dynamic.translate(resolverDynamic);\n            }\n\n            const originDynamicEast = checkMinimumX === true && directionX === 1;\n            const originDynamicNorth = checkMinimumY === true && directionY === 1;\n            const originDynamicSouth = checkMinimumY === true && directionY === -1;\n            const originDynamicWest = checkMinimumX === true && directionX === -1;\n\n            if (this.$hasCollisionPrevious($dynamic, $inert) === false) {\n\n                $dynamic.onCollideEnter({\n\n                    $actor: $inert,\n                    $east: originDynamicEast,\n                    $north: originDynamicNorth,\n                    $south: originDynamicSouth,\n                    $west: originDynamicWest\n                });\n\n                $inert.onCollideEnter({\n\n                    $actor: $dynamic,\n                    $east: originDynamicWest,\n                    $north: originDynamicSouth,\n                    $south: originDynamicNorth,\n                    $west: originDynamicEast\n                });\n            }\n\n            $dynamic.onCollide({\n\n                $actor: $inert,\n                $east: originDynamicEast,\n                $north: originDynamicNorth,\n                $south: originDynamicSouth,\n                $west: originDynamicWest\n            });\n\n            $inert.onCollide({\n\n                $actor: $dynamic,\n                $east: originDynamicWest,\n                $north: originDynamicSouth,\n                $south: originDynamicNorth,\n                $west: originDynamicEast\n            });\n        });\n\n        this.$previous.filter(([$dynamicPrevious, $inertPrevious]) => {\n\n            const result = this.$current.find(([$dynamic, $inert]) => {\n\n                return $dynamic === $dynamicPrevious\n                && $inert === $inertPrevious;\n            });\n\n            return typeof result === 'undefined';\n\n        }).forEach(([$dynamicPrevious, $inertPrevious]) => {\n\n            $dynamicPrevious.onCollideLeave($inertPrevious);\n            $inertPrevious.onCollideLeave($dynamicPrevious);\n        });\n\n        this.$previous = [...this.$current];\n        this.$current = [];\n    }\n}\n\nexport {\n\n    SystemCollision\n};\n\nexport default SystemCollision;\n","import {EventGamepadAnalog, EventGamepadDigital, Stage, System} from '../index.js';\n\n/**\n * Creates input systems.\n *\n * @example\n *\n * const system = new SystemInput({$container});\n * system.initiate();\n * system.tick();\n */\nclass SystemInput extends System {\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the input events.\n     * @type {Array<Event>}\n     * @private\n     */\n    $events;\n\n    /**\n     * Stores the state of the accepted inputs.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    $inputs;\n\n    /**\n     * Stores the state of the accepted analog inputs.\n     * @type {Object<string, number>}\n     * @private\n     */\n    $inputsAnalog;\n\n    /**\n     * Creates a new input system.\n     * @param {Object} $parameters The given parameters.\n     * @param {HTMLElement} $parameters.$container The container on which to attach input events.\n     */\n    constructor({$container}) {\n\n        super();\n\n        this.$container = $container;\n    }\n\n    /**\n     * Stacks the input events for the next tick.\n     * @param {Event} $event The input event to stack.\n     * @private\n     */\n    $stack($event) {\n\n        $event.preventDefault();\n\n        this.$events.push($event);\n    }\n\n    /**\n     * Gets the current input state value of the given digital input.\n     * @param {string} $input The event code of the given digital input.\n     * @returns {boolean}\n     * @public\n     */\n    getInput($input) {\n\n        const input = this.$inputs[$input];\n\n        if (typeof input === 'undefined') {\n\n            return false;\n        }\n\n        return input;\n    }\n\n    /**\n     * Gets the current input state value of the given analog input.\n     * @param {string} $input The event code of the given analog input.\n     * @returns {number}\n     * @public\n     */\n    getInputAnalog($input) {\n\n        const input = this.$inputsAnalog[$input];\n\n        if (typeof input === 'undefined') {\n\n            return 0;\n        }\n\n        return input;\n    }\n\n    /**\n     * Called when the system is being initiated.\n     * @public\n     */\n    onInitiate() {\n\n        this.$events = [];\n        this.$inputs = {};\n        this.$inputsAnalog = {};\n\n        window.addEventListener('blur', this.$stack.bind(this));\n\n        window.addEventListener('contextmenu', this.$stack.bind(this));\n\n        window.addEventListener('gamepadanalog', this.$stack.bind(this));\n        window.addEventListener('gamepadconnect', this.$stack.bind(this));\n        window.addEventListener('gamepaddown', this.$stack.bind(this));\n        window.addEventListener('gamepadup', this.$stack.bind(this));\n\n        this.$container.addEventListener('keydown', this.$stack.bind(this));\n        this.$container.addEventListener('keyup', this.$stack.bind(this));\n    }\n\n    /**\n     * Called when the system is being terminated.\n     * @returns {(void | Promise<void>)}\n     * @public\n     */\n    onTerminate() {\n\n        window.removeEventListener('blur', this.$stack.bind(this));\n\n        window.removeEventListener('contextmenu', this.$stack.bind(this));\n\n        window.removeEventListener('gamepadanalog', this.$stack.bind(this));\n        window.removeEventListener('gamepadconnect', this.$stack.bind(this));\n        window.removeEventListener('gamepaddown', this.$stack.bind(this));\n        window.removeEventListener('gamepadup', this.$stack.bind(this));\n\n        this.$container.removeEventListener('keydown', this.$stack.bind(this));\n        this.$container.removeEventListener('keyup', this.$stack.bind(this));\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick() {\n\n        while (this.$events.length > 0) {\n\n            const $event = this.$events.shift();\n\n            if ($event.type === 'blur') {\n\n                this.$inputs = {};\n                this.$inputsAnalog = {};\n            }\n\n            else if ($event instanceof EventGamepadAnalog\n            && $event.type === 'gamepadanalog') {\n\n                this.$inputsAnalog[$event.code] = $event.value;\n            }\n\n            else if ($event instanceof EventGamepadDigital\n            && $event.type === 'gamepaddown') {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof EventGamepadDigital\n            && $event.type === 'gamepadup') {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n\n            else if ($event instanceof KeyboardEvent\n            && $event.type === 'keydown') {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof KeyboardEvent\n            && $event.type === 'keyup') {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n        }\n    }\n}\n\nexport {\n\n    SystemInput\n};\n\nexport default SystemInput;\n","import {Shader, Sprite, Stage, System, Vector2, Vector3} from '../index.js';\n\n/**\n * Creates render systems.\n *\n * @example\n *\n * const system = new SystemRender({$color, $container, $resolution});\n * system.initiate();\n * system.tick($stage);\n */\nclass SystemRender extends System {\n\n    /**\n     * Stores the texture unit for the textures to preload.\n     * @type {0}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNITTEXTURE0 = 0;\n\n    /**\n     * Stores the texture unit for the color textures.\n     * @type {1}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNITTEXTURE1 = 1;\n\n    /**\n     * Stores the texture unit for the opacity textures.\n     * @type {2}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNITTEXTURE2 = 2;\n\n    /**\n     * Stores the common vertices positions of the sprites.\n     * @type {WebGLBuffer}\n     * @private\n     */\n    $bufferPosition;\n\n    /**\n     * Stores the cache of the texture assets.\n     * @type {Map<string, WebGLTexture>}\n     * @private\n     */\n    $cache;\n\n    /**\n     * Stores the canvas element.\n     * @type {HTMLCanvasElement}\n     * @private\n     */\n    $canvas;\n\n    /**\n     * Stores the background color.\n     * @type {Vector3}\n     * @private\n     */\n    $color;\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the canvas context.\n     * @type {WebGL2RenderingContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Stores the number of indices of the vertices positions of the sprites.\n     * @type {number}\n     * @private\n     */\n    $indices;\n\n    /**\n     * Stores the shader program attribute locations.\n     * @type {Object<string, number>}\n     * @private\n     */\n    $locationsAttribute;\n\n    /**\n     * Stores the shader program uniform locations.\n     * @type {Object<string, WebGLUniformLocation>}\n     * @private\n     */\n    $locationsUniform;\n\n    /**\n     * Stores the mapping between the texture sources and their uvmappings.\n     * @type {Object<string, WebGLBuffer>}\n     * @private\n     */\n    $mappingBuffersUv;\n\n    /**\n     * Stores the shader program.\n     * @type {WebGLProgram}\n     * @private\n     */\n    $program;\n\n    /**\n     * Stores the ResizeObserver.\n     * @type {ResizeObserver}\n     * @private\n     */\n    $resizeOberver;\n\n    /**\n     * Stores the resolution.\n     * @type {Vector2}\n     * @private\n     */\n    $resolution;\n\n    /**\n     * Stores the fragment shader.\n     * @type {WebGLShader}\n     * @private\n     */\n    $shaderFragment;\n\n    /**\n     * Stores the vertex shader.\n     * @type {WebGLShader}\n     * @private\n     */\n    $shaderVertex;\n\n    /**\n     * Stores the texture of the default color texture source.\n     * @type {WebGLTexture}\n     * @private\n     */\n    $textureColorDefault;\n\n    /**\n     * Stores the texture of the default opacity texture source.\n     * @type {WebGLTexture}\n     * @private\n     */\n    $textureOpacityDefault;\n\n    /**\n     * Creates a new render system.\n     * @param {Object} $parameters The given parameters.\n     * @param {Vector3} [$parameters.$color] The rendering background color to use.\n     * @param {HTMLElement} $parameters.$container The container on which to attach the canvas.\n     * @param {Vector2} $parameters.$resolution The rendering resolution to use.\n     */\n    constructor({$color = new Vector3(0, 0, 0), $container, $resolution}) {\n\n        super();\n\n        this.$color = $color;\n        this.$container = $container;\n        this.$resolution = $resolution;\n    }\n\n    /**\n     * Creates the common vertices positions of the sprites.\n     * @private\n     */\n    $createBufferPositions() {\n\n        const positions = [\n\n            -0.5, -0.5,\n            -0.5, 0.5,\n            0.5, 0.5,\n            0.5, -0.5\n        ];\n\n        const bufferPosition = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ARRAY_BUFFER, bufferPosition);\n        this.$context.bufferData(this.$context.ARRAY_BUFFER, new Float32Array(positions), this.$context.STATIC_DRAW);\n\n        this.$bufferPosition = bufferPosition;\n    }\n\n    /**\n     * Creates the uvmapping from the given sprite.\n     * @param {Sprite} $sprite The sprite.\n     * @private\n     */\n    $createBufferUvsOnce($sprite) {\n\n        if (typeof this.$mappingBuffersUv[$sprite.frameSourceSerialized] !== 'undefined') {\n\n            return;\n        }\n\n        const frame = $sprite.frameSource;\n\n        const uvs = [\n\n            frame.minimum.x, frame.maximum.y,\n            frame.minimum.x, frame.minimum.y,\n            frame.maximum.x, frame.minimum.y,\n            frame.maximum.x, frame.maximum.y\n        ];\n\n        const bufferUv = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ARRAY_BUFFER, bufferUv);\n        this.$context.bufferData(this.$context.ARRAY_BUFFER, new Float32Array(uvs), this.$context.STATIC_DRAW);\n\n        this.$mappingBuffersUv[$sprite.frameSourceSerialized] = bufferUv;\n    }\n\n    /**\n     * Creates the indices of the vertices positions of the sprites.\n     * @private\n     */\n    $createIndices() {\n\n        const indices = [\n\n            0,\n            1,\n            2,\n            3\n        ];\n\n        const bufferIndex = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ELEMENT_ARRAY_BUFFER, bufferIndex);\n        this.$context.bufferData(this.$context.ELEMENT_ARRAY_BUFFER, new Uint32Array(indices), this.$context.STATIC_DRAW);\n\n        this.$indices = indices.length;\n    }\n\n    /**\n     * Creates the attributes locations to use by the shader program.\n     * @param {WebGLProgram} $program The shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createLocationsAttribute($program, $shader) {\n\n        Object.keys($shader.attributes).forEach(($name) => {\n\n            this.$locationsAttribute[$name] = this.$context.getAttribLocation($program, $name);\n        });\n    }\n\n    /**\n     * Creates the uniform locations to use by the shader program.\n     * @param {WebGLProgram} $program The shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createLocationsUniform($program, $shader) {\n\n        Object.keys($shader.uniforms).forEach(($name) => {\n\n            this.$locationsUniform[$name] = this.$context.getUniformLocation($program, $name);\n        });\n    }\n\n    /**\n     * Creates the shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createProgram($shader) {\n\n        this.$shaderVertex = this.$context.createShader(this.$context.VERTEX_SHADER);\n        this.$context.shaderSource(this.$shaderVertex, $shader.sourceVertex);\n        this.$context.compileShader(this.$shaderVertex);\n\n        this.$shaderFragment = this.$context.createShader(this.$context.FRAGMENT_SHADER);\n        this.$context.shaderSource(this.$shaderFragment, $shader.sourceFragment);\n        this.$context.compileShader(this.$shaderFragment);\n\n        this.$program = this.$context.createProgram();\n        this.$context.attachShader(this.$program, this.$shaderVertex);\n        this.$context.attachShader(this.$program, this.$shaderFragment);\n        this.$context.linkProgram(this.$program);\n    }\n\n    /**\n     * Creates a texture from the given bitmap texture data.\n     * @param {ImageBitmap} $textureBitmap The bitmap texture data.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {WebGLTexture}\n     * @private\n     */\n    $createTexture($textureBitmap, $unitTexture) {\n\n        const texture = this.$context.createTexture();\n\n        this.$context.activeTexture($unitTexture);\n        this.$context.bindTexture(this.$context.TEXTURE_2D, texture);\n\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_MIN_FILTER, this.$context.NEAREST);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_MAG_FILTER, this.$context.NEAREST);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_WRAP_S, this.$context.CLAMP_TO_EDGE);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_WRAP_T, this.$context.CLAMP_TO_EDGE);\n\n        this.$context.texImage2D(this.$context.TEXTURE_2D, 0, this.$context.RGBA, this.$context.RGBA, this.$context.UNSIGNED_BYTE, $textureBitmap);\n\n        return texture;\n    }\n\n    /**\n     * Creates a default texture (1 pixel texture).\n     * @param {Vector3} $color The target texture unit.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {WebGLTexture}\n     * @private\n     */\n    $createTextureDefault($color, $unitTexture) {\n\n        const texture = this.$context.createTexture();\n\n        this.$context.activeTexture(this.$context.TEXTURE0 + $unitTexture);\n        this.$context.bindTexture(this.$context.TEXTURE_2D, texture);\n        this.$context.texImage2D(this.$context.TEXTURE_2D, 0, this.$context.RGBA, 1, 1, 0, this.$context.RGBA, this.$context.UNSIGNED_BYTE, new Uint8Array([$color.x, $color.y, $color.z, 255]));\n\n        return texture;\n    }\n\n    /**\n     * Initiates the canvas element.\n     * @private\n     */\n    $initiateCanvas() {\n\n        this.$canvas = document.createElement('canvas');\n        this.$canvas.style.width = '100%';\n        this.$canvas.style.height = '100%';\n        this.$canvas.style.display = 'block';\n        this.$canvas.style.outline = '0';\n        this.$canvas.style.imageRendering = 'pixelated';\n\n        this.$container.appendChild(this.$canvas);\n\n        this.$resize();\n    }\n\n    /**\n     * Initiates the canvas context.\n     * @private\n     */\n    $initiateContext() {\n\n        this.$context = this.$canvas.getContext('webgl2', {\n\n            'antialias': false\n        });\n\n        this.$context.frontFace(this.$context.CW);\n        this.$context.enable(this.$context.CULL_FACE);\n        this.$context.cullFace(this.$context.BACK);\n\n        this.$context.enable(this.$context.BLEND);\n        this.$context.blendFunc(this.$context.SRC_ALPHA, this.$context.ONE_MINUS_SRC_ALPHA);\n\n        this.$createProgram(Shader);\n\n        this.$context.useProgram(this.$program);\n\n        this.$createLocationsUniform(this.$program, Shader);\n        this.$createLocationsAttribute(this.$program, Shader);\n\n        this.$createBufferPositions();\n        this.$createIndices();\n\n        this.$textureColorDefault = this.$createTextureDefault(new Vector3(127, 127, 127), SystemRender.UNITTEXTURE1);\n        this.$textureOpacityDefault = this.$createTextureDefault(new Vector3(255, 255, 255), SystemRender.UNITTEXTURE2);\n\n        window.addEventListener('beforeunload', this.$onBeforeUnload.bind(this));\n    }\n\n    /**\n     * Loads the texture from the given texture file content.\n     * @param {Response} $content The texture file content.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {Promise<WebGLTexture>}\n     * @private\n     */\n    $loadTexture($content, $unitTexture) {\n\n        const promise = new Promise(($resolve) => {\n\n            $content.blob()\n            .then(($blob) => (createImageBitmap($blob)))\n            .then(($textureBitmap) => {\n\n                const texture = this.$createTexture($textureBitmap, $unitTexture);\n\n                this.$cache.set($content.url, texture);\n\n                $resolve(texture);\n            });\n        });\n\n        return promise;\n    }\n\n    /**\n     * Called when the scope is about to be unloaded.\n     * @private\n     */\n    $onBeforeUnload() {\n\n        if (this.$context instanceof WebGL2RenderingContext === false) {\n\n            return;\n        }\n\n        if (this.$context.getExtension('WEBGL_lose_context') === null) {\n\n            return;\n        }\n\n        this.$context.getExtension('WEBGL_lose_context').loseContext();\n    }\n\n    /**\n     * Prepares the texture from the given texture source.\n     * @param {string} $texture The texture source.\n     * @param {number} $unitTexture The target texture unit.\n     * @private\n     */\n    $prepareTexture($texture, $unitTexture) {\n\n        if (this.$cache.has($texture) === true) {\n\n            return;\n        }\n\n        this.$cache.set($texture, undefined);\n\n        fetch($texture)\n        .then(($content) => (this.$loadTexture($content, $unitTexture)));\n    }\n\n    /**\n     * Resets the canvas.\n     * @param {number} $width The context viewport width.\n     * @param {number} $height The context viewport height.\n     * @private\n     */\n    $resetCanvas($width, $height) {\n\n        this.$context.clearColor(this.$color.x, this.$color.y, this.$color.z, 1);\n        this.$context.clearDepth(1);\n\n        this.$context.viewport(0, 0, $width, $height);\n        this.$context.clear(this.$context.COLOR_BUFFER_BIT | this.$context.DEPTH_BUFFER_BIT);\n    }\n\n    /**\n     * Resizes the rendering context.\n     * @private\n     */\n    $resize() {\n\n        const width = this.$resolution.x;\n        const height = this.$resolution.y;\n\n        const widthContext = Math.max(width, Math.floor(height * this.$canvas.clientWidth / this.$canvas.clientHeight));\n        const heightContext = Math.max(height, Math.floor(width * this.$canvas.clientHeight / this.$canvas.clientWidth));\n\n        this.$canvas.setAttribute('width', '' + Math.floor(widthContext / 2) * 2);\n        this.$canvas.setAttribute('height', '' + Math.floor(heightContext / 2) * 2);\n    }\n\n    /**\n     * Sends an attribute to the shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @param {string} $name The name of the attribute.\n     * @param {any} $value The value of the attribute.\n     * @private\n     */\n    $sendAttribute($shader, $name, $value) {\n\n        if (typeof $shader.attributes[$name] === 'undefined') {\n\n            return;\n        }\n\n        const type = $shader.attributes[$name];\n\n        switch (type) {\n\n            case 'vec2': {\n\n                this.$context.bindBuffer(this.$context.ARRAY_BUFFER, $value);\n                const location = this.$locationsAttribute[$name];\n                this.$context.vertexAttribPointer(location, 2, this.$context.FLOAT, false, 0, 0);\n                this.$context.enableVertexAttribArray(location);\n\n                break;\n            }\n\n            case 'vec3': {\n\n                this.$context.bindBuffer(this.$context.ARRAY_BUFFER, $value);\n                const location = this.$locationsAttribute[$name];\n                this.$context.vertexAttribPointer(location, 3, this.$context.FLOAT, false, 0, 0);\n                this.$context.enableVertexAttribArray(location);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Sends a uniform to the shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @param {string} $name The name of the uniform.\n     * @param {any} $value The value of the uniform.\n     * @private\n     */\n    $sendUniform($shader, $name, $value) {\n\n        if (typeof $shader.uniforms[$name] === 'undefined') {\n\n            return;\n        }\n\n        const type = $shader.uniforms[$name];\n\n        switch (type) {\n\n            case 'bool':\n            case 'int':\n            case 'sampler2D': {\n\n                this.$context.uniform1i(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'bool[]':\n            case 'int[]': {\n\n                this.$context.uniform1iv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'float': {\n\n                this.$context.uniform1f(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'float[]': {\n\n                this.$context.uniform1fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'mat4':\n            case 'mat4[]': {\n\n                this.$context.uniformMatrix4fv(this.$locationsUniform[$name], false, $value);\n\n                break;\n            }\n\n            case 'vec2':\n            case 'vec2[]': {\n\n                this.$context.uniform2fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'vec3':\n            case 'vec3[]': {\n\n                this.$context.uniform3fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Terminates the canvas context.\n     * @private\n     */\n    $terminateContext() {\n\n        this.$context.deleteBuffer(this.$bufferPosition);\n\n        Object.values(this.$mappingBuffersUv).forEach(($buffer) => {\n\n            this.$context.deleteBuffer($buffer);\n        });\n\n        this.$context.deleteTexture(this.$textureColorDefault);\n        this.$context.deleteTexture(this.$textureOpacityDefault);\n\n        this.$cache.forEach(($texture) => {\n\n            this.$context.deleteTexture($texture);\n        });\n\n        this.$context.deleteShader(this.$shaderFragment);\n        this.$context.deleteShader(this.$shaderVertex);\n\n        this.$context.deleteProgram(this.$program);\n\n        this.$context = undefined;\n    }\n\n    /**\n     * Checks if the system has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        return this.$cache.has($asset) === true;\n    }\n\n    /**\n     * Loads the texture from the given texture file content.\n     * @param {Response} $content The texture file content.\n     * @returns {Promise<WebGLTexture>}\n     * @public\n     */\n    loadTexture($content) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        if (this.$cache.has($content.url) === true) {\n\n            const promise = new Promise(($resolve) => {\n\n                const texture = this.$cache.get($content.url);\n\n                $resolve(texture);\n            });\n\n            return promise;\n        }\n\n        this.$cache.set($content.url, undefined);\n\n        return this.$loadTexture($content, this.$context.TEXTURE0 + SystemRender.UNITTEXTURE0);\n    }\n\n    /**\n     * Called when the system is being initiated.\n     * @public\n     */\n    onInitiate() {\n\n        this.$cache = new Map();\n        this.$indices = 0;\n        this.$locationsAttribute = {};\n        this.$locationsUniform = {};\n        this.$mappingBuffersUv = {};\n\n        this.$initiateCanvas();\n        this.$initiateContext();\n\n        this.$resizeOberver = new ResizeObserver(this.$resize.bind(this));\n        this.$resizeOberver.observe(this.$container);\n    }\n\n    /**\n     * Called when the system is being terminated.\n     * @returns {(void | Promise<void>)}\n     * @public\n     */\n    onTerminate() {\n\n        this.$terminateContext();\n\n        this.$resizeOberver.disconnect();\n        this.$container.removeChild(this.$canvas);\n\n        window.removeEventListener('beforeunload', this.$onBeforeUnload.bind(this));\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage}) {\n\n        this.$resetCanvas(this.$canvas.width, this.$canvas.height);\n\n        this.$sendUniform(Shader, 'uniformAspect', [this.$canvas.width, this.$canvas.height]);\n        this.$sendUniform(Shader, 'uniformTranslationPointOfView', [Math.floor($stage.pointOfView.translation.x), Math.floor($stage.pointOfView.translation.y)]);\n\n        this.$sendAttribute(Shader, 'attributePosition', this.$bufferPosition);\n\n        const actors = [...$stage.actors];\n\n        actors.sort(($a, $b) => {\n\n            return $a.zIndex - $b.zIndex;\n        });\n\n        actors.forEach(($actor) => {\n\n            if ($actor.hasSprite() === false) {\n\n                return;\n            }\n\n            if ($actor.visible === false) {\n\n                return;\n            }\n\n            let textureColor = this.$textureColorDefault;\n\n            this.$prepareTexture($actor.sprite.textureColor, this.$context.TEXTURE0 + SystemRender.UNITTEXTURE1);\n\n            if (typeof this.$cache.get($actor.sprite.textureColor) !== 'undefined') {\n\n                textureColor = this.$cache.get($actor.sprite.textureColor);\n            }\n\n            this.$context.activeTexture(this.$context.TEXTURE0 + SystemRender.UNITTEXTURE1);\n            this.$context.bindTexture(this.$context.TEXTURE_2D, textureColor);\n            this.$sendUniform(Shader, 'uniformTextureColor', SystemRender.UNITTEXTURE1);\n\n            let textureOpacity = this.$textureOpacityDefault;\n\n            if (typeof $actor.sprite.textureOpacity !== 'undefined') {\n\n                this.$prepareTexture($actor.sprite.textureOpacity, this.$context.TEXTURE0 + SystemRender.UNITTEXTURE2);\n\n                if (typeof this.$cache.get($actor.sprite.textureOpacity) !== 'undefined') {\n\n                    textureOpacity = this.$cache.get($actor.sprite.textureOpacity);\n                }\n            }\n\n            this.$context.activeTexture(this.$context.TEXTURE0 + SystemRender.UNITTEXTURE2);\n            this.$context.bindTexture(this.$context.TEXTURE_2D, textureOpacity);\n            this.$sendUniform(Shader, 'uniformTextureOpacity', SystemRender.UNITTEXTURE2);\n\n            this.$sendUniform(Shader, 'uniformSize', [$actor.sprite.sizeTarget.x, $actor.sprite.sizeTarget.y]);\n            this.$sendUniform(Shader, 'uniformTranslation', [Math.floor($actor.translation.x), Math.floor($actor.translation.y)]);\n\n            this.$createBufferUvsOnce($actor.sprite);\n            this.$sendAttribute(Shader, 'attributeUvmapping', this.$mappingBuffersUv[$actor.sprite.frameSourceSerialized]);\n\n            this.$context.drawElements(this.$context.TRIANGLE_FAN, this.$indices, this.$context.UNSIGNED_INT, 0);\n        });\n    }\n\n    /**\n     * Sets the rendering background color.\n     * @param {Vector3} $color The rendering background color to set.\n     * @public\n     */\n    setColor($color) {\n\n        this.$color = $color;\n    }\n\n    /**\n     * Sets the rendering resolution.\n     * @param {Vector2} $resolution The rendering resolution to set.\n     * @public\n     */\n    setResolution($resolution) {\n\n        this.$resolution = $resolution.clone();\n\n        this.$resize();\n    }\n}\n\nexport {\n\n    SystemRender\n};\n\nexport default SystemRender;\n","import {EVENTCODES, EventGamepad, EventGamepadDigital, Stage, System, UTILS, Vibration} from '../index.js';\n\n/**\n * Creates vibration systems.\n *\n * @example\n *\n * const system = new SystemVibration();\n */\nclass SystemVibration extends System {\n\n    /**\n     * Stores the delay before a vibration ends.\n     * @type {number}\n     * @public\n     * @readonly\n     * @static\n     */\n    static DELAYVIBRATIONEND = 1000;\n\n    /**\n     * Stores the mapping between the playing vibrations and their elapsed time.\n     * @type {Map<Vibration, number>}\n     * @private\n     */\n    $mappingVibrationsPlaying;\n\n    /**\n     * Creates a new vibration system.\n     */\n    constructor() {\n\n        super();\n    }\n\n    /**\n     * Called when the system is being initiated.\n     * @public\n     */\n    onInitiate() {\n\n        this.$mappingVibrationsPlaying = new Map();\n    }\n\n    /**\n     * Called when the system is being terminated.\n     * @returns {(void | Promise<void>)}\n     * @public\n     */\n    onTerminate() {\n\n        window.dispatchEvent(new EventGamepadDigital('gamepadvibrate', EVENTCODES.GAMEPADXBOX.VIBRATEEND));\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage, $timetick}) {\n\n        /**\n         * @type {Array<Vibration>}\n         */\n        const previous = Array.from(this.$mappingVibrationsPlaying.keys());\n\n        $stage.actors.forEach(($actor) => {\n\n            /**\n             * @type {Array<Vibration>}\n             */\n            const finished = [];\n\n            $actor.vibrations.forEach(($vibration) => {\n\n                if (this.$mappingVibrationsPlaying.has($vibration) === false) {\n\n                    this.$mappingVibrationsPlaying.set($vibration, 0);\n\n                    return;\n                }\n\n                const elapsedTime = this.$mappingVibrationsPlaying.get($vibration) + $timetick;\n\n                if (elapsedTime >= $vibration.duration) {\n\n                    finished.push($vibration);\n\n                    return;\n                }\n\n                this.$mappingVibrationsPlaying.set($vibration, elapsedTime);\n\n                UTILS.extract($vibration, previous);\n            });\n\n            finished.forEach(($vibration) => {\n\n                $actor.removeVibration($vibration);\n            });\n        });\n\n        previous.forEach(($vibration) => {\n\n            this.$mappingVibrationsPlaying.delete($vibration);\n        });\n\n        /**\n         * @type {Array<Vibration>}\n         */\n        const current = Array.from(this.$mappingVibrationsPlaying.keys());\n\n        let intensityFrequencyHigh = 0;\n        let intensityFrequencyLow = 0;\n\n        current.forEach(($vibration) => {\n\n            intensityFrequencyHigh = Math.max(intensityFrequencyHigh, $vibration.intensityFrequencyHigh);\n            intensityFrequencyLow = Math.max(intensityFrequencyLow, $vibration.intensityFrequencyLow);\n        });\n\n        window.dispatchEvent(new EventGamepad('gamepadvibrate', EVENTCODES.GAMEPADXBOX.VIBRATESTART, new Vibration({\n\n            $duration: SystemVibration.DELAYVIBRATIONEND,\n            $intensityFrequencyHigh: intensityFrequencyHigh,\n            $intensityFrequencyLow: intensityFrequencyLow\n        })));\n    }\n}\n\nexport {\n\n    SystemVibration\n};\n\nexport default SystemVibration;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(864);\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","activate","engine","$container","document","body","initiate","preloadStage","createStage","ActorWithSpritesheet","$aseprite","$loop","$tag","$timeline","$createTimeline","sprites","getSprites","size","timecode","keyframes","Array","from","entries","map","$sprite","$duration","timelinekeyframe","$onEnter","this","setSprite","$timecode","push","seekTimecode","onCreate","onTick","$timetick","tick","PreloadableAseprite","static","textureColor","Aseprite","$sprites","$tags","$textureColor","constructor","$data","Map","frames","forEach","$frame","sprite","$frameSource","frame","x","meta","w","y","h","$sizeTarget","set","duration","frameTags","subset","slice","to","name","has","first","keys","get","ActorButtonContinue","$spritesheet","$animateSpritesheet","$animation","stage","removeActor","createActor","setVisible","visible","setZIndex","zIndex","translate","translation","actionActivate","actionDisable","actionFocus","actionRest","onBeforeRemove","onSetVisible","$visible","onSetZIndex","$zIndex","onTranslate","$translation","ActorButtonDlc","ActorButtonNewGame","ActorButtonQuit","ActorMenu","$buttonContinue","$buttonNewGame","$buttonDlc","$buttonQuit","$finiteStateMachineMenu","DEBOUNCENAVIGATION","checkCommandActivate","getInput","checkCommandNavigateUp","checkCommandNavigateDown","$state","$transitions","$condition","$timer","$previous","addSound","$audio","$volume","$onLeave","addVibration","$intensityFrequencyHigh","$intensityFrequencyLow","console","log","async","window","close","queueMicrotask","terminate","update","$vector","StageMenu","setColor","setResolution","DYNAMIC","KINETIC","STATIC","AUDIOMPEG","AUDIOWAVE","IMAGEJPEG","IMAGEPNG","A","START","UP","DOWN","LSUP","LSDOWN","VIBRATEEND","VIBRATESTART","ENTER","RADIANS","Math","PI","Preloadable","Actor","$collider","$components","$sounds","$stage","$uuid","$vibrations","collider","sounds","uuid","vibrations","super","Vector2","$sound","$vibration","getComponent","$name","hasCollider","Collider","hasComponent","hasOwnProperty","hasSprite","Sprite","onAfterRemove","onCollide","$actor","$east","$north","$south","$west","onCollideEnter","onCollideLeave","onSoundFinish","removeSound","removeSounds","removeVibration","removeVibrations","setCollider","setComponent","$component","clone","add","translateTo","subtract","Stage","$actors","$engine","$pointOfView","actors","pointOfView","actor","hasActor","indexOf","index","splice","removeActors","length","setPointOfView","AABB","$maximum","$minimum","center","minimum","halfSize","scale","maximum","distanceManhattan","$a","$b","distanceX","distanceY","max","abs","$aabb","overlapX","distanceCenter","overlapY","$boundaries","$traversable","$type","boundaries","traversable","type","Engine","$color","$next","$preloaded","$resolution","$systemActor","$systemAudio","$systemCollision","$systemInput","$systemRender","$systemVibration","container","Vector3","Loop","bind","Set","SystemActor","SystemAudio","SystemCollision","SystemInput","SystemRender","SystemVibration","$createStage","$input","getInputAnalog","hasAssetLoaded","$asset","$tickrateMinimum","promises","preloadables","promise","Promise","$resolve","fetch","then","$content","headers","loadTexture","$texture","loadAudio","$bufferAudio","undefined","all","ActorWithPreloadables","$preloadables","$preloadable","PreloadableSound","PreloadableTexture","StageWithPreloadables","FiniteStateMachine","$initiated","$states","$transition","previous","current","next","$handler","$identifier","$timePrevious","$scope","timeCurrent","performance","now","timetickCurrent","timetickMinimum","timetickSafe","min","requestAnimationFrame","cancelAnimationFrame","Shader","Sound","$durationFadeOut","audio","durationFadeOut","loop","volume","$frameSourceSerialized","$textureOpacity","frameSource","frameSourceSerialized","sizeTarget","textureOpacity","JSON","stringify","value","localStorage","getItem","parse","remove","removeItem","$value","setItem","System","onInitiate","onTerminate","terminated","Timeline","$keyframes","sort","seekName","result","find","$keyframe","onEnter","TimelineKeyframe","deduplicate","$array","extract","$item","ready","id","check","navigator","userActivation","hasBeenActive","sleep","$delay","setTimeout","crypto","randomUUID","$x","$y","equal","sqrt","multiply","negate","normalize","rotate","$angle","radians","cosine","cos","sine","sin","$factor","$z","z","$quaternion","xq","yq","zq","xu","yu","zu","xv","yv","zv","Vibration","intensityFrequencyHigh","intensityFrequencyLow","EventGamepad","Event","$code","code","vibration","EventGamepadAnalog","EventGamepadDigital","$GAMEPADAXES","$GAMEPADBUTTONS","ExtensionGamepad","$indexLastConnected","$stateGamepad","$unloaded","flat","addEventListener","$onBeforeUnload","$onConnect","$onDisconnect","$onVibrate","$update","$activated","gamepad","getGamepads","vibrationActuator","reset","$event","mapping","Object","dispatchEvent","playEffect","startDelay","strongMagnitude","weakMagnitude","Gamepad","$button","$index","button","buttons","pressed","axes","$direction","axeMinimum","axeMaximum","sign","$cache","$context","$mappingSoundsPlaying","$createValuesCurveFadeOut","$loadAudio","arrayBuffer","$bufferArray","decodeAudioData","url","$prepareAudio","$terminateSound","$gain","$startTime","currentTime","buffer","gain","cancelScheduledValues","setValueCurveAtTime","delete","onended","disconnect","AudioContext","delayFadeOut","DELAYCONTEXTCLEARSAFE","bufferAudio","createBufferSource","connect","destination","start","createGain","$current","$hasCollisionPrevious","$dynamic","$inert","$dynamicPrevious","$inertPrevious","pairs","dynamics","kinetics","statics","inerts","boundariesDynamic","centerBoundariesDynamic","boundariesInert","distance","$distance","$pair","directionX","directionY","checkMinimumX","checkMinimumY","resolverDynamic","originDynamicEast","originDynamicNorth","originDynamicSouth","originDynamicWest","filter","$events","$inputs","$inputsAnalog","$stack","preventDefault","input","removeEventListener","shift","KeyboardEvent","$bufferPosition","$canvas","$indices","$locationsAttribute","$locationsUniform","$mappingBuffersUv","$program","$resizeOberver","$shaderFragment","$shaderVertex","$textureColorDefault","$textureOpacityDefault","$createBufferPositions","bufferPosition","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","$createBufferUvsOnce","uvs","bufferUv","$createIndices","indices","bufferIndex","ELEMENT_ARRAY_BUFFER","Uint32Array","$createLocationsAttribute","$shader","attributes","getAttribLocation","$createLocationsUniform","uniforms","getUniformLocation","$createProgram","createShader","VERTEX_SHADER","shaderSource","sourceVertex","compileShader","FRAGMENT_SHADER","sourceFragment","createProgram","attachShader","linkProgram","$createTexture","$textureBitmap","$unitTexture","texture","createTexture","activeTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","RGBA","UNSIGNED_BYTE","$createTextureDefault","TEXTURE0","Uint8Array","$initiateCanvas","createElement","style","width","height","display","outline","imageRendering","appendChild","$resize","$initiateContext","getContext","frontFace","CW","enable","CULL_FACE","cullFace","BACK","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","useProgram","UNITTEXTURE1","UNITTEXTURE2","$loadTexture","blob","$blob","createImageBitmap","WebGL2RenderingContext","getExtension","loseContext","$prepareTexture","$resetCanvas","$width","$height","clearColor","clearDepth","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","widthContext","floor","clientWidth","clientHeight","heightContext","setAttribute","$sendAttribute","location","vertexAttribPointer","FLOAT","enableVertexAttribArray","$sendUniform","uniform1i","uniform1iv","uniform1f","uniform1fv","uniformMatrix4fv","uniform2fv","uniform3fv","$terminateContext","deleteBuffer","values","$buffer","deleteTexture","deleteShader","deleteProgram","UNITTEXTURE0","ResizeObserver","observe","removeChild","drawElements","TRIANGLE_FAN","UNSIGNED_INT","$mappingVibrationsPlaying","finished","elapsedTime","DELAYVIBRATIONEND","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","Symbol","queue","d","fn","r","a","hasAwait","currentDeps","outerResolve","reject","depQueues","resolve","rej","deps","dep","obj","e","ret","wrapDeps","getResult","fnQueue","q","err","definition","key","o","defineProperty","enumerable","g","globalThis","Function","prop","prototype","call","toStringTag","scriptUrl","importScripts","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","i","test","Error","replace","p"],"sourceRoot":""}