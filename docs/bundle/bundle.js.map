{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://@theatrejs/example-menu/webpack/runtime/async module","webpack://@theatrejs/example-menu/./sources/index.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/plugin-aseprite/sources/factories.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/plugin-aseprite/sources/aseprite.js","webpack://@theatrejs/example-menu/./sources/actors/button-continue/button-continue-64x16.aseprite","webpack://@theatrejs/example-menu/./sources/actors/button-continue/actor-button-continue.js","webpack://@theatrejs/example-menu/./sources/actors/button-dlc/button-dlc-64x16.aseprite","webpack://@theatrejs/example-menu/./sources/actors/button-dlc/actor-button-dlc.js","webpack://@theatrejs/example-menu/./sources/actors/button-new-game/button-new-game-64x16.aseprite","webpack://@theatrejs/example-menu/./sources/actors/button-new-game/actor-button-new-game.js","webpack://@theatrejs/example-menu/./sources/actors/button-quit/button-quit-64x16.aseprite","webpack://@theatrejs/example-menu/./sources/actors/button-quit/actor-button-quit.js","webpack://@theatrejs/example-menu/./sources/actors/actor-menu/navigation.mp3","webpack://@theatrejs/example-menu/./sources/actors/actor-menu/selection.mp3","webpack://@theatrejs/example-menu/./sources/actors/actor-menu/actor-menu.js","webpack://@theatrejs/example-menu/./sources/stages/stage-menu.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/collidertypes.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/contenttypes.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/gamepad.xbox.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertyeditors.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertynavigators.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/mathematics.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/preloadable.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/actor.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/stage.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/aabb.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/collider.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/engine.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/factories.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/finitestatemachine.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/loop.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/shader.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/sound.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/sprite.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/storage.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/timeline.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/timelinekeyframe.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/utils.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/vector2.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/vector3.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/vibration.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/events/gamepad.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/events/gamepadanalog.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/events/gamepaddigital.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/extensions/gamepad.extension.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/actor.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/audio.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/collision.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/input.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/render.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/vibration.system.js","webpack://@theatrejs/example-menu/webpack/bootstrap","webpack://@theatrejs/example-menu/webpack/runtime/define property getters","webpack://@theatrejs/example-menu/webpack/runtime/global","webpack://@theatrejs/example-menu/webpack/runtime/hasOwnProperty shorthand","webpack://@theatrejs/example-menu/webpack/runtime/make namespace object","webpack://@theatrejs/example-menu/webpack/runtime/publicPath","webpack://@theatrejs/example-menu/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","import {Engine, ExtensionGamepad, UTILS} from '@theatrejs/theatrejs';\n\nimport StageMenu from 'stages/stage-menu.js';\n\nExtensionGamepad.activate();\n\nconst engine = new Engine({$container: document.body});\nengine.initiate(60);\n\nawait engine.preloadStage(StageMenu);\nawait UTILS.frame();\nengine.createStage(StageMenu);\n","import {Preloadable} from '@theatrejs/theatrejs';\n\nimport {Aseprite} from './index.js';\n\n/**\n * @module FACTORIES\n */\n\n/**\n * Prepares a preloadable Aseprite module.\n * @param {Aseprite<string>} $aseprite The preloadable Aseprite module.\n * @returns {typeof Preloadable}\n *\n * @memberof module:FACTORIES\n */\nfunction PreloadableAseprite($aseprite) {\n\n    return class extends Preloadable {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = [$aseprite.textureColor];\n    };\n}\n\nexport {\n\n    PreloadableAseprite\n};\n","import {AABB, Actor, Sprite, Timeline, TimelineKeyframe, Vector2} from '@theatrejs/theatrejs';\n\n/**\n * Creates Aseprite module managers.\n * @template {string} T The generic type of the tags.\n *\n * @example\n *\n * const aseprite = new Aseprite(textureColor, data);\n * aseprite.createTimeline({actor, framerate, loop, tag});\n */\nclass Aseprite {\n\n    /**\n     * @template {string} T The generic type of the tags.\n     * @typedef {Object} typeaseprite An Aseprite JSON data.\n     * @property {Array<typeasepriteframe>} typeaseprite.frames The Aseprite JSON frames data.\n     * @property {typeasepritemeta<T>} typeaseprite.meta The Aseprite JSON meta data.\n     * @protected\n     *\n     * @memberof Aseprite\n     */\n\n    /**\n     * @typedef {Object} typeasepriteframe An Aseprite JSON frame data.\n     * @property {number} typeasepriteframe.duration The duration.\n     * @property {string} typeasepriteframe.filename The file name.\n     * @property {Object} typeasepriteframe.frame The frame.\n     * @property {number} typeasepriteframe.frame.x The x position of the frame.\n     * @property {number} typeasepriteframe.frame.y The y position of the frame.\n     * @property {number} typeasepriteframe.frame.w The width of the frame.\n     * @property {number} typeasepriteframe.frame.h The height of the frame.\n     * @property {boolean} typeasepriteframe.rotated The rotated status.\n     * @property {Object} typeasepriteframe.spriteSourceSize The sprite source size.\n     * @property {number} typeasepriteframe.spriteSourceSize.x The x position of the sprite source.\n     * @property {number} typeasepriteframe.spriteSourceSize.y The y position of the sprite source.\n     * @property {number} typeasepriteframe.spriteSourceSize.w The width of the sprite source.\n     * @property {number} typeasepriteframe.spriteSourceSize.h The height of the sprite source.\n     * @property {Object} typeasepriteframe.sourceSize The sprite size.\n     * @property {number} typeasepriteframe.sourceSize.w The width of the source.\n     * @property {number} typeasepriteframe.sourceSize.h The height of the source.\n     * @property {boolean} typeasepriteframe.trimmed The trimmed status.\n     * @protected\n     *\n     * @memberof Aseprite\n     */\n\n    /**\n     * @template {string} T The generic type of the tags.\n     * @typedef {Object} typeasepritemeta An Aseprite JSON meta data.\n     * @property {string} typeasepritemeta.app The app meta data.\n     * @property {string} typeasepritemeta.format The format meta data.\n     * @property {string} typeasepritemeta.image The image meta data.\n     * @property {string} typeasepritemeta.scale The scale meta data.\n     * @property {Object} typeasepritemeta.size The size meta data.\n     * @property {number} typeasepritemeta.size.w The size width meta data.\n     * @property {number} typeasepritemeta.size.h The size height meta data.\n     * @property {string} typeasepritemeta.version The version meta data.\n     * @property {Array<typeasepriteframetag<T>>} typeasepritemeta.frameTags The Aseprite JSON tags meta data.\n     * @protected\n     *\n     * @memberof Aseprite\n     */\n\n    /**\n     * @template {string} T The generic type of the tags.\n     * @typedef {Object} typeasepriteframetag An Aseprite JSON tag meta data.\n     * @property {T} typeasepriteframetag.name The name.\n     * @property {number} typeasepriteframetag.from The first frame.\n     * @property {number} typeasepriteframetag.to The last frame.\n     * @property {string} typeasepriteframetag.direction The animation direction.\n     * @property {string} typeasepriteframetag.color The color.\n     * @protected\n     *\n     * @memberof Aseprite\n     */\n\n    /**\n     * Stores the sprites.\n     * @type {Array<Sprite>}\n     * @private\n     */\n    $sprites;\n\n    /**\n     * Stores the sprites by tags.\n     * @type {Object.<T, Array<Sprite>>}\n     * @private\n     */\n    $tags;\n\n    /**\n     * Stores the color texture source.\n     * @type {string}\n     * @private\n     */\n    $textureColor;\n\n    /**\n     * Gets the color texture source.\n     * @type {string}\n     * @public\n     */\n    get textureColor() {\n\n        return this.$textureColor;\n    }\n\n    /**\n     * Creates a new Aseprite module manager.\n     * @param {string} $textureColor The color texture source.\n     * @param {typeaseprite<T>} $data The Aseprite JSON file.\n     */\n    constructor($textureColor, $data) {\n\n        this.$textureColor = $textureColor;\n\n        this.$sprites = $data.frames.map(($frame) => {\n\n            return new Sprite({\n\n                $frameSource: new AABB(\n\n                    new Vector2($frame.frame.x / $data.meta.size.w, $frame.frame.y / $data.meta.size.h),\n                    new Vector2(($frame.frame.x + $frame.frame.w) / $data.meta.size.w, ($frame.frame.y + $frame.frame.h) / $data.meta.size.h)\n                ),\n                $sizeTarget: new Vector2($frame.frame.w, $frame.frame.h),\n                $textureColor: $textureColor\n            });\n        });\n\n        this.$tags = {};\n\n        $data.meta.frameTags.forEach(($tag) => {\n\n            this.$tags[$tag.name] = this.$sprites.slice($tag.from, $tag.to + 1);\n        });\n    }\n\n    /**\n     * Creates a timeline for the given actor with the given tag.\n     * @param {Object} $parameters The given parameters.\n     * @param {Actor} $parameters.$actor The given actor.\n     * @param {number} [$parameters.$framerate] The number of timeline keyframes to show per second.\n     * @param {boolean} [$parameters.$loop] The loop status.\n     * @param {T} $parameters.$tag The given tag.\n     * @returns {Timeline}\n     * @public\n     */\n    createTimeline({$actor, $framerate = 8, $loop = false, $tag}) {\n\n        const $tags = this.getTag($tag);\n\n        if ($tags.length === 0) {\n\n            return new Timeline();\n        }\n\n        const keyframes = this.getTag($tag).map(($sprite, $index) => {\n\n            return new TimelineKeyframe({\n\n                $onEnter: () => {\n\n                    $actor.setSprite($sprite);\n                },\n                $timecode: $index * 1000 / $framerate\n            });\n        });\n\n        if ($loop === true) {\n\n            keyframes.push(new TimelineKeyframe({\n\n                $onEnter: ($timeline) => {\n\n                    $timeline.seekTimecode(0);\n                },\n                $timecode: keyframes.length * 1000 / $framerate\n            }));\n        }\n\n        return new Timeline(keyframes);\n    }\n\n    /**\n     * Gets the sprites for the given tag.\n     * @param {T} $tag The given tag.\n     * @returns {Array<Sprite>}\n     * @public\n     */\n    getTag($tag) {\n\n        const tagnames = Object.keys(this.$tags);\n\n        if (tagnames.length === 0) {\n\n            return [];\n        }\n\n        if (tagnames.indexOf($tag) === -1) {\n\n            return this.$tags[tagnames[0]];\n        }\n\n        return this.$tags[$tag];\n    }\n}\n\nexport {\n\n    Aseprite\n};\n\nexport default Aseprite;\n","import {Aseprite} from '@theatrejs/plugin-aseprite';import texture from './button-continue-64x16.png';import data from './button-continue-64x16.json';export default new Aseprite(texture, data);","import {FACTORIES} from '@theatrejs/theatrejs';\n\nimport * as PLUGINASEPRITE from '@theatrejs/plugin-aseprite';\n\nimport asepriteButtonContinue from './button-continue-64x16.aseprite';\n\nclass ActorButtonContinue extends FACTORIES.ActorWithPreloadables([PLUGINASEPRITE.FACTORIES.PreloadableAseprite(asepriteButtonContinue)]) {\n\n    /**\n     * Stores the spritesheet.\n     * @type {PLUGINASEPRITE.Aseprite<('activated' | 'disabled' | 'focus' | 'idle')>}\n     * @private\n     */\n    $spritesheet;\n\n    /**\n     * Stores the timeline.\n     * @type {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'activated'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'disabled'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'focus'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'idle'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$spritesheet = asepriteButtonContinue;\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport default ActorButtonContinue;\n","import {Aseprite} from '@theatrejs/plugin-aseprite';import texture from './button-dlc-64x16.png';import data from './button-dlc-64x16.json';export default new Aseprite(texture, data);","import {FACTORIES} from '@theatrejs/theatrejs';\n\nimport * as PLUGINASEPRITE from '@theatrejs/plugin-aseprite';\n\nimport asepriteButtonDlc from './button-dlc-64x16.aseprite';\n\nclass ActorButtonDlc extends FACTORIES.ActorWithPreloadables([PLUGINASEPRITE.FACTORIES.PreloadableAseprite(asepriteButtonDlc)]) {\n\n    /**\n     * Stores the spritesheet.\n     * @type {PLUGINASEPRITE.Aseprite<('activated' | 'disabled' | 'focus' | 'idle')>}\n     * @private\n     */\n    $spritesheet;\n\n    /**\n     * Stores the timeline.\n     * @type {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'activated'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'disabled'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'focus'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'idle'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$spritesheet = asepriteButtonDlc;\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport default ActorButtonDlc;\n","import {Aseprite} from '@theatrejs/plugin-aseprite';import texture from './button-new-game-64x16.png';import data from './button-new-game-64x16.json';export default new Aseprite(texture, data);","import {AABB, FACTORIES, Sprite, Timeline, TimelineKeyframe, Vector2} from '@theatrejs/theatrejs';\n\nimport * as PLUGINASEPRITE from '@theatrejs/plugin-aseprite';\n\nimport asepriteButtonNewGame from './button-new-game-64x16.aseprite';\n\nclass ActorButtonNewGame extends FACTORIES.ActorWithPreloadables([PLUGINASEPRITE.FACTORIES.PreloadableAseprite(asepriteButtonNewGame)]) {\n\n    /**\n     * Stores the spritesheet.\n     * @type {PLUGINASEPRITE.Aseprite<('activated' | 'disabled' | 'focus' | 'idle')>}\n     * @private\n     */\n    $spritesheet;\n\n    /**\n     * Stores the timeline.\n     * @type {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'activated'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'disabled'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'focus'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'idle'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$spritesheet = asepriteButtonNewGame;\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport default ActorButtonNewGame;\n","import {Aseprite} from '@theatrejs/plugin-aseprite';import texture from './button-quit-64x16.png';import data from './button-quit-64x16.json';export default new Aseprite(texture, data);","import {AABB, FACTORIES, Sprite, Timeline, TimelineKeyframe, Vector2} from '@theatrejs/theatrejs';\n\nimport * as PLUGINASEPRITE from '@theatrejs/plugin-aseprite';\n\nimport asepriteButtonQuit from './button-quit-64x16.aseprite';\n\nclass ActorButtonQuit extends FACTORIES.ActorWithPreloadables([PLUGINASEPRITE.FACTORIES.PreloadableAseprite(asepriteButtonQuit)]) {\n\n    /**\n     * Stores the spritesheet.\n     * @type {PLUGINASEPRITE.Aseprite<('activated' | 'disabled' | 'focus' | 'idle')>}\n     * @private\n     */\n    $spritesheet;\n\n    /**\n     * Stores the timeline.\n     * @type {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'activated'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'disabled'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'focus'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$timeline = this.$spritesheet.createTimeline({$actor: this, $framerate: 10, $loop: true, $tag: 'idle'});\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$spritesheet = asepriteButtonQuit;\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport default ActorButtonQuit;\n","export default __webpack_public_path__ + \"4378e9fa9e4ca0b2781ec67b69c8af0f.mp3\";","export default __webpack_public_path__ + \"f2651d13f4de25921433f7a8c179abd0.mp3\";","import {EVENTCODES, FACTORIES, FiniteStateMachine, Sound, STORAGE, Vector2, Vibration} from '@theatrejs/theatrejs';\n\nimport ActorButtonContinue from 'actors/button-continue/actor-button-continue.js';\nimport ActorButtonDlc from 'actors/button-dlc/actor-button-dlc.js';\nimport ActorButtonNewGame from 'actors/button-new-game/actor-button-new-game.js';\nimport ActorButtonQuit from 'actors/button-quit/actor-button-quit.js';\n\nimport soundNavigation from './navigation.mp3';\nimport soundSelection from './selection.mp3';\n\nclass ActorMenu extends FACTORIES.ActorWithPreloadables([\n\n    ActorButtonContinue,\n    ActorButtonDlc,\n    ActorButtonNewGame,\n    ActorButtonQuit,\n    FACTORIES.PreloadableSound(soundNavigation),\n    FACTORIES.PreloadableSound(soundSelection)\n]) {\n\n    /**\n     * Stores the finite state machine.\n     * @type {import('@theatrejs/theatrejs').FiniteStateMachine<('INITIATE' | 'CONTINUESELECTED' | 'CONTINUEACTIVATED' | 'NEWGAMESELECTED' | 'NEWGAMEACTIVATED' | 'QUITSELECTED' | 'QUITACTIVATED')>}\n     * @private\n     */\n    $finiteStateMachineMenu;\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onBeforeRemove']}\n     */\n    onBeforeRemove() {\n\n        this.followers.forEach(($follower) => {\n\n            this.stage.removeActor($follower);\n        });\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        const DEBOUNCEINITIATE = 800;\n        const DEBOUNCENAVIGATION = 200;\n        const DEBOUNCESELECTION = 800;\n\n        const buttonContinue = /** @type {ActorButtonContinue} */(this.stage.createActor(ActorButtonContinue)).translate(new Vector2(0, 24 * 1.5));\n        const buttonNewGame = /** @type {ActorButtonNewGame} */(this.stage.createActor(ActorButtonNewGame)).translate(new Vector2(0, 24 * 0.5));\n        const buttonDlc = /** @type {ActorButtonDlc} */(this.stage.createActor(ActorButtonDlc)).translate(new Vector2(0, -24 * 0.5));\n        const buttonQuit = /** @type {ActorButtonQuit} */(this.stage.createActor(ActorButtonQuit)).translate(new Vector2(0, -24 * 1.5));\n\n        if (STORAGE.get('continue') !== true) {\n\n            buttonContinue.actionDisable();\n        }\n\n        buttonDlc.actionDisable();\n\n        this.addFollower(buttonContinue);\n        this.addFollower(buttonNewGame);\n        this.addFollower(buttonDlc);\n        this.addFollower(buttonQuit);\n\n        const checkCommandActivate = () => {\n\n            return this.engine.getInput(EVENTCODES.KEYBOARDAZERTY.ENTER)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.A)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.START);\n        };\n\n        const checkCommandNavigateUp = () => {\n\n            return this.engine.getInput(EVENTCODES.KEYBOARDAZERTY.UP)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.UP)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.LSUP);\n        };\n\n        const checkCommandNavigateDown = () => {\n\n            return this.engine.getInput(EVENTCODES.KEYBOARDAZERTY.DOWN)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.DOWN)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.LSDOWN);\n        };\n\n        this.$finiteStateMachineMenu = new FiniteStateMachine([\n\n            {\n                $state: 'INITIATE',\n                $transitions: [\n\n                    {\n                        $state: 'CONTINUESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCEINITIATE && STORAGE.get('continue') === true\n                    },\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCEINITIATE && STORAGE.get('continue') !== true\n                    }\n                ]\n            },\n            {\n                $state: 'CONTINUESELECTED',\n                $onEnter: ({$previous}) => {\n\n                    buttonContinue.actionFocus();\n\n                    if ($previous === 'INITIATE') {\n\n                        return;\n                    }\n\n                    if ($previous === 'CONTINUEACTIVATED') {\n\n                        return;\n                    }\n\n                    this.addSound(new Sound({\n\n                        $audio: soundNavigation,\n                        $volume: 0.5\n                    }));\n                },\n                $onLeave: () => buttonContinue.actionRest(),\n                $transitions: [\n\n                    {\n                        $state: 'CONTINUEACTIVATED',\n                        $condition: () => checkCommandActivate() === true\n                    },\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCENAVIGATION && checkCommandNavigateDown() === true && checkCommandNavigateUp() === false && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'CONTINUEACTIVATED',\n                $onEnter: () => {\n\n                    buttonContinue.actionActivate();\n\n                    this.addSound(new Sound({\n\n                        $audio: soundSelection,\n                        $volume: 0.5\n                    }));\n\n                    this.addVibration(new Vibration({\n\n                        $duration: 100,\n                        $intensityFrequencyHigh: 1,\n                        $intensityFrequencyLow: 0\n                    }));\n                },\n                $onLeave: () => {\n\n                    buttonContinue.actionRest();\n\n                    console.log('Continue');\n                },\n                $transitions: [\n\n                    {\n                        $state: 'CONTINUESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCESELECTION && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'NEWGAMESELECTED',\n                $onEnter: ({$previous}) => {\n\n                    buttonNewGame.actionFocus();\n\n                    if ($previous === 'INITIATE') {\n\n                        return;\n                    }\n\n                    if ($previous === 'NEWGAMEACTIVATED') {\n\n                        return;\n                    }\n\n                    this.addSound(new Sound({\n\n                        $audio: soundNavigation,\n                        $volume: 0.5\n                    }));\n                },\n                $onLeave: () => buttonNewGame.actionRest(),\n                $transitions: [\n\n                    {\n                        $state: 'NEWGAMEACTIVATED',\n                        $condition: () => checkCommandActivate() === true\n                    },\n                    {\n                        $state: 'CONTINUESELECTED',\n                        $condition: ({$timer}) => STORAGE.get('continue') === true && $timer >= DEBOUNCENAVIGATION && checkCommandNavigateUp() === true && checkCommandNavigateDown() === false && checkCommandActivate() === false\n                    },\n                    {\n                        $state: 'QUITSELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCENAVIGATION && checkCommandNavigateDown() === true && checkCommandNavigateUp() === false && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'NEWGAMEACTIVATED',\n                $onEnter: () => {\n\n                    buttonNewGame.actionActivate();\n\n                    this.addSound(new Sound({\n\n                        $audio: soundSelection,\n                        $volume: 0.5\n                    }));\n\n                    this.addVibration(new Vibration({\n\n                        $duration: 100,\n                        $intensityFrequencyHigh: 1,\n                        $intensityFrequencyLow: 0\n                    }));\n                },\n                $onLeave: () => {\n\n                    buttonNewGame.actionRest();\n\n                    if (STORAGE.get('continue') !== true) {\n\n                        buttonContinue.actionRest();\n                        STORAGE.set('continue', true);\n                    }\n\n                    console.log('New Game');\n                },\n                $transitions: [\n\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCESELECTION && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'QUITSELECTED',\n                $onEnter: ({$previous}) => {\n\n                    buttonQuit.actionFocus();\n\n                    if ($previous === 'QUITACTIVATED') {\n\n                        return;\n                    }\n\n                    this.addSound(new Sound({\n\n                        $audio: soundNavigation,\n                        $volume: 0.5\n                    }));\n                },\n                $onLeave: () => buttonQuit.actionRest(),\n                $transitions: [\n\n                    {\n                        $state: 'QUITACTIVATED',\n                        $condition: () => checkCommandActivate() === true\n                    },\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCENAVIGATION && checkCommandNavigateUp() === true && checkCommandNavigateDown() === false && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'QUITACTIVATED',\n                $onEnter: () => {\n\n                    buttonQuit.actionActivate();\n\n                    this.addSound(new Sound({\n\n                        $audio: soundSelection,\n                        $volume: 0.5\n                    }));\n\n                    this.addVibration(new Vibration({\n\n                        $duration: 100,\n                        $intensityFrequencyHigh: 1,\n                        $intensityFrequencyLow: 0\n                    }));\n                },\n                $onLeave: () => {\n\n                    buttonQuit.actionRest();\n\n                    if (STORAGE.get('continue') === true) {\n\n                        buttonContinue.actionDisable()\n                        STORAGE.set('continue', false);\n                    }\n\n                    console.log('Quit');\n                },\n                $transitions: [\n\n                    {\n                        $state: 'QUITSELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCESELECTION && checkCommandActivate() === false\n                    }\n                ]\n            }\n        ]);\n\n        this.$finiteStateMachineMenu.initiate('INITIATE');\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$finiteStateMachineMenu.update($timetick);\n    }\n}\n\nexport default ActorMenu;\n","import {FACTORIES, Vector2, Vector3} from '@theatrejs/theatrejs';\n\nimport ActorMenu from 'actors/actor-menu/actor-menu.js';\n\nclass StageMenu extends FACTORIES.StageWithPreloadables([ActorMenu]) {\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Stage['onCreate']}\n     */\n    onCreate() {\n\n        this.engine.setColor(new Vector3(27 / 255, 36 / 255, 71 / 255));\n        this.engine.setResolution(new Vector2(480, 360));\n\n        this.createActor(ActorMenu);\n    }\n}\n\nexport default StageMenu;\n","/**\n * @module COLLIDERTYPES\n */\n\n/**\n * The dynamic collider type.\n * @type {'DYNAMIC'}\n * @constant\n *\n * @memberof module:COLLIDERTYPES\n */\nconst DYNAMIC = 'DYNAMIC';\n\n/**\n * The kinetic collider type.\n * @type {'KINETIC'}\n * @constant\n *\n * @memberof module:COLLIDERTYPES\n */\nconst KINETIC = 'KINETIC';\n\n/**\n * The static collider type.\n * @type {'STATIC'}\n * @constant\n *\n * @memberof module:COLLIDERTYPES\n */\nconst STATIC = 'STATIC';\n\nexport {\n\n    DYNAMIC,\n    KINETIC,\n    STATIC\n};\n","/**\n * @module CONTENTTYPES\n */\n\n/**\n * The audio/mpeg Content-Type.\n * @type {'audio/mpeg'}\n * @constant\n *\n * @memberof module:CONTENTTYPES\n */\nconst AUDIOMPEG = 'audio/mpeg';\n\n/**\n * The audio/wave Content-Type.\n * @type {'audio/wave'}\n * @constant\n *\n * @memberof module:CONTENTTYPES\n */\nconst AUDIOWAVE = 'audio/wave';\n\n/**\n * The image/jpeg Content-Type.\n * @type {'image/jpeg'}\n * @constant\n *\n * @memberof module:CONTENTTYPES\n */\nconst IMAGEJPEG = 'image/jpeg';\n\n/**\n * The image/png Content-Type.\n * @type {'image/png'}\n * @constant\n *\n * @memberof module:CONTENTTYPES\n */\nconst IMAGEPNG = 'image/png';\n\nexport {\n\n    AUDIOMPEG,\n    AUDIOWAVE,\n    IMAGEJPEG,\n    IMAGEPNG\n};\n","/**\n * @module EVENTCODES/GAMEPADXBOX\n */\n\n/**\n * The XBOX gamepad 'A' event code.\n * @type {'ClusterRightButtonBottom'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst A = 'ClusterRightButtonBottom';\n\n/**\n * The XBOX gamepad 'B' event code.\n * @type {'ClusterRightButtonRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst B = 'ClusterRightButtonRight';\n\n/**\n * The XBOX gamepad 'X' event code.\n * @type {'ClusterRightButtonLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst X = 'ClusterRightButtonLeft';\n\n/**\n * The XBOX gamepad 'Y' event code.\n * @type {'ClusterRightButtonTop'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst Y = 'ClusterRightButtonTop';\n\n/**\n * The XBOX gamepad 'LB' event code.\n * @type {'ClusterFrontButtonTopLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LB = 'ClusterFrontButtonTopLeft';\n\n/**\n * The XBOX gamepad 'RB' event code.\n * @type {'ClusterFrontButtonTopRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RB = 'ClusterFrontButtonTopRight';\n\n/**\n * The XBOX gamepad 'LT' event code.\n * @type {'ClusterFrontButtonBottomLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LT = 'ClusterFrontButtonBottomLeft';\n\n/**\n * The XBOX gamepad 'RT' event code.\n * @type {'ClusterFrontButtonBottomRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RT = 'ClusterFrontButtonBottomRight';\n\n/**\n * The XBOX gamepad 'BACK' event code.\n * @type {'ClusterCenterButtonLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst BACK = 'ClusterCenterButtonLeft';\n\n/**\n * The XBOX gamepad 'START' event code.\n * @type {'ClusterCenterButtonRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst START = 'ClusterCenterButtonRight';\n\n/**\n * The XBOX gamepad 'LSB' event code.\n * @type {'StickLeftButton'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LSB = 'StickLeftButton';\n\n/**\n * The XBOX gamepad 'RSB' event code.\n * @type {'StickRightButton'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RSB = 'StickRightButton';\n\n/**\n * The XBOX gamepad 'UP' event code.\n * @type {'ClusterLeftButtonTop'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst UP = 'ClusterLeftButtonTop';\n\n/**\n * The XBOX gamepad 'DOWN' event code.\n * @type {'ClusterLeftButtonBottom'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst DOWN = 'ClusterLeftButtonBottom';\n\n/**\n * The XBOX gamepad 'LEFT' event code.\n * @type {'ClusterLeftButtonLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LEFT = 'ClusterLeftButtonLeft';\n\n/**\n * The XBOX gamepad 'RIGHT' event code.\n * @type {'ClusterLeftButtonRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RIGHT = 'ClusterLeftButtonRight';\n\n/**\n * The XBOX gamepad 'XBOX' event code.\n * @type {'ClusterCenterButtonCenter'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst XBOX = 'ClusterCenterButtonCenter';\n\n/**\n * The XBOX gamepad 'LSLEFT' event code.\n * @type {'StickLeftLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LSLEFT = 'StickLeftLeft';\n\n/**\n * The XBOX gamepad 'LSRIGHT' event code.\n * @type {'StickLeftRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LSRIGHT = 'StickLeftRight';\n\n/**\n * The XBOX gamepad 'LSUP' event code.\n * @type {'StickLeftUp'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LSUP = 'StickLeftUp';\n\n/**\n * The XBOX gamepad 'LSDOWN' event code.\n * @type {'StickLeftDown'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst LSDOWN = 'StickLeftDown';\n\n/**\n * The XBOX gamepad 'RSLEFT' event code.\n * @type {'StickRightLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RSLEFT = 'StickRightLeft';\n\n/**\n * The XBOX gamepad 'RSRIGHT' event code.\n * @type {'StickRightRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RSRIGHT = 'StickRightRight';\n\n/**\n * The XBOX gamepad 'RSUP' event code.\n * @type {'StickRightUp'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RSUP = 'StickRightUp';\n\n/**\n * The XBOX gamepad 'RSDOWN' event code.\n * @type {'StickRightDown'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst RSDOWN = 'StickRightDown';\n\n/**\n * The XBOX gamepad 'CONNECTED' event code.\n * @type {'Connected'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst CONNECTED = 'Connected';\n\n/**\n * The XBOX gamepad 'DISCONNECTED' event code.\n * @type {'Disconnected'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst DISCONNECTED = 'Disconnected';\n\n/**\n * The XBOX gamepad 'VIBRATEEND' event code.\n * @type {'VibrateEnd'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst VIBRATEEND = 'VibrateEnd';\n\n/**\n * The XBOX gamepad 'VIBRATESTART' event code.\n * @type {'VibrateStart'}\n * @constant\n *\n * @memberof module:EVENTCODES/GAMEPADXBOX\n */\nconst VIBRATESTART = 'VibrateStart';\n\nexport {\n\n    A,\n    B,\n    X,\n    Y,\n\n    LB,\n    RB,\n    LT,\n    RT,\n\n    BACK,\n    START,\n\n    LSB,\n    RSB,\n\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT,\n\n    XBOX,\n\n    LSLEFT,\n    LSRIGHT,\n    LSUP,\n    LSDOWN,\n    RSLEFT,\n    RSRIGHT,\n    RSUP,\n    RSDOWN,\n\n    CONNECTED,\n    DISCONNECTED,\n    VIBRATEEND,\n    VIBRATESTART\n};\n","/**\n * The AZERTY-based keyboard 'DELETE' event code.\n * @type {'Delete'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst DELETE = 'Delete';\n\n/**\n * The AZERTY-based keyboard 'ENTER' event code.\n * @type {'Enter'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst ENTER = 'Enter';\n\nexport {\n\n    DELETE,\n    ENTER\n};\n","/**\n * The AZERTY-based keyboard 'TAB' event code.\n * @type {'Tab'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst TAB = 'Tab';\n\n/**\n * The AZERTY-based keyboard 'UP' event code.\n * @type {'ArrowUp'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst UP = 'ArrowUp';\n\n/**\n * The AZERTY-based keyboard 'LEFT' event code.\n * @type {'ArrowLeft'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst LEFT = 'ArrowLeft';\n\n/**\n * The AZERTY-based keyboard 'RIGHT' event code.\n * @type {'ArrowRight'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst RIGHT = 'ArrowRight';\n\n/**\n * The AZERTY-based keyboard 'DOWN' event code.\n * @type {'ArrowDown'}\n * @constant\n *\n * @memberof module:EVENTCODES/KEYBOARDAZERTY\n */\nconst DOWN = 'ArrowDown';\n\nexport {\n\n    TAB,\n\n    UP,\n    LEFT,\n    RIGHT,\n    DOWN\n};\n","/**\n * @module MATHEMATICS\n */\n\n/**\n * The value to convert an angle from degrees to radians.\n * @type {number}\n * @constant\n *\n * @memberof module:MATHEMATICS\n */\nconst RADIANS = Math.PI / 180;\n\nexport {\n\n    RADIANS\n};\n","/**\n * Abstract preloadables.\n *\n * @example\n *\n * class PreloadableExample extends Preloadable {}\n */\nclass Preloadable {\n\n    /**\n     * Stores the preloadable assets.\n     * @type {Array<string>}\n     * @public\n     * @static\n     */\n    static preloadables = [];\n}\n\nexport {\n\n    Preloadable\n};\n\nexport default Preloadable;\n","import {Collider, Engine, Preloadable, Sound, Sprite, Stage, UTILS, Vector2, Vibration} from '../index.js';\n\n/**\n * Abstract actors.\n *\n * @example\n *\n * class ActorExample extends Actor {}\n */\nclass Actor extends Preloadable {\n\n    /**\n     * Stores the collider.\n     * @type {Collider}\n     * @private\n     */\n    $collider;\n\n    /**\n     * Stores the components.\n     * @type {Object<string, any>}\n     * @private\n     */\n    $components;\n\n    /**\n     * Stores the follower actors.\n     * @type {Set<Actor>}\n     * @private\n     */\n    $followers;\n\n    /**\n     * Stores the sounds.\n     * @type {Array<Sound>}\n     * @private\n     */\n    $sounds;\n\n    /**\n     * Stores the sprite.\n     * @type {Sprite}\n     * @private\n     */\n    $sprite;\n\n    /**\n     * Stores the current stage.\n     * @type {Stage}\n     * @private\n     */\n    $stage;\n\n    /**\n     * Stores the position.\n     * @type {Vector2}\n     * @private\n     */\n    $translation;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Stores the vibrations.\n     * @type {Array<Vibration>}\n     * @private\n     */\n    $vibrations;\n\n    /**\n     * Stores the z-index.\n     * @type {number}\n     * @private\n     */\n    $zIndex;\n\n    /**\n     * Gets the collider.\n     * @type {Collider}\n     * @public\n     */\n    get collider() {\n\n        return this.$collider;\n    }\n\n    /**\n     * Gets the current engine.\n     * @type {Engine}\n     * @public\n     */\n    get engine() {\n\n        return this.stage.engine;\n    }\n\n    /**\n     * Gets the follower actors.\n     * @type {Array<Actor>}\n     * @public\n     */\n    get followers() {\n\n        return Array.from(this.$followers);\n    }\n\n    /**\n     * Gets the sounds.\n     * @type {Array<Sound>}\n     * @public\n     */\n    get sounds() {\n\n        return this.$sounds;\n    }\n\n    /**\n     * Gets the sprite.\n     * @type {Sprite}\n     * @public\n     */\n    get sprite() {\n\n        return this.$sprite;\n    }\n\n    /**\n     * Gets the current stage.\n     * @type {Stage}\n     * @public\n     */\n    get stage() {\n\n        return this.$stage;\n    }\n\n    /**\n     * Gets the position.\n     * @type {Vector2}\n     * @public\n     */\n    get translation() {\n\n        return this.$translation;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Gets the vibrations.\n     * @type {Array<Vibration>}\n     * @public\n     */\n    get vibrations() {\n\n        return this.$vibrations;\n    }\n\n    /**\n     * Gets the z-index.\n     * @type {number}\n     * @public\n     */\n    get zIndex() {\n\n        return this.$zIndex;\n    }\n\n    /**\n     * Create a new actor.\n     * @param {Stage} $stage The stage on which to create the actor.\n     */\n    constructor($stage) {\n\n        super();\n\n        this.$stage = $stage;\n\n        this.$components = {};\n        this.$followers = new Set();\n        this.$sounds = [];\n        this.$translation = new Vector2(0, 0);\n        this.$uuid = UTILS.uuid();\n        this.$vibrations = [];\n        this.$zIndex = 0;\n    }\n\n    /**\n     * Adds a follower actor.\n     * @param {Actor} $actor The follower actor to add.\n     * @returns {this}\n     * @public\n     */\n    addFollower($actor) {\n\n        this.$followers.add($actor);\n\n        return this;\n    }\n\n    /**\n     * Adds the given sound.\n     * @param {Sound} $sound The sound to add.\n     * @returns {this}\n     * @public\n     */\n    addSound($sound) {\n\n        this.$sounds.push($sound);\n\n        return this;\n    }\n\n    /**\n     * Adds the given vibration.\n     * @param {Vibration} $vibration The vibration to add.\n     * @returns {this}\n     * @public\n     */\n    addVibration($vibration) {\n\n        this.$vibrations.push($vibration);\n\n        return this;\n    }\n\n    /**\n     * Gets a component.\n     * @param {string} $name The name of the component to get.\n     * @returns {any}\n     * @public\n     */\n    getComponent($name) {\n\n        return this.$components[$name];\n    }\n\n    /**\n     * Checks if the actor has a collider.\n     * @returns {boolean}\n     * @public\n     */\n    hasCollider() {\n\n        return this.$collider instanceof Collider;\n    }\n\n    /**\n     * Checks if the actor has the given component.\n     * @param {string} $name The name of the component to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasComponent($name) {\n\n        return this.$components.hasOwnProperty($name) === true;\n    }\n\n    /**\n     * Checks if the actor has the given follower actor.\n     * @param {Actor} $actor The actor to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasFollower($actor) {\n\n        return this.$followers.has($actor) === true;\n    }\n\n    /**\n     * Checks if the actor has a sprite.\n     * @returns {boolean}\n     * @public\n     */\n    hasSprite() {\n\n        return this.$sprite instanceof Sprite;\n    }\n\n    /**\n     * Called just after removing the actor.\n     * @public\n     */\n    onAfterRemove() {}\n\n    /**\n     * Called just before removing the actor.\n     * @public\n     */\n    onBeforeRemove() {}\n\n    /**\n     * Called when a collision is being resolved.\n     * @param {Object} $parameters The given parameters.\n     * @param {Actor} $parameters.$actor The colliding actor.\n     * @param {boolean} $parameters.$east If the origin of collision is facing the east face.\n     * @param {boolean} $parameters.$north If the origin of collision is facing the north face.\n     * @param {boolean} $parameters.$south If the origin of collision is facing the south face.\n     * @param {boolean} $parameters.$west If the origin of collision is facing the west face.\n     * @public\n     */\n    onCollide({$actor, $east, $north, $south, $west}) {}\n\n    /**\n     * Called when a collision is being entered.\n     * @param {Object} $parameters The given parameters.\n     * @param {Actor} $parameters.$actor The colliding actor.\n     * @param {boolean} $parameters.$east If the origin of collision is facing the east face.\n     * @param {boolean} $parameters.$north If the origin of collision is facing the north face.\n     * @param {boolean} $parameters.$south If the origin of collision is facing the south face.\n     * @param {boolean} $parameters.$west If the origin of collision is facing the west face.\n     * @public\n     */\n    onCollideEnter({$actor, $east, $north, $south, $west}) {}\n\n    /**\n     * Called when a collision is being left.\n     * @param {Actor} $actor The colliding actor.\n     * @public\n     */\n    onCollideLeave($actor) {}\n\n    /**\n     * Called when the actor is being created.\n     * @public\n     */\n    onCreate() {}\n\n    /**\n     * Called when a sound is finishing playing.\n     * @param {Sound} $sound The sound.\n     * @public\n     */\n    onSoundFinish($sound) {}\n\n    /**\n     * Called when the actor is being updated by one tick update.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    onTick($timetick) {}\n\n    /**\n     * Removes a follower actor.\n     * @param {Actor} $actor The follower actor to remove.\n     * @returns {this}\n     * @public\n     */\n    removeFollower($actor) {\n\n        this.$followers.delete($actor);\n\n        return this;\n    }\n\n    /**\n     * Removes the given sound.\n     * @param {Sound} $sound The sound to remove.\n     * @returns {this}\n     * @public\n     */\n    removeSound($sound) {\n\n        UTILS.extract($sound, this.$sounds);\n\n        return this;\n    }\n\n    /**\n     * Removes all sound.\n     * @returns {this}\n     * @public\n     */\n    removeSounds() {\n\n        this.$sounds = [];\n\n        return this;\n    }\n\n    /**\n     * Removes the given vibration.\n     * @param {Vibration} $vibration The vibration to remove.\n     * @returns {this}\n     * @public\n     */\n    removeVibration($vibration) {\n\n        UTILS.extract($vibration, this.$vibrations);\n\n        return this;\n    }\n\n    /**\n     * Removes all vibration.\n     * @returns {this}\n     * @public\n     */\n    removeVibrations() {\n\n        this.$vibrations = [];\n\n        return this;\n    }\n\n    /**\n     * Sets the collider.\n     * @param {Collider} $collider The collider to set.\n     * @returns {this}\n     * @public\n     */\n    setCollider($collider) {\n\n        this.$collider = $collider;\n\n        return this;\n    }\n\n    /**\n     * Sets a component.\n     * @param {string} $name The name of the component to set.\n     * @param {any} $component The value of the component to set.\n     * @returns {this}\n     * @public\n     */\n    setComponent($name, $component) {\n\n        this.$components[$name] = $component;\n\n        return this;\n    }\n\n    /**\n     * Sets the sprite.\n     * @param {Sprite} $sprite The sprite to set.\n     * @returns {this}\n     * @public\n     */\n    setSprite($sprite) {\n\n        this.$sprite = $sprite;\n\n        return this;\n    }\n\n    /**\n     * Sets the z-index.\n     * @param {number} $zIndex The z-index to set.\n     * @returns {this}\n     * @public\n     */\n    setZIndex($zIndex) {\n\n        this.$zIndex = $zIndex;\n\n        return this;\n    }\n\n    /**\n     * Translates the actor in the world space from a third person point of view.\n     * @param {Vector2} $vector The translation to apply.\n     * @returns {this}\n     * @public\n     */\n    translate($vector) {\n\n        const translation = $vector.clone();\n\n        Array.from(this.$followers).forEach(($follower) => {\n\n            if (this.stage.hasActor($follower) === false) {\n\n                this.$followers.delete($follower);\n\n                return;\n            }\n\n            $follower.translate(translation);\n        });\n\n        this.$translation.add(translation);\n\n        return this;\n    }\n\n    /**\n     * Translates the actor in the world space to the given position.\n     * @param {Vector2} $vector The position to translate to.\n     * @returns {this}\n     * @public\n     */\n    translateTo($vector) {\n\n        const translation = $vector.clone().subtract(this.$translation);\n\n        Array.from(this.$followers).forEach(($follower) => {\n\n            if (this.stage.hasActor($follower) === false) {\n\n                this.$followers.delete($follower);\n\n                return;\n            }\n\n            $follower.translate(translation);\n        });\n\n        this.$translation.add(translation);\n\n        return this;\n    }\n}\n\nexport {\n\n    Actor\n};\n\nexport default Actor;\n","import {Actor, Engine, Preloadable, UTILS} from '../index.js';\n\n/**\n * Abstract stages.\n *\n * @example\n *\n * class StageExample extends Stage {}\n */\nclass Stage extends Preloadable {\n\n    /**\n     * Stores the current actors.\n     * @type {Array<Actor>}\n     * @private\n     */\n    $actors;\n\n    /**\n     * Stores the current engine.\n     * @type {Engine}\n     * @private\n     */\n    $engine;\n\n    /**\n     * Stores the point of view.\n     * @type {Actor}\n     * @private\n     */\n    $pointOfView;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Gets the current actors.\n     * @type {Array<Actor>}\n     * @public\n     */\n    get actors() {\n\n        return this.$actors;\n    }\n\n    /**\n     * Gets the current engine.\n     * @type {Engine}\n     * @public\n     */\n    get engine() {\n\n        return this.$engine;\n    }\n\n    /**\n     * Gets the point of view.\n     * @type {Actor}\n     * @public\n     */\n    get pointOfView() {\n\n        return this.$pointOfView;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Creates a new stage.\n     * @param {Engine} $engine The engine on which to create the stage.\n     */\n    constructor($engine) {\n\n        super();\n\n        this.$engine = $engine;\n\n        this.$actors = [];\n        this.$pointOfView = this.createActor(Actor);\n        this.$uuid = UTILS.uuid();\n    }\n\n    /**\n     * Creates the given actor.\n     * @param {typeof Actor} [$actor] The actor to create.\n     * @public\n     */\n    createActor($actor = Actor) {\n\n        const actor = new $actor(this);\n\n        this.$actors.push(actor);\n\n        actor.onCreate();\n\n        return actor;\n    }\n\n    /**\n     * Checks if the stage has the given actor.\n     * @param {Actor} $actor The actor to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasActor($actor) {\n\n        return this.$actors.indexOf($actor) !== -1;\n    }\n\n    /**\n     * Called when the stage is being created.\n     * @public\n     */\n    onCreate() {}\n\n    /**\n     * Removes the given actor.\n     * @param {Actor} $actor The actor to remove.\n     * @public\n     */\n    removeActor($actor) {\n\n        const index = this.$actors.indexOf($actor);\n\n        if (index === -1) {\n\n            return;\n        }\n\n        $actor.onBeforeRemove();\n\n        this.$actors.splice(index, 1);\n\n        $actor.onAfterRemove();\n    }\n\n    /**\n     * Removes all actors.\n     * @public\n     */\n    removeActors() {\n\n        while (this.$actors.length > 0) {\n\n            this.removeActor(this.$actors[0]);\n        }\n    }\n\n    /**\n     * Sets the given actor as the point of view.\n     * @param {Actor} $actor The actor to set as the point of view.\n     * @public\n     */\n    setPointOfView($actor) {\n\n        this.$pointOfView = $actor;\n    }\n}\n\nexport {\n\n    Stage\n};\n\nexport default Stage;\n","import {Vector2} from '../index.js';\n\n/**\n * Creates AABBs.\n *\n * @example\n *\n * const aabb = new AABB(new Vector2(-1, -1), new Vector2(1, 1));\n */\nclass AABB {\n\n    /**\n     * Stores the maximum values of the AABB.\n     * @type {Vector2}\n     * @private\n     */\n    $maximum;\n\n    /**\n     * Stores the minimum values of the AABB.\n     * @type {Vector2}\n     * @private\n     */\n    $minimum;\n\n    /**\n     * Gets the center of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get center() {\n\n        return this.minimum.clone().add(this.halfSize);\n    }\n\n    /**\n     * Gets the half-size of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get halfSize() {\n\n        return this.size.clone().scale(0.5);\n    }\n\n    /**\n     * Gets the maximum values of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get maximum() {\n\n        return this.$maximum;\n    }\n\n    /**\n     * Gets the minimum values of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get minimum() {\n\n        return this.$minimum;\n    }\n\n    /**\n     * Gets the size of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get size() {\n\n        return this.$maximum.clone().subtract(this.$minimum);\n    }\n\n    /**\n     * Creates a new AABB.\n     * @param {Vector2} $minimum The minimum values of the AABB to create.\n     * @param {Vector2} $maximum The maximum values of the AABB to create.\n     */\n    constructor($minimum, $maximum) {\n\n        this.$maximum = $maximum;\n        this.$minimum = $minimum;\n    }\n\n    /**\n     * Gets the manhattan distance between two AABBs.\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceManhattan($a, $b) {\n\n        const distanceX = AABB.distanceX($a, $b);\n        const distanceY = AABB.distanceY($a, $b);\n\n        if (distanceX > 0 || distanceY > 0) {\n\n            return Math.max(distanceX, 0) + Math.max(distanceY, 0);\n        }\n\n        return distanceX + distanceY;\n    }\n\n    /**\n     * Gets the distance between two AABBs on the x-axis.\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceX($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.x - $a.center.x);\n        const distanceMinimum = $a.halfSize.x + $b.halfSize.x;\n\n        return distanceCenter - distanceMinimum;\n    }\n\n    /**\n     * Gets the distance between two AABBs on the y-axis.\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceY($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.y - $a.center.y);\n        const distanceMinimum = $a.halfSize.y + $b.halfSize.y;\n\n        return distanceCenter - distanceMinimum;\n    }\n\n    /**\n     * Creates a new AABB from the given AABB.\n     * @param {AABB} $aabb The given AABB.\n     * @returns {AABB}\n     * @public\n     * @static\n     */\n    static from($aabb) {\n\n        return $aabb.clone();\n    }\n\n    /**\n     * Gets the delta penetration between two AABBs strictly overlaping with each other on the x-axis (the common area).\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static overlapX($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.x - $a.center.x);\n        const distanceMinimum = $a.halfSize.x + $b.halfSize.x;\n\n        return distanceMinimum - distanceCenter;\n    }\n\n    /**\n     * Gets the delta penetration between two AABBs strictly overlaping with each other on the y-axis (the common area).\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static overlapY($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.y - $a.center.y);\n        const distanceMinimum = $a.halfSize.y + $b.halfSize.y;\n\n        return distanceMinimum - distanceCenter;\n    }\n\n    /**\n     * Clones the AABB.\n     * @returns {AABB}\n     * @public\n     */\n    clone() {\n\n        return new AABB(this.$minimum, this.$maximum);\n    }\n\n    /**\n     * Translates the AABB in the world space from a third person point of view.\n     * @param {Vector2} $vector The translation to apply.\n     * @returns {this}\n     * @public\n     */\n    translate($vector) {\n\n        this.$maximum = this.$maximum.clone().add($vector);\n        this.$minimum = this.$minimum.clone().add($vector);\n\n        return this;\n    }\n}\n\nexport {\n\n    AABB\n};\n\nexport default AABB;\n","import {AABB, COLLIDERTYPES} from '../index.js';\n\n/**\n * Creates colliders.\n *\n * @example\n *\n * const collider = new Collider({$boundaries, $traversable, $type});\n */\nclass Collider {\n\n    /**\n     * @typedef {(COLLIDERTYPES.DYNAMIC | COLLIDERTYPES.KINETIC | COLLIDERTYPES.STATIC)} typecollider A collider type.\n     * @protected\n     *\n     * @memberof Collider\n     */\n\n    /**\n     * Stores the boundaries.\n     * @type {AABB}\n     * @private\n     */\n    $boundaries;\n\n    /**\n     * Stores the traversable status.\n     * @type {boolean}\n     * @private\n     */\n    $traversable;\n\n    /**\n     * Stores the collider type.\n     * @type {typecollider}\n     * @private\n     */\n    $type;\n\n    /**\n     * Gets the boundaries.\n     * @type {AABB}\n     * @public\n     */\n    get boundaries() {\n\n        return this.$boundaries;\n    }\n\n    /**\n     * Gets the traversable status.\n     * @type {boolean}\n     * @public\n     */\n    get traversable() {\n\n        return this.$traversable;\n    }\n\n    /**\n     * Gets the collider type.\n     * @type {typecollider}\n     * @public\n     */\n    get type() {\n\n        return this.$type;\n    }\n\n    /**\n     * Creates a new collider.\n     * @param {Object} $parameters The given parameters.\n     * @param {AABB} $parameters.$boundaries The boundaries of the collider to create.\n     * @param {boolean} [$parameters.$traversable] The traversable status of the collider to create.\n     * @param {typecollider} $parameters.$type The type of the collider to create.\n     */\n    constructor({$boundaries, $traversable = false, $type}) {\n\n        this.$boundaries = $boundaries;\n        this.$traversable = $traversable;\n        this.$type = $type;\n    }\n}\n\nexport {\n\n    Collider\n};\n\nexport default Collider;\n","import {CONTENTTYPES, Loop, Stage, SystemActor, SystemAudio, SystemCollision, SystemInput, SystemRender, SystemVibration, UTILS, Vector2, Vector3} from '../index.js';\n\n/**\n * Creates game engines.\n *\n * @example\n *\n * const engine = new Engine({$color, $container, $resolution});\n * engine.initiate(60);\n *\n * await engine.preloadStage(SceneExample);\n *\n * engine.createStage(SceneExample);\n */\nclass Engine {\n\n    /**\n     * Stores the rendering background color.\n     * @type {Vector3}\n     * @private\n     */\n    $color;\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the loop.\n     * @type {Loop}\n     * @private\n     */\n    $loop;\n\n    /**\n     * Stores the next stage.\n     * @type {typeof Stage}\n     * @private\n     */\n    $next;\n\n    /**\n     * Stores the preloaded status of the assets.\n     * @type {Set<string>}\n     * @private\n     */\n    $preloaded;\n\n    /**\n     * Stores the rendering resolution.\n     * @type {Vector2}\n     * @private\n     */\n    $resolution;\n\n    /**\n     * Stores the current stage.\n     * @type {Stage}\n     * @private\n     */\n    $stage;\n\n    /**\n     * Stores the current actor system.\n     * @type {SystemActor}\n     * @private\n     */\n    $systemActor;\n\n    /**\n     * Stores the current audio system.\n     * @type {SystemAudio}\n     * @private\n     */\n    $systemAudio;\n\n    /**\n     * Stores the current collision system.\n     * @type {SystemCollision}\n     * @private\n     */\n    $systemCollision;\n\n    /**\n     * Stores the current input system.\n     * @type {SystemInput}\n     * @private\n     */\n    $systemInput;\n\n    /**\n     * Stores the current render system.\n     * @type {SystemRender}\n     * @private\n     */\n    $systemRender;\n\n    /**\n     * Stores the current vibration system.\n     * @type {SystemVibration}\n     * @private\n     */\n    $systemVibration;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Gets the container.\n     * @type {HTMLElement}\n     * @public\n     */\n    get container() {\n\n        return this.$container;\n    }\n\n    /**\n     * Gets the current stage.\n     * @type {Stage}\n     * @public\n     */\n    get stage() {\n\n        return this.$stage;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Creates a new game engine.\n     * @param {Object} $parameters The given parameters.\n     * @param {Vector3} [$parameters.$color] The rendering background color to use.\n     * @param {HTMLElement} $parameters.$container The container for the game engine to create.\n     * @param {Vector2} [$parameters.$resolution] The rendering resolution to use.\n     */\n    constructor({$color = new Vector3(0, 0, 0), $container, $resolution = new Vector2(320, 240)}) {\n\n        this.$color = $color;\n        this.$container = $container;\n        this.$resolution = $resolution;\n\n        this.$uuid = UTILS.uuid();\n\n        this.$loop = new Loop(this.tick.bind(this));\n        this.$preloaded = new Set();\n\n        this.$systemActor = new SystemActor();\n        this.$systemAudio = new SystemAudio();\n        this.$systemCollision = new SystemCollision();\n        this.$systemInput = new SystemInput({$container: this.$container});\n        this.$systemRender = new SystemRender({$color: this.$color, $container: this.$container, $resolution: this.$resolution});\n        this.$systemVibration = new SystemVibration();\n    }\n\n    /**\n     * Creates the given stage.\n     * @param {typeof Stage} $stage The stage to create.\n     * @private\n     */\n    $createStage($stage) {\n\n        this.$stage = new $stage(this);\n        this.$stage.onCreate();\n    }\n\n    /**\n     * Creates the given stage on the next tick update.\n     * @param {typeof Stage} $stage The stage to create on the next tick update.\n     * @public\n     */\n    createStage($stage) {\n\n        this.$next = $stage;\n    }\n\n    /**\n     * Gets the current input state value of the given digital input.\n     * @param {string} $input The event code of the given digital input.\n     * @returns {boolean}\n     * @public\n     */\n    getInput($input) {\n\n        return this.$systemInput.getInput($input);\n    }\n\n    /**\n     * Gets the current input state value of the given analog input.\n     * @param {string} $input The event code of the given analog input.\n     * @returns {number}\n     * @public\n     */\n    getInputAnalog($input) {\n\n        return this.$systemInput.getInputAnalog($input);\n    }\n\n    /**\n     * Checks if the engine has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        return this.$preloaded.has($asset) === true;\n    }\n\n    /**\n     * Initiates the engine.\n     * @param {number} [$tickrateMinimum] The minimum acceptable number of ticks per virtual second (in ticks/s).\n     * @public\n     */\n    initiate($tickrateMinimum = 60) {\n\n        this.$loop.initiate($tickrateMinimum);\n\n        this.$systemInput.initiate();\n        this.$systemRender.initiate();\n    }\n\n    /**\n     * Preloads the assets of the given stage.\n     * @param {typeof Stage} $stage The stage to preload the assets from.\n     * @returns {Promise<Array<undefined | AudioBuffer | WebGLTexture>>}\n     * @public\n     */\n    preloadStage($stage) {\n\n        /**\n         * @type {Array<Promise<undefined | AudioBuffer | WebGLTexture>>}\n         */\n        const promises = [];\n\n        UTILS.deduplicate($stage.preloadables).forEach(($asset) => {\n\n            if (this.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            this.$preloaded.add($asset);\n\n            if (this.$systemAudio.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            if (this.$systemRender.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            /**\n             * @type {Promise<undefined | AudioBuffer | WebGLTexture>}\n             */\n            const promise = new Promise(($resolve) => {\n\n                fetch($asset)\n                .then(($content) => {\n\n                    const contentType = $content.headers.get('Content-Type');\n\n                    switch(contentType) {\n\n                        case CONTENTTYPES.IMAGEJPEG:\n                        case CONTENTTYPES.IMAGEPNG: {\n\n                            this.$systemRender.loadTexture($content)\n                            .then(($texture) => {\n\n                                $resolve($texture);\n                            });\n\n                            break;\n                        }\n\n                        case CONTENTTYPES.AUDIOMPEG:\n                        case CONTENTTYPES.AUDIOWAVE: {\n\n                            this.$systemAudio.loadAudio($content)\n                            .then(($bufferAudio) => {\n\n                                $resolve($bufferAudio);\n                            });\n\n                            break;\n                        }\n\n                        default: {\n\n                            $resolve(undefined);\n                        }\n                    }\n                });\n            });\n\n            promises.push(promise);\n        });\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Sets the rendering background color.\n     * @param {Vector3} $color The rendering background color to set.\n     * @public\n     */\n    setColor($color) {\n\n        return this.$systemRender.setColor($color);\n    }\n\n    /**\n     * Sets the rendering resolution.\n     * @param {Vector2} $resolution The rendering resolution to set.\n     * @public\n     */\n    setResolution($resolution) {\n\n        return this.$systemRender.setResolution($resolution);\n    }\n\n    /**\n     * Terminates the engine (immediately) (must be used outside the lifecycle of this engine).\n     * @public\n     */\n    terminate() {\n\n        this.$loop.terminate();\n\n        this.$createStage(Stage);\n        this.tick(0);\n\n        this.$systemInput.terminate();\n        this.$systemRender.terminate();\n        this.$systemAudio.terminate();\n        this.$systemVibration.terminate();\n    }\n\n    /**\n     * Updates each system once.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    tick($timetick) {\n\n        if (typeof this.$next === typeof Stage) {\n\n            const stage = this.$next;\n\n            this.$next = undefined;\n\n            this.$createStage(stage);\n        }\n\n        if (typeof this.$stage === 'undefined') {\n\n            return;\n        }\n\n        this.$systemInput.tick();\n        this.$systemActor.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n        this.$systemCollision.tick(this.$stage);\n        this.$systemRender.tick(this.$stage);\n        this.$systemAudio.tick(this.$stage);\n        this.$systemVibration.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n    }\n}\n\nexport {\n\n    Engine\n};\n\nexport default Engine;\n","import {Actor, Preloadable, Stage} from '../index.js';\n\n/**\n * @module FACTORIES\n */\n\n/**\n * Prepares an actor with preloadable assets.\n * @param {Array<typeof Preloadable | typeof Actor>} $preloadables The preloadable assets (mix of preloadable assets and/or actors with preloadable assets).\n * @returns {typeof Actor}\n *\n * @memberof module:FACTORIES\n */\nfunction ActorWithPreloadables($preloadables) {\n\n    /**\n     * @type {Set<string>}\n     */\n    const preloadables = new Set();\n\n    $preloadables.forEach(($preloadable) => {\n\n        if (typeof $preloadable !== typeof Preloadable) {\n\n            return;\n        }\n\n        $preloadable.preloadables.forEach(($preloadable) => {\n\n            if (preloadables.has($preloadable) === true) {\n\n                return;\n            }\n\n            preloadables.add($preloadable);\n        });\n    });\n\n    return class extends Actor {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = Array.from(preloadables);\n    };\n}\n\n/**\n * Prepares a preloadable sound.\n * @param {string} $sound The preloadable sound.\n * @returns {typeof Preloadable}\n *\n * @memberof module:FACTORIES\n */\nfunction PreloadableSound($sound) {\n\n    return class extends Preloadable {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = [$sound];\n    };\n}\n\n/**\n * Prepares a preloadable texture.\n * @param {string} $texture The preloadable texture.\n * @returns {typeof Preloadable}\n *\n * @memberof module:FACTORIES\n */\nfunction PreloadableTexture($texture) {\n\n    return class extends Preloadable {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = [$texture];\n    };\n}\n\n/**\n * Prepares a stage with preloadable assets.\n * @param {Array<typeof Preloadable | typeof Actor>} $preloadables The preloadable assets (mix of preloadable assets and/or actors with preloadable assets).\n * @returns {typeof Stage}\n *\n * @memberof module:FACTORIES\n */\nfunction StageWithPreloadables($preloadables) {\n\n    /**\n     * @type {Set<string>}\n     */\n    const preloadables = new Set();\n\n    $preloadables.forEach(($preloadable) => {\n\n        if (typeof $preloadable !== typeof Preloadable) {\n\n            return;\n        }\n\n        $preloadable.preloadables.forEach(($preloadable) => {\n\n            if (preloadables.has($preloadable) === true) {\n\n                return;\n            }\n\n            preloadables.add($preloadable);\n        });\n    });\n\n    return class extends Stage {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = Array.from(preloadables);\n    };\n}\n\nexport {\n\n    ActorWithPreloadables,\n    PreloadableSound,\n    PreloadableTexture,\n    StageWithPreloadables\n};\n","/**\n * Creates finite state machines.\n * @template {string} T The generic type of the names of a state.\n *\n * @example\n *\n * const toggle = new FiniteStateMachine([\n *\n *     {\n *         $state: 'ON',\n *         $transitions: [{\n *\n *             $state: 'OFF',\n *             $condition: ({$timer}) => ($timer >= 1000)\n *         }]\n *     },\n *     {\n *         $state: 'OFF',\n *         $transitions: [{\n *\n *             $state: 'ON',\n *             $condition: ({$timer}) => ($timer >= 1000)\n *         }]\n *     }\n * ]);\n */\nclass FiniteStateMachine {\n\n    /**\n     * @callback typestatehandlerenter A state entering handler.\n     * @param {Object} $parameters The given parameters.\n     * @param {T} $parameters.$previous The previous state.\n     * @returns {void}\n     * @protected\n     *\n     * @memberof FiniteStateMachine\n     */\n\n    /**\n     * @callback typestatehandlerleave A state leaving handler.\n     * @param {Object} $parameters The given parameters.\n     * @param {number} $parameters.$timer The timer of the current state.\n     * @param {T} $parameters.$next The next state.\n     * @returns {void}\n     * @protected\n     *\n     * @memberof FiniteStateMachine\n     */\n\n    /**\n     * @callback typestatetransitioncondition A state transition condition.\n     * @param {Object} $parameters The given parameters.\n     * @param {T} $parameters.$previous The previous state.\n     * @param {number} $parameters.$timer The timer of the current state.\n     * @returns {boolean}\n     * @protected\n     *\n     * @memberof FiniteStateMachine\n     */\n\n    /**\n     * @typedef {Object} typestatetransition A transition to a state.\n     * @property {typestatetransitioncondition} typestatetransition.$condition The condition to transition to given state.\n     * @property {T} typestatetransition.$state The given state to transition to.\n     * @protected\n     *\n     * @memberof FiniteStateMachine\n     */\n\n    /**\n     * @typedef {Object} typestate A state.\n     * @property {T} typestate.$state The name of the state.\n     * @property {typestatehandlerenter} [typestate.$onEnter] The handler to execute when entering the state.\n     * @property {typestatehandlerleave} [typestate.$onLeave] The handler to execute when leaving the state.\n     * @property {Array<typestatetransition>} typestate.$transitions The transitions to given states.\n     * @protected\n     *\n     * @memberof FiniteStateMachine\n     */\n\n    /**\n     * Stores the initiated status.\n     * @type {boolean}\n     * @private\n     */\n    $initiated;\n\n    /**\n     * Stores the previous state.\n     * @type {typestate}\n     * @private\n     */\n    $previous;\n\n    /**\n     * Stores the current state.\n     * @type {typestate}\n     * @private\n     */\n    $state;\n\n    /**\n     * Stores the states.\n     * @type {Map<T, typestate>}\n     * @private\n     */\n    $states;\n\n    /**\n     * Stores the timer of the current state.\n     * @type {number}\n     * @private\n     */\n    $timer;\n\n    /**\n     * Creates a new finite state machine.\n     * @param {Array<typestate>} $data The representation of the finite state machine.\n     */\n    constructor($data) {\n\n        this.$initiated = false;\n        this.$states = new Map();\n        this.$timer = 0;\n\n        $data.forEach(($state) => {\n\n            this.$states.set($state.$state, $state);\n        });\n    }\n\n    /**\n     * Initiates the finite state machine.\n     * @param {T} $state The name of the state to initiate.\n     * @public\n     */\n    initiate($state) {\n\n        if (this.$initiated === true) {\n\n            return;\n        }\n\n        this.$previous = this.$state\n        this.$state = this.$states.get($state);\n\n        if (typeof this.$state.$onEnter === 'function') {\n\n            this.$state.$onEnter({$previous: undefined});\n        }\n\n        this.$initiated = true;\n    }\n\n    /**\n     * Updates the finite state machine.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    update($timetick) {\n\n        if (this.$initiated === false) {\n\n            return;\n        }\n\n        this.$timer += $timetick;\n\n        for (let $transition of this.$state.$transitions) {\n\n            let previous;\n\n            if (typeof this.$previous !== 'undefined') {\n\n                previous = this.$previous.$state;\n            }\n\n            const current = this.$state.$state;\n            const next = $transition.$state;\n\n            if ($transition.$condition({$previous: previous, $timer: this.$timer}) === true) {\n\n                if (typeof this.$state.$onLeave === 'function') {\n\n                    this.$state.$onLeave({$timer: this.$timer, $next: next});\n                }\n\n                this.$timer = 0;\n\n                this.$previous = this.$state;\n                this.$state = this.$states.get(next);\n\n                if (typeof this.$state.$onEnter === 'function') {\n\n                    this.$state.$onEnter({$previous: current});\n                }\n\n                break;\n            }\n        }\n    }\n}\n\nexport {\n\n    FiniteStateMachine\n};\n\nexport default FiniteStateMachine;\n","/**\n * Creates update loops.\n *\n * @example\n *\n * const loop = new Loop(handler);\n * loop.initiate();\n */\nclass Loop {\n\n    /**\n     * Stores the handler to execute with the update loop.\n     * @type {Function}\n     * @private\n     */\n    $handler;\n\n    /**\n     * Stores the identifier of the last requestAnimationFrame call.\n     * @type {number}\n     * @private\n     */\n    $identifier;\n\n    /**\n     * Stores the time value of the previous tick call.\n     * @type {number}\n     * @private\n     */\n    $timePrevious;\n\n    /**\n     * Stores the global scope used.\n     * @type {Window}\n     * @private\n     */\n    $scope;\n\n    /**\n     * Creates a new update loop.\n     * @param {Function} $handler The handler to execute with the update loop.\n     * @param {Window} $scope The global scope to use.\n     */\n    constructor($handler, $scope = window) {\n\n        this.$handler = $handler;\n        this.$scope = $scope;\n    }\n\n    /**\n     * Loops the update loop.\n     * @param {number} $timetick The tick duration (in ms).\n     * @private\n     */\n    $loop($timetick) {\n\n        const timeCurrent = performance.now();\n\n        if (typeof this.$timePrevious !== 'undefined') {\n\n            const timetickCurrent = timeCurrent - this.$timePrevious;\n            const timetickMinimum = $timetick;\n            const timetickSafe = Math.min(timetickMinimum, timetickCurrent);\n\n            this.$handler(timetickSafe);\n        }\n\n        this.$identifier = this.$scope.requestAnimationFrame(this.$loop.bind(this, $timetick));\n\n        this.$timePrevious = timeCurrent;\n    }\n\n    /**\n     * Initiates the update loop.\n     * @param {number} [$tickrateMinimum] The minimum acceptable number of ticks per virtual second (in ticks/s).\n     * @public\n     */\n    initiate($tickrateMinimum = 60) {\n\n        this.$loop(1000 / $tickrateMinimum);\n    }\n\n    /**\n     * Terminates the update loop.\n     * @public\n     */\n    terminate() {\n\n        if (typeof this.$identifier !== 'undefined') {\n\n            this.$scope.cancelAnimationFrame(this.$identifier);\n\n            this.$timePrevious = undefined;\n        }\n    }\n}\n\nexport {\n\n    Loop\n};\n\nexport default Loop;\n","/**\n * Static default shader sources.\n *\n * @example\n *\n * const sourceFragment = Shader.sourceFragment;\n * const sourceVertex = Shader.sourceVertex;\n */\nclass Shader {\n\n    /**\n     * @typedef {('vec2' | 'vec3')} typetypeattribute A type of attribute.\n     * @protected\n     *\n     * @memberof Shader\n     */\n\n    /**\n     * @typedef {('bool' | 'bool[]' | 'float' | 'float[]' | 'int' | 'int[]' | 'mat4' | 'mat4[]' | 'sampler2D' | 'vec2' | 'vec2[]' | 'vec3' | 'vec3[]')} typetypeuniform A type of uniform.\n     * @protected\n     *\n     * @memberof Shader\n     */\n\n    /**\n     * Stores the attributes needed by the shader program.\n     * @type {Object<string, typetypeattribute>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static attributes = {\n\n        'attributePosition': 'vec2',\n        'attributeUvmapping': 'vec2'\n    };\n\n    /**\n     * Stores the fragment shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourceFragment = (\n\n        'precision highp float;' +\n\n        'uniform sampler2D uniformTextureColor;' +\n        'uniform sampler2D uniformTextureOpacity;' +\n        'uniform vec2 uniformTranslationPointOfView;' +\n\n        'varying vec2 varyingUvmapping;' +\n\n        'void main(void) {' +\n\n            'vec4 colorTextureColor = texture2D(uniformTextureColor, varyingUvmapping);' +\n            'vec4 colorTextureOpacity = texture2D(uniformTextureOpacity, varyingUvmapping);' +\n\n            'float alpha = colorTextureColor.a * colorTextureOpacity.r;' +\n\n            'gl_FragColor = vec4(colorTextureColor.rgb, alpha);' +\n        '}'\n    );\n\n    /**\n     * Stores the vertex shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourceVertex = (\n\n        'attribute vec2 attributePosition;' +\n        'attribute vec2 attributeUvmapping;' +\n\n        'uniform vec2 uniformAspect;' +\n        'uniform vec2 uniformSize;' +\n        'uniform vec2 uniformTranslation;' +\n        'uniform vec2 uniformTranslationPointOfView;' +\n\n        'varying vec2 varyingUvmapping;' +\n\n        'void main(void) {' +\n\n            'varyingUvmapping = attributeUvmapping;' +\n\n            'vec2 position = (attributePosition * uniformSize + uniformTranslation);' +\n            'vec2 projection = 2.0 * (position - uniformTranslationPointOfView) / uniformAspect;' +\n\n            'gl_Position = vec4(projection, 0.0, 1.0);' +\n        '}'\n    );\n\n    /**\n     * Stores the uniforms needed by the shader program.\n     * @type {Object<string, typetypeuniform>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static uniforms = {\n\n        'uniformAspect': 'vec2',\n        'uniformSize': 'vec2',\n        'uniformTextureColor': 'sampler2D',\n        'uniformTextureOpacity': 'sampler2D',\n        'uniformTranslation': 'vec2',\n        'uniformTranslationPointOfView': 'vec2'\n    };\n}\n\nexport {\n\n    Shader\n};\n\nexport default Shader;\n","/**\n * Creates sounds.\n *\n * @example\n *\n * // minimal\n * const sound = new Sound({\n *\n *     $audio: audio\n * });\n *\n * @example\n *\n * // full\n * const sound = new Sound({\n *\n *     $audio: audio,\n *     $durationFadeOut: 125,\n *     $loop: false,\n *     $volume: 1\n * });\n */\nclass Sound {\n\n    /**\n     * Stores the audio source.\n     * @type {string}\n     * @private\n     */\n    $audio;\n\n    /**\n     * Stores fade out duration.\n     * @type {number}\n     * @private\n     */\n    $durationFadeOut;\n\n    /**\n     * Stores the loop status.\n     * @type {boolean}\n     * @private\n     */\n    $loop;\n\n    /**\n     * Stores the volume.\n     * @type {number}\n     * @private\n     */\n    $volume;\n\n    /**\n     * Gets the audio source.\n     * @type {string}\n     * @public\n     */\n    get audio() {\n\n        return this.$audio;\n    }\n\n    /**\n     * Gets fade out duration (in ms) (must be positive).\n     * @type {number}\n     * @public\n     */\n    get durationFadeOut() {\n\n        return this.$durationFadeOut;\n    }\n\n    /**\n     * Gets the loop status.\n     * @type {boolean}\n     * @public\n     */\n    get loop() {\n\n        return this.$loop;\n    }\n\n    /**\n     * Gets the volume.\n     * @type {number}\n     * @public\n     */\n    get volume() {\n\n        return this.$volume;\n    }\n\n    /**\n     * Creates a new sound.\n     * @param {Object} $parameters The given parameters.\n     * @param {string} $parameters.$audio The audio source.\n     * @param {number} [$parameters.$durationFadeOut] The fade out duration (in ms) (must be positive).\n     * @param {boolean} [$parameters.$loop] The loop status.\n     * @param {number} [$parameters.$volume] The volume.\n     */\n    constructor({$audio, $durationFadeOut = 1000 / 60, $loop = false, $volume = 1}) {\n\n        this.$audio = $audio;\n        this.$durationFadeOut = $durationFadeOut;\n        this.$loop = $loop;\n        this.$volume = $volume;\n    }\n}\n\nexport {\n\n    Sound\n};\n\nexport default Sound;\n","import {AABB, Vector2} from '../index.js';\n\n/**\n * Creates sprites.\n *\n * @example\n *\n * // minimal\n * const sprite = new Sprite({\n *\n *     $sizeTarget: new Vector2(32, 32),\n *     $textureColor: textureColor\n * });\n *\n * @example\n *\n * // full\n * const sprite = new Sprite({\n *\n *     $frameSource: new AABB(new Vector2(0, 0), new Vector2(1, 1)),\n *     $sizeTarget: new Vector2(32, 32),\n *     $textureColor: textureColor,\n *     $textureOpacity: textureOpacity\n * });\n */\nclass Sprite {\n\n    /**\n     * Stores the frame to use from the texture sources (with values in [0, 1] ranges).\n     * @type {AABB}\n     * @private\n     */\n    $frameSource;\n\n    /**\n     * Stores the serialized value of frame to use from the texture sources (with values in [0, 1] ranges).\n     * @type {string}\n     * @private\n     */\n    $frameSourceSerialized;\n\n    /**\n     * Stores the target size.\n     * @type {Vector2}\n     * @private\n     */\n    $sizeTarget;\n\n    /**\n     * Stores the color texture source.\n     * @type {string}\n     * @private\n     */\n    $textureColor;\n\n    /**\n     * Stores the opacity texture source.\n     * @type {string}\n     * @private\n     */\n    $textureOpacity;\n\n    /**\n     * Gets the frame to use from the texture sources.\n     * @type {AABB}\n     * @public\n     */\n    get frameSource() {\n\n        return this.$frameSource;\n    }\n\n    /**\n     * Gets the serialized value of the frame to use from the texture sources.\n     * @type {string}\n     * @public\n     */\n    get frameSourceSerialized() {\n\n        return this.$frameSourceSerialized;\n    }\n\n    /**\n     * Gets the target size.\n     * @type {Vector2}\n     * @public\n     */\n    get sizeTarget() {\n\n        return this.$sizeTarget;\n    }\n\n    /**\n     * Gets the color texture source.\n     * @type {string}\n     * @public\n     */\n    get textureColor() {\n\n        return this.$textureColor;\n    }\n\n    /**\n     * Gets the opacity texture source.\n     * @type {string}\n     * @public\n     */\n    get textureOpacity() {\n\n        return this.$textureOpacity;\n    }\n\n    /**\n     * Creates a new sprite.\n     * @param {Object} $parameters The given parameters.\n     * @param {AABB} [$parameters.$frameSource] The frame to use from the texture sources (with values in [0, 1] ranges) (if not specified then the full texture is used).\n     * @param {Vector2} $parameters.$sizeTarget The target size.\n     * @param {string} $parameters.$textureColor The color texture source.\n     * @param {string} [$parameters.$textureOpacity] The opacity texture source.\n     */\n    constructor({$frameSource = new AABB(new Vector2(0, 0), new Vector2(1, 1)), $sizeTarget, $textureColor, $textureOpacity}) {\n\n        this.$frameSource = $frameSource;\n        this.$sizeTarget = $sizeTarget;\n        this.$textureColor = $textureColor;\n        this.$textureOpacity = $textureOpacity;\n\n        this.$frameSourceSerialized = JSON.stringify([\n\n            [$frameSource.minimum.x, $frameSource.minimum.y],\n            [$frameSource.maximum.x, $frameSource.maximum.y]\n        ]);\n    }\n}\n\nexport {\n\n    Sprite\n};\n\nexport default Sprite;\n","/**\n * @module STORAGE\n */\n\n/**\n * Gets the stored data with the given name.\n * @param {string} $name The name of the stored data to get.\n * @returns {any}\n *\n * @memberof module:STORAGE\n */\nfunction get($name) {\n\n    const value = window.localStorage.getItem($name);\n\n    if (value === null) {\n\n        return undefined;\n    }\n\n    return JSON.parse(value);\n}\n\n/**\n * Checks if the storage has data stored with the given name.\n * @param {string} $name The name of the stored data to check.\n * @returns {boolean}\n *\n * @memberof module:STORAGE\n */\nfunction has($name) {\n\n    const value = window.localStorage.getItem($name);\n\n    if (value === null) {\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Removes the stored data with the given name.\n * @param {string} $name The name of the stored data to remove.\n *\n * @memberof module:STORAGE\n */\nfunction remove($name) {\n\n    window.localStorage.removeItem($name);\n}\n\n/**\n * Sets the data to store with the given name.\n * @param {string} $name The name of the data to store.\n * @param {any} $value The value of the data to store.\n *\n * @memberof module:STORAGE\n */\nfunction set($name, $value) {\n\n    const value = JSON.stringify($value);\n\n    if (typeof value === 'undefined') {\n\n        return;\n    }\n\n    window.localStorage.setItem($name, value);\n}\n\nexport {\n\n    get,\n    has,\n    remove,\n    set\n};\n","import {TimelineKeyframe} from '../index.js';\n\n/**\n * Creates timelines.\n *\n * @example\n *\n * const timeline = new Timeline(keyframes);\n * timeline.seekTimecode(0);\n * timeline.tick(timetick);\n */\nclass Timeline {\n\n    /**\n     * Stores the keyframes.\n     * @type {Array<TimelineKeyframe>}\n     * @private\n     */\n    $keyframes;\n\n    /**\n     * Stores the timecode.\n     * @type {number}\n     * @private\n     */\n    $timecode;\n\n    /**\n     * Gets the timecode.\n     * @type {number}\n     * @public\n     */\n    get timecode() {\n\n        return this.$timecode;\n    }\n\n    /**\n     * Creates a new timeline.\n     * @param {Array<TimelineKeyframe>} [$keyframes] The keyframes.\n     */\n    constructor($keyframes = []) {\n\n        this.$keyframes = [...$keyframes].sort(($a, $b) => ($a.timecode - $b.timecode));\n\n        this.$timecode = 0;\n    }\n\n    /**\n     * Seeks to the given name.\n     * @param {string} $name The name of the keyframe to seek to.\n     * @returns {this}\n     * @public\n     */\n    seekName($name) {\n\n        const result = this.$keyframes.find(($keyframe) => ($keyframe.name === $name));\n\n        if (typeof result !== 'undefined') {\n\n            this.seekTimecode(result.timecode);\n        }\n\n        return this;\n    }\n\n    /**\n     * Seeks to the given timecode.\n     * @param {number} $timecode The timecode to seek to (in ms).\n     * @returns {this}\n     * @public\n     */\n    seekTimecode($timecode) {\n\n        this.$timecode = $timecode;\n\n        this.$keyframes.forEach(($keyframe) => {\n\n            if ($keyframe.timecode !== this.$timecode) {\n\n                return;\n            }\n\n            $keyframe.onEnter(this);\n        });\n\n        return this;\n    }\n\n    /**\n     * Updates the timeline by one tick update.\n     * @param {number} $timetick The tick duration (in ms).\n     * @returns {this}\n     * @public\n     */\n    tick($timetick) {\n\n        if ($timetick === 0) {\n\n            return this;\n        }\n\n        const previous = this.$timecode;\n\n        this.$timecode += $timetick;\n\n        const current = this.$timecode;\n\n        this.$keyframes.forEach(($keyframe) => {\n\n            if ($keyframe.timecode <= previous) {\n\n                return;\n            }\n\n            if ($keyframe.timecode > current) {\n\n                return;\n            }\n\n            $keyframe.onEnter(this);\n        });\n\n        return this;\n    }\n}\n\nexport {\n\n    Timeline\n};\n\nexport default Timeline;\n","import {Timeline} from '../index.js';\n\n/**\n * Creates timeline keyframes.\n *\n * @example\n *\n * // minimal\n * const keyframe = new TimelineKeyframe({$onEnter, $timecode});\n *\n * @example\n *\n * // full\n * const keyframe = new TimelineKeyframe({$name, $onEnter, $timecode});\n */\nclass TimelineKeyframe {\n\n    /**\n     * @callback typehandlerenter A handler to execute when entering a keyframe.\n     * @param {Timeline} $timeline The reference timeline.\n     * @returns {void}\n     * @protected\n     *\n     * @memberof TimelineKeyframe\n     */\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Stores the keyframe entering handler.\n     * @type {typehandlerenter}\n     * @private\n     */\n    $onEnter;\n\n    /**\n     * Stores the timecode.\n     * @type {number}\n     * @private\n     */\n    $timecode;\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Gets the keyframe entering handler.\n     * @type {typehandlerenter}\n     * @public\n     */\n    get onEnter() {\n\n        return this.$onEnter;\n    }\n\n    /**\n     * Gets the timecode.\n     * @type {number}\n     * @public\n     */\n    get timecode() {\n\n        return this.$timecode;\n    }\n\n    /**\n     * Creates a new timeline keyframe.\n     * @param {Object} $parameters The given parameters.\n     * @param {string} [$parameters.$name] The name.\n     * @param {typehandlerenter} $parameters.$onEnter The keyframe entering handler.\n     * @param {number} $parameters.$timecode The timecode.\n     */\n    constructor({$name, $onEnter, $timecode}) {\n\n        this.$name = $name;\n        this.$onEnter = $onEnter;\n        this.$timecode = $timecode;\n    }\n}\n\nexport {\n\n    TimelineKeyframe\n};\n\nexport default TimelineKeyframe;\n","/**\n * @module UTILS\n */\n\n/**\n * Deduplicates the items of the given array (a new array is created).\n * @template {any} T The generic type of the values of the array.\n * @param {Array<T>} $array The array.\n * @returns {Array<T>}\n *\n * @memberof module:UTILS\n */\nfunction deduplicate($array) {\n\n    return Array.from(new Set($array));\n}\n\n/**\n * Extracts the given item from the given array.\n * @template {any} T The generic type of the values of the array.\n * @param {T} $item The item to remove.\n * @param {Array<T>} $array The array.\n * @returns {Array<T>}\n *\n * @memberof module:UTILS\n */\nfunction extract($item, $array) {\n\n    const index = $array.indexOf($item);\n\n    if (index === -1) {\n\n        return [];\n    }\n\n    return $array.splice(index, 1);\n}\n\n/**\n * Resolves when the browser is ready to perform an animation frame request.\n * @returns Promise<void>\n *\n * @memberof module:UTILS\n */\nfunction frame() {\n\n    /**\n     * @type {Promise<number>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        window.requestAnimationFrame($resolve);\n    });\n\n    return promise;\n}\n\n/**\n * Resolves when the user has interacted at least once since page load.\n * @returns {Promise<void>}\n *\n * @memberof module:UTILS\n */\nfunction ready() {\n\n    /**\n     * @type {Promise<void>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        /**\n         * @type {number}\n         */\n        let id;\n\n        const check = () => {\n\n            if (navigator.userActivation.hasBeenActive === false) {\n\n                id = window.requestAnimationFrame(check);\n\n                return;\n            }\n\n            window.cancelAnimationFrame(id);\n\n            $resolve();\n        };\n\n        id = window.requestAnimationFrame(check);\n    });\n\n    return promise;\n}\n\n/**\n * Resolves when the given delay has passed.\n * @param {number} $delay The delay (in ms).\n * @returns Promise<void>\n *\n * @memberof module:UTILS\n */\nfunction sleep($delay) {\n\n    /**\n     * @type {Promise<void>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        window.setTimeout($resolve, $delay);\n    });\n\n    return promise;\n}\n\n/**\n * Gets a new UUID.\n * @returns {string}\n *\n * @memberof module:UTILS\n */\nfunction uuid() {\n\n    return window.crypto.randomUUID();\n}\n\nexport {\n\n    deduplicate,\n    extract,\n    frame,\n    ready,\n    sleep,\n    uuid\n};\n","import {MATHEMATICS} from '../index.js';\n\n/**\n * Creates two-dimensional vectors.\n *\n * @example\n *\n * // without chaining\n * const vector = new Vector2(3, 2);\n * vector.add(new Vector2(1, 0));\n *\n * @example\n *\n * // with chaining\n * const vector = new Vector2(3, 2).add(new Vector2(1, 0));\n */\nclass Vector2 {\n\n    /**\n     * Stores the x component.\n     * @type {number}\n     * @private\n     */\n    $x;\n\n    /**\n     * Stores the y component.\n     * @type {number}\n     * @private\n     */\n    $y;\n\n    /**\n     * Gets the x component.\n     * @type {number}\n     * @public\n     */\n    get x() {\n\n        return this.$x;\n    }\n\n    /**\n     * Gets the y component.\n     * @type {number}\n     * @public\n     */\n    get y() {\n\n        return this.$y;\n    }\n\n    /**\n     * Creates a new two-dimensional vector.\n     * @param {number} $x The x component of the vector to create.\n     * @param {number} $y The y component of the vector to create.\n     */\n    constructor($x, $y) {\n\n        this.$x = $x;\n        this.$y = $y;\n    }\n\n    /**\n     * Creates a new vector from the given vector.\n     * @param {Vector2} $vector The given vector.\n     * @returns {Vector2}\n     * @public\n     * @static\n     */\n    static from($vector) {\n\n        return $vector.clone();\n    }\n\n    /**\n     * Adds the given vector.\n     * @param {Vector2} $vector The vector to add.\n     * @returns {this}\n     * @public\n     */\n    add($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x + $vector.x;\n        this.$y = y + $vector.y;\n\n        return this;\n    }\n\n    /**\n     * Clones the vector.\n     * @returns {Vector2}\n     * @public\n     */\n    clone() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        return new Vector2(x, y);\n    }\n\n    /**\n     * Checks the equality with the given vector.\n     * @param {Vector2} $vector The vector to check with.\n     * @returns {boolean}\n     * @public\n     */\n    equal($vector) {\n\n        return this.$x === $vector.x\n        && this.$y === $vector.y;\n    }\n\n    /**\n     * Gets the length of the vector.\n     * @returns {number}\n     * @public\n     */\n    length() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    /**\n     * Multiplies with the given vector.\n     * @param {Vector2} $vector The vector to multiply with.\n     * @returns {this}\n     * @public\n     */\n    multiply($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x * $vector.x;\n        this.$y = y * $vector.y;\n\n        return this;\n    }\n\n    /**\n     * Negates the vector.\n     * @returns {this}\n     * @public\n     */\n    negate() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = - x;\n        this.$y = - y;\n\n        return this;\n    }\n\n    /**\n     * Normalizes the vector.\n     * @returns {this}\n     * @public\n     */\n    normalize() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        let length = x * x + y * y;\n\n        if (length > 0) {\n\n            length = 1 / Math.sqrt(length);\n        }\n\n        this.$x = x * length;\n        this.$y = y * length;\n\n        return this;\n    }\n\n    /**\n     * Rotates the vector by the given angle.\n     * @param {number} $angle The angle of rotation to apply (in degrees) (clockwise).\n     * @returns {this}\n     * @public\n     */\n    rotate($angle) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        const radians = $angle * MATHEMATICS.RADIANS;\n\n        const cosine = Math.cos(radians);\n        const sine = Math.sin(radians);\n\n        this.$x = x * cosine - y * sine;\n        this.$y = x * sine + y * cosine;\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by the given scalar factor.\n     * @param {number} $factor The scalar factor to multiply with.\n     * @returns {this}\n     * @public\n     */\n    scale($factor) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x * $factor;\n        this.$y = y * $factor;\n\n        return this;\n    }\n\n    /**\n     * Subtracts the given vector.\n     * @param {Vector2} $vector The vector to subtract.\n     * @returns {this}\n     * @public\n     */\n    subtract($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x - $vector.x;\n        this.$y = y - $vector.y;\n\n        return this;\n    }\n}\n\nexport {\n\n    Vector2\n};\n\nexport default Vector2;\n","import {Quaternion} from '../index.js';\n\n/**\n * Creates three-dimensional vectors.\n *\n * @example\n *\n * // without chaining\n * const vector = new Vector3(3, 2, 1);\n * vector.add(new Vector3(1, 0, -1));\n *\n * @example\n *\n * // with chaining\n * const vector = new Vector3(3, 2, 1).add(new Vector3(1, 0, -1));\n */\nclass Vector3 {\n\n    /**\n     * Stores the x component.\n     * @type {number}\n     * @private\n     */\n    $x;\n\n    /**\n     * Stores the y component.\n     * @type {number}\n     * @private\n     */\n    $y;\n\n    /**\n     * Stores the z component.\n     * @type {number}\n     * @private\n     */\n    $z;\n\n    /**\n     * Gets the x component.\n     * @type {number}\n     * @public\n     */\n    get x() {\n\n        return this.$x;\n    }\n\n    /**\n     * Gets the y component.\n     * @type {number}\n     * @public\n     */\n    get y() {\n\n        return this.$y;\n    }\n\n    /**\n     * Gets the z component.\n     * @type {number}\n     * @public\n     */\n    get z() {\n\n        return this.$z;\n    }\n\n    /**\n     * Creates a new three-dimensional vector.\n     * @param {number} $x The x component of the vector to create.\n     * @param {number} $y The y component of the vector to create.\n     * @param {number} $z The z component of the vector to create.\n     */\n    constructor($x, $y, $z) {\n\n        this.$x = $x;\n        this.$y = $y;\n        this.$z = $z;\n    }\n\n    /**\n     * Creates a new vector from the given vector.\n     * @param {Vector3} $vector The given vector.\n     * @returns {Vector3}\n     * @public\n     * @static\n     */\n    static from($vector) {\n\n        return $vector.clone();\n    }\n\n    /**\n     * Adds the given vector.\n     * @param {Vector3} $vector The vector to add.\n     * @returns {this}\n     * @public\n     */\n    add($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x + $vector.x;\n        this.$y = y + $vector.y;\n        this.$z = z + $vector.z;\n\n        return this;\n    }\n\n    /**\n     * Clones the vector.\n     * @returns {Vector3}\n     * @public\n     */\n    clone() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        return new Vector3(x, y, z);\n    }\n\n    /**\n     * Checks the equality with the given vector.\n     * @param {Vector3} $vector The vector to check with.\n     * @returns {boolean}\n     * @public\n     */\n    equal($vector) {\n\n        return this.$x === $vector.x\n        && this.$y === $vector.y\n        && this.$z === $vector.z;\n    }\n\n    /**\n     * Gets the length of the vector.\n     * @returns {number}\n     * @public\n     */\n    length() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n\n    /**\n     * Multiplies with the given vector.\n     * @param {Vector3} $vector The vector to multiply with.\n     * @returns {this}\n     * @public\n     */\n    multiply($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x * $vector.x;\n        this.$y = y * $vector.y;\n        this.$z = z * $vector.z;\n\n        return this;\n    }\n\n    /**\n     * Negates the vector.\n     * @returns {this}\n     * @public\n     */\n    negate() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = - x;\n        this.$y = - y;\n        this.$z = - z;\n\n        return this;\n    }\n\n    /**\n     * Normalizes the vector.\n     * @returns {this}\n     * @public\n     */\n    normalize() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        let length = x * x + y * y + z * z;\n\n        if (length > 0) {\n\n            length = 1 / Math.sqrt(length);\n        }\n\n        this.$x = x * length;\n        this.$y = y * length;\n        this.$z = z * length;\n\n        return this;\n    }\n\n    /**\n     * Rotates the vector.\n     * @param {Quaternion} $quaternion The rotation to apply.\n     * @returns {this}\n     * @public\n     */\n    rotate($quaternion) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        const xq = $quaternion.x;\n        const yq = $quaternion.y;\n        const zq = $quaternion.z;\n        const wq = $quaternion.w;\n\n        let xu = yq * z - zq * y;\n        let yu = zq * x - xq * z;\n        let zu = xq * y - yq * x;\n\n        let xv = yq * zu - zq * yu;\n        let yv = zq * xu - xq * zu;\n        let zv = xq * yu - yq * xu;\n\n        const w = wq * 2;\n\n        xu *= w;\n        yu *= w;\n        zu *= w;\n\n        xv *= 2;\n        yv *= 2;\n        zv *= 2;\n\n        this.$x = x + xu + xv;\n        this.$y = y + yu + yv;\n        this.$z = z + zu + zv;\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by the given scalar factor.\n     * @param {number} $factor The scalar factor to multiply with.\n     * @returns {this}\n     * @public\n     */\n    scale($factor) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x * $factor;\n        this.$y = y * $factor;\n        this.$z = z * $factor;\n\n        return this;\n    }\n\n    /**\n     * Subtracts the given vector.\n     * @param {Vector3} $vector The vector to subtract.\n     * @returns {this}\n     * @public\n     */\n    subtract($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x - $vector.x;\n        this.$y = y - $vector.y;\n        this.$z = z - $vector.z;\n\n        return this;\n    }\n}\n\nexport {\n\n    Vector3\n};\n\nexport default Vector3;\n","/**\n * Creates vibrations.\n *\n * @example\n *\n * const vibration = new Vibration({\n *\n *     $duration: 200,\n *     $intensityFrequencyHigh: 0.8,\n *     $intensityFrequencyLow: 0.2\n * });\n */\nclass Vibration {\n\n    /**\n     * Stores the duration.\n     * @type {number}\n     * @private\n     */\n    $duration;\n\n    /**\n     * Stores the intensity of the high-frequency (weak) rumble motors.\n     * @type {number}\n     * @private\n     */\n    $intensityFrequencyHigh;\n\n    /**\n     * Stores the intensity of the low-frequency (strong) rumble motors.\n     * @type {number}\n     * @private\n     */\n    $intensityFrequencyLow;\n\n    /**\n     * Gets the duration (in ms).\n     * @type {number}\n     * @public\n     */\n    get duration() {\n\n        return this.$duration;\n    }\n\n    /**\n     * Gets the intensity of the high-frequency (weak) rumble motors (with value in [0, 1] range).\n     * @type {number}\n     * @public\n     */\n    get intensityFrequencyHigh() {\n\n        return this.$intensityFrequencyHigh;\n    }\n\n    /**\n     * Gets the intensity of the low-frequency (strong) rumble motors (with value in [0, 1] range).\n     * @type {number}\n     * @public\n     */\n    get intensityFrequencyLow() {\n\n        return this.$intensityFrequencyLow;\n    }\n\n    /**\n     * Creates a new vibration.\n     * @param {Object} $parameters The given parameters.\n     * @param {number} $parameters.$duration The duration (in ms).\n     * @param {number} $parameters.$intensityFrequencyHigh The intensity of the high-frequency (weak) rumble motors (with value in [0, 1] range).\n     * @param {number} $parameters.$intensityFrequencyLow The intensity of the low-frequency (strong) rumble motors (with value in [0, 1] range).\n     */\n    constructor({$duration, $intensityFrequencyHigh, $intensityFrequencyLow}) {\n\n        this.$duration = $duration;\n        this.$intensityFrequencyHigh = $intensityFrequencyHigh;\n        this.$intensityFrequencyLow = $intensityFrequencyLow;\n    }\n}\n\nexport {\n\n    Vibration\n};\n\nexport default Vibration;\n","import {Vibration} from '../index.js';\n\n/**\n * Creates gamepad events.\n *\n * @example\n *\n * const event = new EventGamepad(type, code, vibration);\n */\nclass EventGamepad extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the vibration.\n     * @type {Vibration}\n     * @private\n     */\n    $vibration;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the vibration.\n     * @type {Vibration}\n     * @public\n     */\n    get vibration() {\n\n        return this.$vibration;\n    }\n\n    /**\n     * Creates a new gamepad event.\n     * @param {('gamepadvibrate')} $type The event type.\n     * @param {string} $code The event code.\n     * @param {Vibration} $vibration The vibration.\n     */\n    constructor($type, $code, $vibration) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$vibration = $vibration;\n    }\n}\n\nexport {\n\n    EventGamepad\n};\n\nexport default EventGamepad;\n","/**\n * Creates gamepad analog events.\n *\n * @example\n *\n * const event = new EventGamepadAnalog(type, code, value);\n */\nclass EventGamepadAnalog extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the analog value.\n     * @type {number}\n     * @private\n     */\n    $value;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the analog value.\n     * @type {number}\n     * @public\n     */\n    get value() {\n\n        return this.$value;\n    }\n\n    /**\n     * Creates a new gamepad analog event.\n     * @param {('gamepadanalog')} $type The event type.\n     * @param {string} $code The event code.\n     * @param {number} $value The analog value.\n     */\n    constructor($type, $code, $value) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$value = $value;\n    }\n}\n\nexport {\n\n    EventGamepadAnalog\n};\n\nexport default EventGamepadAnalog;\n","/**\n * Creates gamepad digital events.\n *\n * @example\n *\n * const event = new EventGamepadDigital(type, code);\n */\nclass EventGamepadDigital extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Creates a new gamepad digital event.\n     * @param {('gamepadconnect' | 'gamepaddown' | 'gamepadup' | 'gamepadvibrate')} $type The event type.\n     * @param {string} $code The event code.\n     */\n    constructor($type, $code) {\n\n        super($type);\n\n        this.$code = $code;\n    }\n}\n\nexport {\n\n    EventGamepadDigital\n};\n\nexport default EventGamepadDigital;\n","import {EventGamepad, EventGamepadAnalog, EventGamepadDigital} from '../index.js';\n\n/**\n * The ordered list of the axes event codes of the gamepad.\n * @type {Array<Array<string>>}\n * @constant\n * @private\n */\nconst $GAMEPADAXES = [\n\n    ['StickLeftLeft', 'StickLeftRight'],\n    ['StickLeftUp', 'StickLeftDown'],\n    ['StickRightLeft', 'StickRightRight'],\n    ['StickRightUp', 'StickRightDown']\n];\n\n/**\n * The ordered list of the buttons event codes of the gamepad.\n * @type {Array<string>}\n * @constant\n * @private\n */\nconst $GAMEPADBUTTONS = [\n\n    'ClusterRightButtonBottom',\n    'ClusterRightButtonRight',\n    'ClusterRightButtonLeft',\n    'ClusterRightButtonTop',\n    'ClusterFrontButtonTopLeft',\n    'ClusterFrontButtonTopRight',\n    'ClusterFrontButtonBottomLeft',\n    'ClusterFrontButtonBottomRight',\n    'ClusterCenterButtonLeft',\n    'ClusterCenterButtonRight',\n    'StickLeftButton',\n    'StickRightButton',\n    'ClusterLeftButtonTop',\n    'ClusterLeftButtonBottom',\n    'ClusterLeftButtonLeft',\n    'ClusterLeftButtonRight',\n    'ClusterCenterButtonCenter'\n];\n\n/**\n * The threshold of the gampead axes.\n * @type {number}\n * @constant\n * @private\n */\nconst $THRESHOLDGAMEPADAXES = 0.5;\n\n/**\n * Creates gamepad extensions.\n * @hideconstructor\n * @public\n *\n * @example\n *\n * ExtensionGamepad.activate();\n */\nclass ExtensionGamepad {\n\n    /**\n     * Stores the activated status.\n     * @type {boolean}\n     * @private\n     * @static\n     */\n    static $activated = false;\n\n    /**\n     * Stores the index of the last connected gamepad.\n     * @type {number}\n     * @private\n     */\n    $indexLastConnected;\n\n    /**\n     * Stores the gamepad state.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    $stateGamepad;\n\n    /**\n     * Stores the unloaded status.\n     * @type {boolean}\n     * @private\n     */\n    $unloaded;\n\n    /**\n     * Creates a new gamepad extension.\n     * @private\n     */\n    constructor() {\n\n        this.$stateGamepad = {};\n        this.$unloaded = false;\n\n        [...$GAMEPADBUTTONS, ...$GAMEPADAXES.flat()].forEach(($code) => {\n\n            this.$stateGamepad[$code] = false;\n        });\n\n        window.addEventListener('beforeunload', this.$onBeforeUnload.bind(this));\n\n        window.addEventListener('gamepadconnected', this.$onConnect.bind(this));\n        window.addEventListener('gamepaddisconnected', this.$onDisconnect.bind(this));\n\n        window.addEventListener('gamepadvibrate', this.$onVibrate.bind(this));\n\n        window.requestAnimationFrame(this.$update.bind(this));\n    }\n\n    /**\n     * Activates the extension.\n     * @public\n     * @static\n     */\n    static activate() {\n\n        if (ExtensionGamepad.$activated === true) {\n\n            return;\n        }\n\n        new ExtensionGamepad();\n\n        ExtensionGamepad.$activated = true;\n    }\n\n    /**\n     * Called when the scope is about to be unloaded.\n     * @private\n     */\n    $onBeforeUnload() {\n\n        this.$unloaded = true;\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (typeof gamepad === 'undefined') {\n\n            return;\n        }\n\n        if (typeof gamepad.vibrationActuator === 'undefined') {\n\n            return;\n        }\n\n        gamepad.vibrationActuator.reset();\n    }\n\n    /**\n     * Called when the gamepad is connected.\n     * @param {GamepadEvent} $event The native gamepad connected event.\n     * @private\n     */\n    $onConnect($event) {\n\n        if ($event.gamepad.mapping !== 'standard') {\n\n            return;\n        }\n\n        Object.entries(this.$stateGamepad).forEach(([$code, $activated]) => {\n\n            if ($activated === true) {\n\n                this.$stateGamepad[$code] = false;\n\n                window.dispatchEvent(new EventGamepadDigital('gamepadup', $code));\n            }\n        });\n\n        this.$indexLastConnected = $event.gamepad.index;\n\n        window.dispatchEvent(new EventGamepadDigital('gamepadconnect', 'Connected'));\n    }\n\n    /**\n     * Called when the gamepad is disconnected.\n     * @param {GamepadEvent} $event The native gamepad disconnected event.\n     * @private\n     */\n    $onDisconnect($event) {\n\n        if ($event.gamepad.index !== this.$indexLastConnected) {\n\n            return;\n        }\n\n        Object.entries(this.$stateGamepad).forEach(([$code, $activated]) => {\n\n            if ($activated === true) {\n\n                this.$stateGamepad[$code] = false;\n\n                window.dispatchEvent(new EventGamepadDigital('gamepadup', $code));\n            }\n        });\n\n        this.$indexLastConnected = undefined;\n\n        window.dispatchEvent(new EventGamepadDigital('gamepadconnect', 'Disconnected'));\n    }\n\n    /**\n     * Called when a gamepad vibration is needed.\n     * @param {Event} $event The gamepad vibrate event.\n     * @private\n     */\n    $onVibrate($event) {\n\n        if (this.$unloaded === true) {\n\n            return;\n        }\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (typeof gamepad === 'undefined') {\n\n            return;\n        }\n\n        if (typeof gamepad.vibrationActuator === 'undefined') {\n\n            return;\n        }\n\n        if ($event instanceof EventGamepadDigital\n        && $event.code === 'VibrateEnd') {\n\n            gamepad.vibrationActuator.reset();\n\n            return;\n        }\n\n        if ($event instanceof EventGamepad\n        && $event.code === 'VibrateStart') {\n\n            gamepad.vibrationActuator.playEffect('dual-rumble', {\n\n                startDelay: 0,\n                duration: $event.vibration.duration,\n                strongMagnitude: $event.vibration.intensityFrequencyLow,\n                weakMagnitude: $event.vibration.intensityFrequencyHigh\n            });\n\n            return;\n        }\n    }\n\n    /**\n     * Updates the state of the gamepad.\n     * @private\n     */\n    $update() {\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (gamepad instanceof Gamepad) {\n\n            $GAMEPADBUTTONS.forEach(($button, $index) => {\n\n                const button = gamepad.buttons[$index];\n\n                if (button.pressed === true) {\n\n                    if (this.$stateGamepad[$button] === false) {\n\n                        this.$stateGamepad[$button] = true;\n                    }\n\n                    window.dispatchEvent(new EventGamepadDigital('gamepaddown', $button));\n                    window.dispatchEvent(new EventGamepadAnalog('gamepadanalog', $button, button.value));\n                }\n\n                else {\n\n                    if (this.$stateGamepad[$button] === true) {\n\n                        this.$stateGamepad[$button] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', $button));\n                    }\n                }\n            });\n\n            gamepad.axes.forEach(($direction, $index) => {\n\n                const [axeMinimum, axeMaximum] = $GAMEPADAXES[$index];\n\n                if ($direction <= - $THRESHOLDGAMEPADAXES) {\n\n                    if (this.$stateGamepad[axeMaximum] === true) {\n\n                        this.$stateGamepad[axeMaximum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMaximum));\n                    }\n\n                    this.$stateGamepad[axeMinimum] = true;\n                    window.dispatchEvent(new EventGamepadDigital('gamepaddown', axeMinimum));\n                    window.dispatchEvent(new EventGamepadAnalog('gamepadanalog', axeMinimum, ($direction - (Math.sign($direction) * $THRESHOLDGAMEPADAXES)) / (1 - $THRESHOLDGAMEPADAXES)));\n                }\n\n                else if ($direction >= $THRESHOLDGAMEPADAXES) {\n\n                    if (this.$stateGamepad[axeMinimum] === true) {\n\n                        this.$stateGamepad[axeMinimum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMinimum));\n                    }\n\n                    this.$stateGamepad[axeMaximum] = true;\n                    window.dispatchEvent(new EventGamepadDigital('gamepaddown', axeMaximum));\n                    window.dispatchEvent(new EventGamepadAnalog('gamepadanalog', axeMaximum, ($direction - (Math.sign($direction) * $THRESHOLDGAMEPADAXES)) / (1 - $THRESHOLDGAMEPADAXES)));\n                }\n\n                else {\n\n                    if (this.$stateGamepad[axeMinimum] === true) {\n\n                        this.$stateGamepad[axeMinimum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMinimum));\n                    }\n\n                    if (this.$stateGamepad[axeMaximum] === true) {\n\n                        this.$stateGamepad[axeMaximum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMaximum));\n                    }\n                }\n            });\n        }\n\n        window.requestAnimationFrame(this.$update.bind(this));\n    }\n}\n\nexport {\n\n    ExtensionGamepad\n};\n\nexport default ExtensionGamepad;\n","import {Stage} from '../index.js';\n\n/**\n * Creates actor systems.\n *\n * @example\n *\n * const system = new SystemActor();\n * system.tick({$stage, $timetick});\n */\nclass SystemActor {\n\n    /**\n     * Updates the system by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    tick({$stage, $timetick}) {\n\n        $stage.actors.forEach(($actor) => {\n\n            $actor.onTick($timetick);\n        });\n    }\n}\n\nexport {\n\n    SystemActor\n};\n\nexport default SystemActor;\n","import {Sound, Stage, UTILS} from '../index.js';\n\n/**\n * Creates audio systems.\n *\n * @example\n *\n * const system = new SystemAudio();\n */\nclass SystemAudio {\n\n    /**\n     * @typedef {Object} typedataaudio The audio data.\n     * @property {AudioBufferSourceNode} typeaudio.$audio The audio buffer source node.\n     * @property {GainNode} typeaudio.$gain The gain.\n     * @property {number} typeaudio.$startTime The start time of the audio in the audio context timeline.\n     * @private\n     */\n\n    /**\n     * Stores the safe delay before removing the audio context when the system terminates.\n     * @type {number}\n     * @public\n     * @readonly\n     * @static\n     */\n    static DELAYCONTEXTCLEARSAFE = 1000;\n\n    /**\n     * Stores the cache of the audio assets.\n     * @type {Map<string, AudioBuffer>}\n     * @private\n     */\n    $cache;\n\n    /**\n     * Stores the audio context.\n     * @type {AudioContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Stores the mapping between the playing sounds and their audio data.\n     * @type {Map<Sound, typedataaudio>}\n     * @private\n     */\n    $mappingSoundsPlaying;\n\n    /**\n     * Creates a new audio system.\n     */\n    constructor() {\n\n        this.$cache = new Map();\n        this.$context = new AudioContext();\n        this.$mappingSoundsPlaying = new Map();\n    }\n\n    /**\n     * Creates the values for the fade out curve.\n     * @param {number} $volume The volume of the sound.\n     * @returns {Array<number>}\n     * @private\n     */\n    $createValuesCurveFadeOut($volume) {\n\n        return [\n\n            - 1 + $volume * 1,\n            - 1 + $volume * 0\n        ];\n    }\n\n    /**\n     * Loads the audio from the given audio file content.\n     * @param {Response} $content The audio file content.\n     * @returns {Promise<AudioBuffer>}\n     * @private\n     */\n    $loadAudio($content) {\n\n        const promise = new Promise(($resolve) => {\n\n            $content.arrayBuffer()\n            .then(($bufferArray) => (this.$context.decodeAudioData($bufferArray))\n            .then(($bufferAudio) => {\n\n                this.$cache.set($content.url, $bufferAudio);\n\n                $resolve($bufferAudio);\n            }));\n        });\n\n        return promise;\n    }\n\n    /**\n     * Prepares the audio from the given audio source.\n     * @param {string} $audio The audio source.\n     * @private\n     */\n    $prepareAudio($audio) {\n\n        if (this.$cache.has($audio) === true) {\n\n            return;\n        }\n\n        this.$cache.set($audio, undefined);\n\n        fetch($audio)\n        .then(($content) => (this.$loadAudio($content)));\n    }\n\n    /**\n     * Terminates the given sound.\n     * @param {Sound} $sound The sound to terminate.\n     * @private\n     */\n    $terminateSound($sound) {\n\n        const {$audio, $gain, $startTime} = this.$mappingSoundsPlaying.get($sound);\n\n        if ($sound.loop === false\n        && this.$context.currentTime > $startTime + Math.max(0, $audio.buffer.duration - ($sound.durationFadeOut / 1000))) {\n\n            return\n        }\n\n        $gain.gain.cancelScheduledValues(this.$context.currentTime);\n        $gain.gain.setValueCurveAtTime(\n\n            this.$createValuesCurveFadeOut($sound.volume),\n            this.$context.currentTime,\n            Math.min($audio.buffer.duration, $sound.durationFadeOut / 1000)\n        );\n\n        this.$mappingSoundsPlaying.delete($sound);\n\n        $audio.onended = () => {\n\n            $audio.disconnect();\n            $gain.disconnect();\n        };\n    }\n\n    /**\n     * Checks if the system has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        return this.$cache.has($asset) === true;\n    }\n\n    /**\n     * Loads the audio from the given audio file content.\n     * @param {Response} $content The audio file content.\n     * @returns {Promise<AudioBuffer>}\n     * @public\n     */\n    loadAudio($content) {\n\n        if (this.$cache.has($content.url) === true) {\n\n            const promise = new Promise(($resolve) => {\n\n                const audio = this.$cache.get($content.url);\n\n                $resolve(audio);\n            });\n\n            return promise;\n        }\n\n        this.$cache.set($content.url, undefined);\n\n        return this.$loadAudio($content);\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        let delayFadeOut = 0;\n\n        Array.from(this.$mappingSoundsPlaying.keys()).forEach(($sound) => {\n\n            if ($sound.durationFadeOut > delayFadeOut) {\n\n                delayFadeOut = $sound.durationFadeOut;\n            }\n\n            this.$terminateSound($sound);\n        });\n\n        window.setTimeout(() => {\n\n            this.$context.close();\n            this.$context = undefined;\n\n        }, delayFadeOut + SystemAudio.DELAYCONTEXTCLEARSAFE);\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {Stage} $stage The stage on which to execute the system.\n     * @public\n     */\n    tick($stage) {\n\n        /**\n         * @type {Array<Sound>}\n         */\n        const previous = Array.from(this.$mappingSoundsPlaying.keys());\n\n        $stage.actors.forEach(($actor) => {\n\n            $actor.sounds.forEach(($sound) => {\n\n                if (this.$mappingSoundsPlaying.has($sound) === true) {\n\n                    UTILS.extract($sound, previous);\n\n                    return;\n                }\n\n                this.$prepareAudio($sound.audio);\n\n                if (typeof this.$cache.get($sound.audio) === 'undefined') {\n\n                    return;\n                }\n\n                const bufferAudio = this.$cache.get($sound.audio);\n\n                const audio = this.$context.createBufferSource();\n                audio.buffer = bufferAudio;\n                audio.connect(this.$context.destination);\n                audio.start(0);\n\n                const gain = this.$context.createGain();\n                gain.gain.value = $sound.volume - 1;\n                gain.connect(this.$context.destination);\n\n                audio.connect(gain);\n\n                this.$mappingSoundsPlaying.set($sound, {\n\n                    $audio: audio,\n                    $gain: gain,\n                    $startTime: this.$context.currentTime\n                });\n\n                if ($sound.loop === true) {\n\n                    audio.loop = true;\n\n                    return;\n                }\n\n                gain.gain.setValueCurveAtTime(\n\n                    this.$createValuesCurveFadeOut($sound.volume),\n                    this.$context.currentTime + Math.max(0, audio.buffer.duration - ($sound.durationFadeOut / 1000)),\n                    Math.min(audio.buffer.duration, $sound.durationFadeOut / 1000)\n                );\n\n                audio.onended = () => {\n\n                    audio.disconnect();\n                    gain.disconnect();\n\n                    this.$mappingSoundsPlaying.delete($sound);\n\n                    $actor.removeSound($sound);\n                    $actor.onSoundFinish($sound);\n                };\n            });\n        });\n\n        previous.forEach(($sound) => {\n\n            this.$terminateSound($sound);\n        });\n    }\n}\n\nexport {\n\n    SystemAudio\n};\n\nexport default SystemAudio;\n","import {AABB, Actor, COLLIDERTYPES, Stage, Vector2} from '../index.js';\n\n/**\n * Creates collision systems.\n *\n * @example\n *\n * const system = new SystemCollision();\n */\nclass SystemCollision {\n\n    /**\n     * @typedef {Array<Actor>} typepairactor A pair of actors.\n     * @private\n     */\n\n    /**\n     * Stores the current collision pairs.\n     * @type {Array<typepairactor>}\n     * @private\n     */\n    $current;\n\n    /**\n     * Stores the previous collision pairs.\n     * @type {Array<typepairactor>}\n     * @private\n     */\n    $previous;\n\n    /**\n     * Creates a new collision system.\n     */\n    constructor() {\n\n        this.$current = [];\n        this.$previous = [];\n    }\n\n    /**\n     * Checks if a collision previously existed between two given actors.\n     * @param {Actor} $dynamic The first actor to check on.\n     * @param {Actor} $inert The second actor to check with.\n     * @returns {boolean}\n     * @private\n     */\n    $hasCollisionPrevious($dynamic, $inert) {\n\n        const result = this.$previous.find(([$dynamicPrevious, $inertPrevious]) => {\n\n            return $dynamic === $dynamicPrevious\n            && $inert === $inertPrevious;\n\n        });\n\n        return typeof result !== 'undefined';\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {Stage} $stage The stage on which to execute the system.\n     * @public\n     */\n    tick($stage) {\n\n        /**\n         * @typedef {Object} typepaircollision A pair of candidates for collision.\n         * @property {number} typepaircollision.$distance The manhattan distance between the two actors.\n         * @property {Actor} typepaircollision.$dynamic The first actor.\n         * @property {Actor} typepaircollision.$inert The second actor.\n         * @private\n         */\n\n        /**\n         * @type {Array<typepaircollision>}\n         */\n        const pairs = [];\n\n        /**\n         * @type {Array<Actor>}\n         */\n        const dynamics = [];\n\n        /**\n         * @type {Array<Actor>}\n         */\n        const kinetics = [];\n\n        /**\n         * @type {Array<Actor>}\n         */\n        const statics = [];\n\n        $stage.actors.forEach(($actor) => {\n\n            if ($actor.hasCollider() === false) {\n\n                return;\n            }\n\n            switch ($actor.collider.type) {\n\n                case COLLIDERTYPES.DYNAMIC: {\n\n                    dynamics.push($actor);\n\n                    break;\n                }\n\n                case COLLIDERTYPES.KINETIC: {\n\n                    kinetics.push($actor);\n\n                    break;\n                }\n\n                case COLLIDERTYPES.STATIC: {\n\n                    statics.push($actor);\n\n                    break;\n                }\n            }\n        });\n\n        const inerts = [...statics, ...kinetics];\n\n        if (inerts.length === 0) {\n\n            return;\n        }\n\n        dynamics.forEach(($dynamic) => {\n\n            const boundariesDynamic = $dynamic.collider.boundaries.clone().translate($dynamic.translation);\n            const centerBoundariesDynamic = new AABB(boundariesDynamic.center, boundariesDynamic.center);\n\n            inerts.forEach(($inert) => {\n\n                const boundariesInert = $inert.collider.boundaries.clone().translate($inert.translation);\n\n                const distance = AABB.distanceManhattan(centerBoundariesDynamic, boundariesInert);\n\n                pairs.push({\n\n                    $distance: distance,\n                    $dynamic: $dynamic,\n                    $inert: $inert\n                });\n            });\n        });\n\n        pairs.sort(($a, $b) => {\n\n            return $a.$distance - $b.$distance;\n        });\n\n        pairs.forEach(($pair) => {\n\n            const {$dynamic, $inert} = $pair;\n\n            if ($stage.hasActor($dynamic) === false) {\n\n                return;\n            }\n\n            if ($stage.hasActor($inert) === false) {\n\n                return;\n            }\n\n            const boundariesDynamic = $dynamic.collider.boundaries.clone().translate($dynamic.translation);\n            const boundariesInert = $inert.collider.boundaries.clone().translate($inert.translation);\n\n            const overlapX = AABB.overlapX(boundariesDynamic, boundariesInert);\n\n            if (overlapX <= 0) {\n\n                return;\n            }\n\n            const overlapY = AABB.overlapY(boundariesDynamic, boundariesInert);\n\n            if (overlapY <= 0) {\n\n                return;\n            }\n\n            this.$current.push([$dynamic, $inert]);\n\n            const directionX = Math.sign($inert.translation.x - $dynamic.translation.x);\n            const directionY = Math.sign($inert.translation.y - $dynamic.translation.y);\n\n            const checkMinimumX = (overlapX <= overlapY);\n            const checkMinimumY = (overlapY <= overlapX);\n\n            if ($dynamic.collider.traversable === false\n            && $inert.collider.traversable === false) {\n\n                const resolverDynamic = new Vector2(\n\n                    checkMinimumX ? - directionX * overlapX : 0,\n                    checkMinimumY ? - directionY * overlapY : 0\n                );\n\n                $dynamic.translate(resolverDynamic);\n            }\n\n            const originDynamicEast = checkMinimumX === true && directionX === 1;\n            const originDynamicNorth = checkMinimumY === true && directionY === 1;\n            const originDynamicSouth = checkMinimumY === true && directionY === -1;\n            const originDynamicWest = checkMinimumX === true && directionX === -1;\n\n            if (this.$hasCollisionPrevious($dynamic, $inert) === false) {\n\n                $dynamic.onCollideEnter({\n\n                    $actor: $inert,\n                    $east: originDynamicEast,\n                    $north: originDynamicNorth,\n                    $south: originDynamicSouth,\n                    $west: originDynamicWest\n                });\n\n                $inert.onCollideEnter({\n\n                    $actor: $dynamic,\n                    $east: originDynamicWest,\n                    $north: originDynamicSouth,\n                    $south: originDynamicNorth,\n                    $west: originDynamicEast\n                });\n            }\n\n            $dynamic.onCollide({\n\n                $actor: $inert,\n                $east: originDynamicEast,\n                $north: originDynamicNorth,\n                $south: originDynamicSouth,\n                $west: originDynamicWest\n            });\n\n            $inert.onCollide({\n\n                $actor: $dynamic,\n                $east: originDynamicWest,\n                $north: originDynamicSouth,\n                $south: originDynamicNorth,\n                $west: originDynamicEast\n            });\n        });\n\n        this.$previous.filter(([$dynamicPrevious, $inertPrevious]) => {\n\n            const result = this.$current.find(([$dynamic, $inert]) => {\n\n                return $dynamic === $dynamicPrevious\n                && $inert === $inertPrevious;\n            });\n\n            return typeof result === 'undefined';\n\n        }).forEach(([$dynamicPrevious, $inertPrevious]) => {\n\n            $dynamicPrevious.onCollideLeave($inertPrevious);\n            $inertPrevious.onCollideLeave($dynamicPrevious);\n        });\n\n        this.$previous = [...this.$current];\n        this.$current = [];\n    }\n}\n\nexport {\n\n    SystemCollision\n};\n\nexport default SystemCollision;\n","import {EventGamepadAnalog, EventGamepadDigital} from '../index.js';\n\n/**\n * Creates input systems.\n *\n * @example\n *\n * const system = new SystemInput({$container});\n * system.initiate();\n * system.tick();\n */\nclass SystemInput {\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the input events.\n     * @type {Array<Event>}\n     * @private\n     */\n    $events;\n\n    /**\n     * Stores the initiated status.\n     * @type {boolean}\n     * @private\n     */\n    $initiated;\n\n    /**\n     * Stores the state of the accepted inputs.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    $inputs;\n\n    /**\n     * Stores the state of the accepted analog inputs.\n     * @type {Object<string, number>}\n     * @private\n     */\n    $inputsAnalog;\n\n    /**\n     * Creates a new input system.\n     * @param {Object} $parameters The given parameters.\n     * @param {HTMLElement} $parameters.$container The container on which to attach input events.\n     */\n    constructor({$container}) {\n\n        this.$container = $container;\n\n        this.$events = [];\n        this.$initiated = false;\n        this.$inputs = {};\n        this.$inputsAnalog = {};\n    }\n\n    /**\n     * Stacks the input events for the next tick.\n     * @param {Event} $event The input event to stack.\n     * @private\n     */\n    $stack($event) {\n\n        $event.preventDefault();\n\n        this.$events.push($event);\n    }\n\n    /**\n     * Gets the current input state value of the given digital input.\n     * @param {string} $input The event code of the given digital input.\n     * @returns {boolean}\n     * @public\n     */\n    getInput($input) {\n\n        const input = this.$inputs[$input];\n\n        if (typeof input === 'undefined') {\n\n            return false;\n        }\n\n        return input;\n    }\n\n    /**\n     * Gets the current input state value of the given analog input.\n     * @param {string} $input The event code of the given analog input.\n     * @returns {number}\n     * @public\n     */\n    getInputAnalog($input) {\n\n        const input = this.$inputsAnalog[$input];\n\n        if (typeof input === 'undefined') {\n\n            return 0;\n        }\n\n        return input;\n    }\n\n    /**\n     * Initiates the system.\n     * @public\n     */\n    initiate() {\n\n        if (this.$initiated === true) {\n\n            return;\n        }\n\n        window.addEventListener('blur', this.$stack.bind(this));\n\n        window.addEventListener('contextmenu', this.$stack.bind(this));\n\n        window.addEventListener('gamepadanalog', this.$stack.bind(this));\n        window.addEventListener('gamepadconnect', this.$stack.bind(this));\n        window.addEventListener('gamepaddown', this.$stack.bind(this));\n        window.addEventListener('gamepadup', this.$stack.bind(this));\n\n        this.$container.addEventListener('keydown', this.$stack.bind(this));\n        this.$container.addEventListener('keyup', this.$stack.bind(this));\n\n        this.$initiated = true;\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        if (this.$initiated === false) {\n\n            return;\n        }\n\n        window.removeEventListener('blur', this.$stack.bind(this));\n\n        window.removeEventListener('contextmenu', this.$stack.bind(this));\n\n        window.removeEventListener('gamepadanalog', this.$stack.bind(this));\n        window.removeEventListener('gamepadconnect', this.$stack.bind(this));\n        window.removeEventListener('gamepaddown', this.$stack.bind(this));\n        window.removeEventListener('gamepadup', this.$stack.bind(this));\n\n        this.$container.removeEventListener('keydown', this.$stack.bind(this));\n        this.$container.removeEventListener('keyup', this.$stack.bind(this));\n\n        this.$initiated = false;\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @public\n     */\n    tick() {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        while (this.$events.length > 0) {\n\n            const $event = this.$events.shift();\n\n            if ($event.type === 'blur') {\n\n                this.$inputs = {};\n                this.$inputsAnalog = {};\n            }\n\n            else if ($event instanceof EventGamepadAnalog\n            && $event.type === 'gamepadanalog') {\n\n                this.$inputsAnalog[$event.code] = $event.value;\n            }\n\n            else if ($event instanceof EventGamepadDigital\n            && $event.type === 'gamepaddown') {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof EventGamepadDigital\n            && $event.type === 'gamepadup') {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n\n            else if ($event instanceof KeyboardEvent\n            && $event.type === 'keydown') {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof KeyboardEvent\n            && $event.type === 'keyup') {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n        }\n    }\n}\n\nexport {\n\n    SystemInput\n};\n\nexport default SystemInput;\n","import {Shader, Sprite, Stage, Vector2, Vector3} from '../index.js';\n\n/**\n * Creates render systems.\n *\n * @example\n *\n * const system = new SystemRender({$color, $container, $resolution});\n * system.initiate();\n * system.tick($stage);\n */\nclass SystemRender {\n\n    /**\n     * Stores the texture unit for the textures to preload.\n     * @type {0}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNITTEXTURE0 = 0;\n\n    /**\n     * Stores the texture unit for the color textures.\n     * @type {1}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNITTEXTURE1 = 1;\n\n    /**\n     * Stores the texture unit for the opacity textures.\n     * @type {2}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNITTEXTURE2 = 2;\n\n    /**\n     * Stores the common vertices positions of the sprites.\n     * @type {WebGLBuffer}\n     * @private\n     */\n    $bufferPosition;\n\n    /**\n     * Stores the cache of the texture assets.\n     * @type {Map<string, WebGLTexture>}\n     * @private\n     */\n    $cache;\n\n    /**\n     * Stores the canvas element.\n     * @type {HTMLCanvasElement}\n     * @private\n     */\n    $canvas;\n\n    /**\n     * Stores the background color.\n     * @type {Vector3}\n     * @private\n     */\n    $color;\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the canvas context.\n     * @type {WebGL2RenderingContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Stores the number of indices of the vertices positions of the sprites.\n     * @type {number}\n     * @private\n     */\n    $indices;\n\n    /**\n     * Stores the initiated status.\n     * @type {boolean}\n     * @private\n     */\n    $initiated;\n\n    /**\n     * Stores the shader program attribute locations.\n     * @type {Object<string, number>}\n     * @private\n     */\n    $locationsAttribute;\n\n    /**\n     * Stores the shader program uniform locations.\n     * @type {Object<string, WebGLUniformLocation>}\n     * @private\n     */\n    $locationsUniform;\n\n    /**\n     * Stores the mapping between the texture sources and their uvmappings.\n     * @type {Object<string, WebGLBuffer>}\n     * @private\n     */\n    $mappingBuffersUv;\n\n    /**\n     * Stores the shader program.\n     * @type {WebGLProgram}\n     * @private\n     */\n    $program;\n\n    /**\n     * Stores the ResizeObserver.\n     * @type {ResizeObserver}\n     * @private\n     */\n    $resizeOberver;\n\n    /**\n     * Stores the resolution.\n     * @type {Vector2}\n     * @private\n     */\n    $resolution;\n\n    /**\n     * Stores the texture of the default color texture source.\n     * @type {WebGLTexture}\n     * @private\n     */\n    $textureColorDefault;\n\n    /**\n     * Stores the texture of the default opacity texture source.\n     * @type {WebGLTexture}\n     * @private\n     */\n    $textureOpacityDefault;\n\n    /**\n     * Creates a new render system.\n     * @param {Object} $parameters The given parameters.\n     * @param {Vector3} [$parameters.$color] The rendering background color to use.\n     * @param {HTMLElement} $parameters.$container The container on which to attach the canvas.\n     * @param {Vector2} $parameters.$resolution The rendering resolution to use.\n     */\n    constructor({$color = new Vector3(0, 0, 0), $container, $resolution}) {\n\n        this.$color = $color;\n        this.$container = $container;\n        this.$resolution = $resolution;\n\n        this.$cache = new Map();\n        this.$canvas = document.createElement('canvas');\n        this.$canvas.style.width = '100%';\n        this.$canvas.style.height = '100%';\n        this.$canvas.style.display = 'block';\n        this.$canvas.style.outline = '0';\n        this.$canvas.style.imageRendering = 'pixelated';\n        this.$context = this.$canvas.getContext('webgl2', {\n\n            'antialias': false\n        });\n\n        $container.appendChild(this.$canvas);\n\n        this.$resize();\n\n        this.$initiated = false;\n    }\n\n    /**\n     * Creates the common vertices positions of the sprites.\n     * @private\n     */\n    $createBufferPositions() {\n\n        const positions = [\n\n            -0.5, -0.5,\n            -0.5, 0.5,\n            0.5, 0.5,\n            0.5, -0.5\n        ];\n\n        const bufferPosition = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ARRAY_BUFFER, bufferPosition);\n        this.$context.bufferData(this.$context.ARRAY_BUFFER, new Float32Array(positions), this.$context.STATIC_DRAW);\n\n        this.$bufferPosition = bufferPosition;\n    }\n\n    /**\n     * Creates the uvmapping from the given sprite.\n     * @param {Sprite} $sprite The sprite.\n     * @private\n     */\n    $createBufferUvsOnce($sprite) {\n\n        if (typeof this.$mappingBuffersUv[$sprite.frameSourceSerialized] !== 'undefined') {\n\n            return;\n        }\n\n        const frame = $sprite.frameSource;\n\n        const uvs = [\n\n            frame.minimum.x, frame.maximum.y,\n            frame.minimum.x, frame.minimum.y,\n            frame.maximum.x, frame.minimum.y,\n            frame.maximum.x, frame.maximum.y\n        ];\n\n        const bufferUv = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ARRAY_BUFFER, bufferUv);\n        this.$context.bufferData(this.$context.ARRAY_BUFFER, new Float32Array(uvs), this.$context.STATIC_DRAW);\n\n        this.$mappingBuffersUv[$sprite.frameSourceSerialized] = bufferUv;\n    }\n\n    /**\n     * Creates the indices of the vertices positions of the sprites.\n     * @private\n     */\n    $createIndices() {\n\n        const indices = [\n\n            0,\n            1,\n            2,\n            3\n        ];\n\n        const bufferIndex = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ELEMENT_ARRAY_BUFFER, bufferIndex);\n        this.$context.bufferData(this.$context.ELEMENT_ARRAY_BUFFER, new Uint32Array(indices), this.$context.STATIC_DRAW);\n\n        this.$indices = indices.length;\n    }\n\n    /**\n     * Creates the attributes locations to use by the shader program.\n     * @param {WebGLProgram} $program The shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createLocationsAttribute($program, $shader) {\n\n        Object.keys($shader.attributes).forEach(($name) => {\n\n            this.$locationsAttribute[$name] = this.$context.getAttribLocation($program, $name);\n        });\n    }\n\n    /**\n     * Creates the uniform locations to use by the shader program.\n     * @param {WebGLProgram} $program The shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createLocationsUniform($program, $shader) {\n\n        Object.keys($shader.uniforms).forEach(($name) => {\n\n            this.$locationsUniform[$name] = this.$context.getUniformLocation($program, $name);\n        });\n    }\n\n    /**\n     * Creates the shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createProgram($shader) {\n\n        const shaderVertex = this.$context.createShader(this.$context.VERTEX_SHADER);\n        this.$context.shaderSource(shaderVertex, $shader.sourceVertex);\n        this.$context.compileShader(shaderVertex);\n\n        const shaderFragment = this.$context.createShader(this.$context.FRAGMENT_SHADER);\n        this.$context.shaderSource(shaderFragment, $shader.sourceFragment);\n        this.$context.compileShader(shaderFragment);\n\n        this.$program = this.$context.createProgram();\n        this.$context.attachShader(this.$program, shaderVertex);\n        this.$context.attachShader(this.$program, shaderFragment);\n        this.$context.linkProgram(this.$program);\n    }\n\n    /**\n     * Creates a texture from the given bitmap texture data.\n     * @param {ImageBitmap} $textureBitmap The bitmap texture data.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {WebGLTexture}\n     * @private\n     */\n    $createTexture($textureBitmap, $unitTexture) {\n\n        const texture = this.$context.createTexture();\n\n        this.$context.activeTexture($unitTexture);\n        this.$context.bindTexture(this.$context.TEXTURE_2D, texture);\n\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_MIN_FILTER, this.$context.NEAREST);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_MAG_FILTER, this.$context.NEAREST);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_WRAP_S, this.$context.CLAMP_TO_EDGE);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_WRAP_T, this.$context.CLAMP_TO_EDGE);\n\n        this.$context.texImage2D(this.$context.TEXTURE_2D, 0, this.$context.RGBA, this.$context.RGBA, this.$context.UNSIGNED_BYTE, $textureBitmap);\n\n        return texture;\n    }\n\n    /**\n     * Creates a default texture (1 pixel texture).\n     * @param {Vector3} $color The target texture unit.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {WebGLTexture}\n     * @private\n     */\n    $createTextureDefault($color, $unitTexture) {\n\n        const texture = this.$context.createTexture();\n\n        this.$context.activeTexture(this.$context.TEXTURE0 + $unitTexture);\n        this.$context.bindTexture(this.$context.TEXTURE_2D, texture);\n        this.$context.texImage2D(this.$context.TEXTURE_2D, 0, this.$context.RGBA, 1, 1, 0, this.$context.RGBA, this.$context.UNSIGNED_BYTE, new Uint8Array([$color.x, $color.y, $color.z, 255]));\n\n        return texture;\n    }\n\n    /**\n     * Loads the texture from the given texture file content.\n     * @param {Response} $content The texture file content.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {Promise<WebGLTexture>}\n     * @private\n     */\n    $loadTexture($content, $unitTexture) {\n\n        const promise = new Promise(($resolve) => {\n\n            $content.blob()\n            .then(($blob) => (createImageBitmap($blob)))\n            .then(($textureBitmap) => {\n\n                const texture = this.$createTexture($textureBitmap, $unitTexture);\n\n                this.$cache.set($content.url, texture);\n\n                $resolve(texture);\n            });\n        });\n\n        return promise;\n    }\n\n    /**\n     * Prepares the texture from the given texture source.\n     * @param {string} $texture The texture source.\n     * @param {number} $unitTexture The target texture unit.\n     * @private\n     */\n    $prepareTexture($texture, $unitTexture) {\n\n        if (this.$cache.has($texture) === true) {\n\n            return;\n        }\n\n        this.$cache.set($texture, undefined);\n\n        fetch($texture)\n        .then(($content) => (this.$loadTexture($content, $unitTexture)));\n    }\n\n    /**\n     * Called when the scope is about to be unloaded.\n     * @private\n     */\n    $onBeforeUnload() {\n\n        this.$context.getExtension('WEBGL_lose_context').loseContext();\n    }\n\n    /**\n     * Resets the canvas.\n     * @param {number} $width The context viewport width.\n     * @param {number} $height The context viewport height.\n     * @private\n     */\n    $resetCanvas($width, $height) {\n\n        this.$context.clearColor(this.$color.x, this.$color.y, this.$color.z, 1);\n        this.$context.clearDepth(1);\n\n        this.$context.viewport(0, 0, $width, $height);\n        this.$context.clear(this.$context.COLOR_BUFFER_BIT | this.$context.DEPTH_BUFFER_BIT);\n    }\n\n    /**\n     * Resizes the rendering context.\n     * @private\n     */\n    $resize() {\n\n        const width = this.$resolution.x;\n        const height = this.$resolution.y;\n\n        const widthContext = Math.max(width, Math.floor(height * this.$canvas.clientWidth / this.$canvas.clientHeight));\n        const heightContext = Math.max(height, Math.floor(width * this.$canvas.clientHeight / this.$canvas.clientWidth));\n\n        this.$canvas.setAttribute('width', '' + Math.floor(widthContext / 2) * 2);\n        this.$canvas.setAttribute('height', '' + Math.floor(heightContext / 2) * 2);\n    }\n\n    /**\n     * Sends an attribute to the shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @param {string} $name The name of the attribute.\n     * @param {any} $value The value of the attribute.\n     * @private\n     */\n    $sendAttribute($shader, $name, $value) {\n\n        if (typeof $shader.attributes[$name] === 'undefined') {\n\n            return;\n        }\n\n        const type = $shader.attributes[$name];\n\n        switch (type) {\n\n            case 'vec2': {\n\n                this.$context.bindBuffer(this.$context.ARRAY_BUFFER, $value);\n                const location = this.$locationsAttribute[$name];\n                this.$context.vertexAttribPointer(location, 2, this.$context.FLOAT, false, 0, 0);\n                this.$context.enableVertexAttribArray(location);\n\n                break;\n            }\n\n            case 'vec3': {\n\n                this.$context.bindBuffer(this.$context.ARRAY_BUFFER, $value);\n                const location = this.$locationsAttribute[$name];\n                this.$context.vertexAttribPointer(location, 3, this.$context.FLOAT, false, 0, 0);\n                this.$context.enableVertexAttribArray(location);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Sends a uniform to the shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @param {string} $name The name of the uniform.\n     * @param {any} $value The value of the uniform.\n     * @private\n     */\n    $sendUniform($shader, $name, $value) {\n\n        if (typeof $shader.uniforms[$name] === 'undefined') {\n\n            return;\n        }\n\n        const type = $shader.uniforms[$name];\n\n        switch (type) {\n\n            case 'bool':\n            case 'int':\n            case 'sampler2D': {\n\n                this.$context.uniform1i(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'bool[]':\n            case 'int[]': {\n\n                this.$context.uniform1iv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'float': {\n\n                this.$context.uniform1f(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'float[]': {\n\n                this.$context.uniform1fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'mat4':\n            case 'mat4[]': {\n\n                this.$context.uniformMatrix4fv(this.$locationsUniform[$name], false, $value);\n\n                break;\n            }\n\n            case 'vec2':\n            case 'vec2[]': {\n\n                this.$context.uniform2fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'vec3':\n            case 'vec3[]': {\n\n                this.$context.uniform3fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Checks if the system has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        return this.$cache.has($asset) === true;\n    }\n\n    /**\n     * Initiates the system.\n     * @public\n     */\n    initiate() {\n\n        if (this.$initiated === true) {\n\n            return;\n        }\n\n        this.$indices = 0;\n        this.$locationsAttribute = {};\n        this.$locationsUniform = {};\n        this.$mappingBuffersUv = {};\n\n        this.$context.frontFace(this.$context.CW);\n        this.$context.enable(this.$context.CULL_FACE);\n        this.$context.cullFace(this.$context.BACK);\n\n        this.$context.enable(this.$context.BLEND);\n        this.$context.blendFunc(this.$context.SRC_ALPHA, this.$context.ONE_MINUS_SRC_ALPHA);\n\n        this.$createProgram(Shader);\n\n        this.$context.useProgram(this.$program);\n\n        this.$createLocationsUniform(this.$program, Shader);\n        this.$createLocationsAttribute(this.$program, Shader);\n\n        this.$createBufferPositions();\n        this.$createIndices();\n\n        this.$textureColorDefault = this.$createTextureDefault(new Vector3(127, 127, 127), SystemRender.UNITTEXTURE1);\n        this.$textureOpacityDefault = this.$createTextureDefault(new Vector3(255, 255, 255), SystemRender.UNITTEXTURE2);\n\n        this.$resizeOberver = new ResizeObserver(this.$resize.bind(this));\n        this.$resizeOberver.observe(this.$container);\n\n        window.addEventListener('beforeunload', this.$onBeforeUnload.bind(this));\n\n        this.$initiated = true;\n    }\n\n    /**\n     * Loads the texture from the given texture file content.\n     * @param {Response} $content The texture file content.\n     * @returns {Promise<WebGLTexture>}\n     * @public\n     */\n    loadTexture($content) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        if (this.$cache.has($content.url) === true) {\n\n            const promise = new Promise(($resolve) => {\n\n                const texture = this.$cache.get($content.url);\n\n                $resolve(texture);\n            });\n\n            return promise;\n        }\n\n        this.$cache.set($content.url, undefined);\n\n        return this.$loadTexture($content, this.$context.TEXTURE0 + SystemRender.UNITTEXTURE0);\n    }\n\n    /**\n     * Sets the rendering background color.\n     * @param {Vector3} $color The rendering background color to set.\n     * @public\n     */\n    setColor($color) {\n\n        this.$color = $color;\n    }\n\n    /**\n     * Sets the rendering resolution.\n     * @param {Vector2} $resolution The rendering resolution to set.\n     * @public\n     */\n    setResolution($resolution) {\n\n        this.$resolution = $resolution.clone();\n\n        this.$resize();\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        if (this.$initiated === false) {\n\n            return;\n        }\n\n        this.$resizeOberver.disconnect();\n\n        window.removeEventListener('beforeunload', this.$onBeforeUnload.bind(this));\n\n        this.$initiated = false;\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {Stage} $stage The stage on which to execute the system.\n     * @public\n     */\n    tick($stage) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        this.$resetCanvas(this.$canvas.width, this.$canvas.height);\n\n        this.$sendUniform(Shader, 'uniformAspect', [this.$canvas.width, this.$canvas.height]);\n        this.$sendUniform(Shader, 'uniformTranslationPointOfView', [Math.floor($stage.pointOfView.translation.x), Math.floor($stage.pointOfView.translation.y)]);\n\n        this.$sendAttribute(Shader, 'attributePosition', this.$bufferPosition);\n\n        const actors = [...$stage.actors];\n\n        actors.sort(($a, $b) => {\n\n            return $a.zIndex - $b.zIndex;\n        });\n\n        actors.forEach(($actor) => {\n\n            if ($actor.hasSprite() === false) {\n\n                return;\n            }\n\n            let textureColor = this.$textureColorDefault;\n\n            this.$prepareTexture($actor.sprite.textureColor, this.$context.TEXTURE0 + SystemRender.UNITTEXTURE1);\n\n            if (typeof this.$cache.get($actor.sprite.textureColor) !== 'undefined') {\n\n                textureColor = this.$cache.get($actor.sprite.textureColor);\n            }\n\n            this.$context.activeTexture(this.$context.TEXTURE0 + SystemRender.UNITTEXTURE1);\n            this.$context.bindTexture(this.$context.TEXTURE_2D, textureColor);\n            this.$sendUniform(Shader, 'uniformTextureColor', SystemRender.UNITTEXTURE1);\n\n            let textureOpacity = this.$textureOpacityDefault;\n\n            if (typeof $actor.sprite.textureOpacity !== 'undefined') {\n\n                this.$prepareTexture($actor.sprite.textureOpacity, this.$context.TEXTURE0 + SystemRender.UNITTEXTURE2);\n\n                if (typeof this.$cache.get($actor.sprite.textureOpacity) !== 'undefined') {\n\n                    textureOpacity = this.$cache.get($actor.sprite.textureOpacity);\n                }\n            }\n\n            this.$context.activeTexture(this.$context.TEXTURE0 + SystemRender.UNITTEXTURE2);\n            this.$context.bindTexture(this.$context.TEXTURE_2D, textureOpacity);\n            this.$sendUniform(Shader, 'uniformTextureOpacity', SystemRender.UNITTEXTURE2);\n\n            this.$sendUniform(Shader, 'uniformSize', [$actor.sprite.sizeTarget.x, $actor.sprite.sizeTarget.y]);\n            this.$sendUniform(Shader, 'uniformTranslation', [Math.floor($actor.translation.x), Math.floor($actor.translation.y)]);\n\n            this.$createBufferUvsOnce($actor.sprite);\n            this.$sendAttribute(Shader, 'attributeUvmapping', this.$mappingBuffersUv[$actor.sprite.frameSourceSerialized]);\n\n            this.$context.drawElements(this.$context.TRIANGLE_FAN, this.$indices, this.$context.UNSIGNED_INT, 0);\n        });\n    }\n}\n\nexport {\n\n    SystemRender\n};\n\nexport default SystemRender;\n","import {EVENTCODES, EventGamepad, EventGamepadDigital, Stage, UTILS, Vibration} from '../index.js';\n\n/**\n * Creates vibration systems.\n *\n * @example\n *\n * const system = new SystemVibration();\n */\nclass SystemVibration {\n\n    /**\n     * Stores the delay before a vibration ends.\n     * @type {number}\n     * @public\n     * @readonly\n     * @static\n     */\n    static DELAYVIBRATIONEND = 1000;\n\n    /**\n     * Stores the mapping between the playing vibrations and their elapsed time.\n     * @type {Map<Vibration, number>}\n     * @private\n     */\n    $mappingVibrationsPlaying;\n\n    /**\n     * Creates a new vibration system.\n     */\n    constructor() {\n\n        this.$mappingVibrationsPlaying = new Map();\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        window.dispatchEvent(new EventGamepadDigital('gamepadvibrate', EVENTCODES.GAMEPADXBOX.VIBRATEEND));\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    tick({$stage, $timetick}) {\n\n        /**\n         * @type {Array<Vibration>}\n         */\n        const previous = Array.from(this.$mappingVibrationsPlaying.keys());\n\n        $stage.actors.forEach(($actor) => {\n\n            /**\n             * @type {Array<Vibration>}\n             */\n            const finished = [];\n\n            $actor.vibrations.forEach(($vibration) => {\n\n                if (this.$mappingVibrationsPlaying.has($vibration) === false) {\n\n                    this.$mappingVibrationsPlaying.set($vibration, 0);\n\n                    return;\n                }\n\n                const elapsedTime = this.$mappingVibrationsPlaying.get($vibration) + $timetick;\n\n                if (elapsedTime >= $vibration.duration) {\n\n                    finished.push($vibration);\n\n                    return;\n                }\n\n                this.$mappingVibrationsPlaying.set($vibration, elapsedTime);\n\n                UTILS.extract($vibration, previous);\n            });\n\n            finished.forEach(($vibration) => {\n\n                $actor.removeVibration($vibration);\n            });\n        });\n\n        previous.forEach(($vibration) => {\n\n            this.$mappingVibrationsPlaying.delete($vibration);\n        });\n\n        /**\n         * @type {Array<Vibration>}\n         */\n        const current = Array.from(this.$mappingVibrationsPlaying.keys());\n\n        let intensityFrequencyHigh = 0;\n        let intensityFrequencyLow = 0;\n\n        current.forEach(($vibration) => {\n\n            intensityFrequencyHigh = Math.max(intensityFrequencyHigh, $vibration.intensityFrequencyHigh);\n            intensityFrequencyLow = Math.max(intensityFrequencyLow, $vibration.intensityFrequencyLow);\n        });\n\n        window.dispatchEvent(new EventGamepad('gamepadvibrate', EVENTCODES.GAMEPADXBOX.VIBRATESTART, new Vibration({\n\n            $duration: SystemVibration.DELAYVIBRATIONEND,\n            $intensityFrequencyHigh: intensityFrequencyHigh,\n            $intensityFrequencyLow: intensityFrequencyLow\n        })));\n    }\n}\n\nexport {\n\n    SystemVibration\n};\n\nexport default SystemVibration;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(864);\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","activate","engine","$container","document","body","initiate","preloadStage","createStage","PreloadableAseprite","$aseprite","static","textureColor","Aseprite","$sprites","$tags","$textureColor","this","constructor","$data","frames","map","$frame","$frameSource","frame","x","meta","size","w","y","h","$sizeTarget","frameTags","forEach","$tag","name","slice","from","to","createTimeline","$actor","$framerate","$loop","getTag","length","keyframes","$sprite","$index","$onEnter","setSprite","$timecode","push","$timeline","seekTimecode","tagnames","Object","keys","indexOf","ActorButtonContinue","$spritesheet","actionActivate","actionDisable","actionFocus","actionRest","onCreate","onTick","$timetick","tick","ActorButtonDlc","ActorButtonNewGame","ActorButtonQuit","ActorMenu","$finiteStateMachineMenu","onBeforeRemove","followers","$follower","stage","removeActor","DEBOUNCENAVIGATION","buttonContinue","createActor","translate","buttonNewGame","buttonDlc","buttonQuit","addFollower","checkCommandActivate","getInput","checkCommandNavigateUp","checkCommandNavigateDown","$state","$transitions","$condition","$timer","$previous","addSound","$audio","$volume","$onLeave","addVibration","$duration","$intensityFrequencyHigh","$intensityFrequencyLow","console","log","update","StageMenu","setColor","setResolution","DYNAMIC","KINETIC","STATIC","AUDIOMPEG","AUDIOWAVE","IMAGEJPEG","IMAGEPNG","A","START","UP","DOWN","LSUP","LSDOWN","VIBRATEEND","VIBRATESTART","ENTER","RADIANS","Math","PI","Preloadable","Actor","$collider","$components","$followers","$sounds","$stage","$translation","$uuid","$vibrations","$zIndex","collider","Array","sounds","sprite","translation","uuid","vibrations","zIndex","super","Set","Vector2","add","$sound","$vibration","getComponent","$name","hasCollider","Collider","hasComponent","hasOwnProperty","hasFollower","has","hasSprite","Sprite","onAfterRemove","onCollide","$east","$north","$south","$west","onCollideEnter","onCollideLeave","onSoundFinish","removeFollower","delete","removeSound","removeSounds","removeVibration","removeVibrations","setCollider","setComponent","$component","setZIndex","$vector","clone","hasActor","translateTo","subtract","Stage","$actors","$engine","$pointOfView","actors","pointOfView","actor","index","splice","removeActors","setPointOfView","AABB","$maximum","$minimum","center","minimum","halfSize","scale","maximum","distanceManhattan","$a","$b","distanceX","distanceY","max","abs","$aabb","overlapX","distanceCenter","overlapY","$boundaries","$traversable","$type","boundaries","traversable","type","Engine","$color","$next","$preloaded","$resolution","$systemActor","$systemAudio","$systemCollision","$systemInput","$systemRender","$systemVibration","container","Vector3","Loop","bind","SystemActor","SystemAudio","SystemCollision","SystemInput","SystemRender","SystemVibration","$createStage","$input","getInputAnalog","hasAssetLoaded","$asset","$tickrateMinimum","promises","preloadables","promise","Promise","$resolve","fetch","then","$content","headers","get","loadTexture","$texture","loadAudio","$bufferAudio","undefined","all","terminate","ActorWithPreloadables","$preloadables","$preloadable","PreloadableSound","PreloadableTexture","StageWithPreloadables","FiniteStateMachine","$initiated","$states","Map","set","$transition","previous","current","next","$handler","$identifier","$timePrevious","$scope","window","timeCurrent","performance","now","timetickCurrent","timetickMinimum","timetickSafe","min","requestAnimationFrame","cancelAnimationFrame","Shader","Sound","$durationFadeOut","audio","durationFadeOut","loop","volume","$frameSourceSerialized","$textureOpacity","frameSource","frameSourceSerialized","sizeTarget","textureOpacity","JSON","stringify","value","localStorage","getItem","parse","remove","removeItem","$value","setItem","Timeline","$keyframes","timecode","sort","seekName","result","find","$keyframe","onEnter","TimelineKeyframe","deduplicate","$array","extract","$item","ready","id","check","navigator","userActivation","hasBeenActive","sleep","$delay","setTimeout","crypto","randomUUID","$x","$y","equal","sqrt","multiply","negate","normalize","rotate","$angle","radians","cosine","cos","sine","sin","$factor","$z","z","$quaternion","xq","yq","zq","xu","yu","zu","xv","yv","zv","Vibration","duration","intensityFrequencyHigh","intensityFrequencyLow","EventGamepad","Event","$code","code","vibration","EventGamepadAnalog","EventGamepadDigital","$GAMEPADAXES","$GAMEPADBUTTONS","ExtensionGamepad","$indexLastConnected","$stateGamepad","$unloaded","flat","addEventListener","$onBeforeUnload","$onConnect","$onDisconnect","$onVibrate","$update","$activated","gamepad","getGamepads","vibrationActuator","reset","$event","mapping","entries","dispatchEvent","playEffect","startDelay","strongMagnitude","weakMagnitude","Gamepad","$button","button","buttons","pressed","axes","$direction","axeMinimum","axeMaximum","sign","$cache","$context","$mappingSoundsPlaying","AudioContext","$createValuesCurveFadeOut","$loadAudio","arrayBuffer","$bufferArray","decodeAudioData","url","$prepareAudio","$terminateSound","$gain","$startTime","currentTime","buffer","gain","cancelScheduledValues","setValueCurveAtTime","onended","disconnect","delayFadeOut","close","DELAYCONTEXTCLEARSAFE","bufferAudio","createBufferSource","connect","destination","start","createGain","$current","$hasCollisionPrevious","$dynamic","$inert","$dynamicPrevious","$inertPrevious","pairs","dynamics","kinetics","statics","inerts","boundariesDynamic","centerBoundariesDynamic","boundariesInert","distance","$distance","$pair","directionX","directionY","checkMinimumX","checkMinimumY","resolverDynamic","originDynamicEast","originDynamicNorth","originDynamicSouth","originDynamicWest","filter","$events","$inputs","$inputsAnalog","$stack","preventDefault","input","removeEventListener","shift","KeyboardEvent","$bufferPosition","$canvas","$indices","$locationsAttribute","$locationsUniform","$mappingBuffersUv","$program","$resizeOberver","$textureColorDefault","$textureOpacityDefault","createElement","style","width","height","display","outline","imageRendering","getContext","appendChild","$resize","$createBufferPositions","bufferPosition","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","$createBufferUvsOnce","uvs","bufferUv","$createIndices","indices","bufferIndex","ELEMENT_ARRAY_BUFFER","Uint32Array","$createLocationsAttribute","$shader","attributes","getAttribLocation","$createLocationsUniform","uniforms","getUniformLocation","$createProgram","shaderVertex","createShader","VERTEX_SHADER","shaderSource","sourceVertex","compileShader","shaderFragment","FRAGMENT_SHADER","sourceFragment","createProgram","attachShader","linkProgram","$createTexture","$textureBitmap","$unitTexture","texture","createTexture","activeTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","RGBA","UNSIGNED_BYTE","$createTextureDefault","TEXTURE0","Uint8Array","$loadTexture","blob","$blob","createImageBitmap","$prepareTexture","getExtension","loseContext","$resetCanvas","$width","$height","clearColor","clearDepth","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","widthContext","floor","clientWidth","clientHeight","heightContext","setAttribute","$sendAttribute","location","vertexAttribPointer","FLOAT","enableVertexAttribArray","$sendUniform","uniform1i","uniform1iv","uniform1f","uniform1fv","uniformMatrix4fv","uniform2fv","uniform3fv","frontFace","CW","enable","CULL_FACE","cullFace","BACK","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","useProgram","UNITTEXTURE1","UNITTEXTURE2","ResizeObserver","observe","UNITTEXTURE0","drawElements","TRIANGLE_FAN","UNSIGNED_INT","$mappingVibrationsPlaying","finished","elapsedTime","DELAYVIBRATIONEND","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","Symbol","queue","d","fn","r","a","hasAwait","currentDeps","outerResolve","reject","depQueues","resolve","rej","deps","dep","obj","e","ret","wrapDeps","getResult","fnQueue","q","err","definition","key","o","defineProperty","enumerable","g","globalThis","Function","prop","prototype","call","toStringTag","scriptUrl","importScripts","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","i","test","Error","replace","p"],"sourceRoot":""}