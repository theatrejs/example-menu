{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://@theatrejs/example-menu/webpack/runtime/async module","webpack://@theatrejs/example-menu/./sources/index.js","webpack://@theatrejs/example-menu/./sources/actors/button-continue/actor-button-continue.js","webpack://@theatrejs/example-menu/./sources/actors/button-dlc/actor-button-dlc.js","webpack://@theatrejs/example-menu/./sources/actors/button-new-game/actor-button-new-game.js","webpack://@theatrejs/example-menu/./sources/actors/button-quit/actor-button-quit.js","webpack://@theatrejs/example-menu/./sources/actors/actor-menu/navigation.mp3","webpack://@theatrejs/example-menu/./sources/actors/actor-menu/selection.mp3","webpack://@theatrejs/example-menu/./sources/actors/actor-menu/actor-menu.js","webpack://@theatrejs/example-menu/./sources/stages/stage-menu.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/extensions/gamepad.extension.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/collidertypes.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/contenttypes.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/gamepad.xbox.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertyeditors.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertynavigators.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/mathematics.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/aabb.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/actor.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/actorpreloadable.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/collider.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/engine.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/finitestatemachine.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/loop.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/shader.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/sound.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/sprite.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/stage.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/stagepreloadable.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/storage.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/timeline.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/timelinekeyframe.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/utils.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/vector2.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/vector3.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/vibration.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/events/gamepad.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/events/gamepadanalog.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/events/gamepaddigital.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/actor.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/audio.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/collision.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/input.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/render.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/vibration.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/index.js","webpack://@theatrejs/example-menu/webpack/bootstrap","webpack://@theatrejs/example-menu/webpack/runtime/define property getters","webpack://@theatrejs/example-menu/webpack/runtime/global","webpack://@theatrejs/example-menu/webpack/runtime/hasOwnProperty shorthand","webpack://@theatrejs/example-menu/webpack/runtime/make namespace object","webpack://@theatrejs/example-menu/webpack/runtime/publicPath","webpack://@theatrejs/example-menu/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","import {Engine, UTILS} from '@theatrejs/theatrejs';\n\nimport StageMenu from 'stages/stage-menu.js';\n\nconst engine = new Engine({$container: document.body});\nengine.initiate(60);\n\nawait engine.preloadStage(StageMenu);\nawait UTILS.frame();\nengine.createStage(StageMenu);\n","import {AABB, ActorPreloadable, Sprite, Timeline, TimelineKeyframe, Vector2} from '@theatrejs/theatrejs';\n\nimport dataButtonContinue from './button-continue-64x16.json';\nimport textureButtonContinue from './button-continue-64x16.png';\n\nclass ActorButtonContinue extends ActorPreloadable([textureButtonContinue]) {\n\n    /**\n     * Stores sprite data.\n     * @type {typedatasprite}\n     * @private\n     */\n    $data;\n\n    /**\n     * Stores the timeline.\n     * @type {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Creates an animated timeline for the spritesheet.\n     * @param {typedataspriteframe[]} $frames The sprite frames data.\n     * @param {typedataspritesize} $size The sprite size data.\n     * @returns {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $createTimeline($frames, $size) {\n\n        return new Timeline([\n\n            ...($frames.map(($frame, $index) => {\n\n                const {x, y, width, height} = $frame;\n\n                const sprite = new Sprite({\n\n                    $frameSource: new AABB(\n\n                        new Vector2(x / $size.width, y / $size.height),\n                        new Vector2((x + width) / $size.width, (y + height) / $size.height)\n                    ),\n                    $sizeTarget: new Vector2(width, height),\n                    $textureColor: textureButtonContinue\n                });\n\n                return new TimelineKeyframe({\n\n                    $onEnter: () => {\n\n                        this.setSprite(sprite);\n                    },\n                    $timecode: $index * (1000 / 10)\n                });\n            })),\n            new TimelineKeyframe({\n\n                $onEnter: ($timeline) => {\n\n                    $timeline.seekTimecode(0);\n                },\n                $timecode: $frames.length * (1000 / 10)\n            })\n        ]);\n    }\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.active, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.disabled, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.focus, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.idle, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$data = dataButtonContinue;\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport default ActorButtonContinue;\n","import {AABB, ActorPreloadable, Sprite, Timeline, TimelineKeyframe, Vector2} from '@theatrejs/theatrejs';\n\nimport dataButtonDlc from './button-dlc-64x16.json';\nimport textureButtonDlc from './button-dlc-64x16.png';\n\nclass ActorButtonDlc extends ActorPreloadable([textureButtonDlc]) {\n\n    /**\n     * Stores sprite data.\n     * @type {typedatasprite}\n     * @private\n     */\n    $data;\n\n    /**\n     * Stores the timeline.\n     * @type {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Creates an animated timeline for the spritesheet.\n     * @param {typedataspriteframe[]} $frames The sprite frames data.\n     * @param {typedataspritesize} $size The sprite size data.\n     * @returns {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $createTimeline($frames, $size) {\n\n        return new Timeline([\n\n            ...($frames.map(($frame, $index) => {\n\n                const {x, y, width, height} = $frame;\n\n                const sprite = new Sprite({\n\n                    $frameSource: new AABB(\n\n                        new Vector2(x / $size.width, y / $size.height),\n                        new Vector2((x + width) / $size.width, (y + height) / $size.height)\n                    ),\n                    $sizeTarget: new Vector2(width, height),\n                    $textureColor: textureButtonDlc\n                });\n\n                return new TimelineKeyframe({\n\n                    $onEnter: () => {\n\n                        this.setSprite(sprite);\n                    },\n                    $timecode: $index * (1000 / 10)\n                });\n            })),\n            new TimelineKeyframe({\n\n                $onEnter: ($timeline) => {\n\n                    $timeline.seekTimecode(0);\n                },\n                $timecode: $frames.length * (1000 / 10)\n            })\n        ]);\n    }\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.active, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.disabled, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.focus, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.idle, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$data = dataButtonDlc;\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport default ActorButtonDlc;\n","import {AABB, ActorPreloadable, Sprite, Timeline, TimelineKeyframe, Vector2} from '@theatrejs/theatrejs';\n\nimport dataButtonNewGame from './button-new-game-64x16.json';\nimport textureButtonNewGame from './button-new-game-64x16.png';\n\nclass ActorButtonNewGame extends ActorPreloadable([textureButtonNewGame]) {\n\n    /**\n     * Stores sprite data.\n     * @type {typedatasprite}\n     * @private\n     */\n    $data;\n\n    /**\n     * Stores the timeline.\n     * @type {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Creates an animated timeline for the spritesheet.\n     * @param {typedataspriteframe[]} $frames The sprite frames data.\n     * @param {typedataspritesize} $size The sprite size data.\n     * @returns {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $createTimeline($frames, $size) {\n\n        return new Timeline([\n\n            ...($frames.map(($frame, $index) => {\n\n                const {x, y, width, height} = $frame;\n\n                const sprite = new Sprite({\n\n                    $frameSource: new AABB(\n\n                        new Vector2(x / $size.width, y / $size.height),\n                        new Vector2((x + width) / $size.width, (y + height) / $size.height)\n                    ),\n                    $sizeTarget: new Vector2(width, height),\n                    $textureColor: textureButtonNewGame\n                });\n\n                return new TimelineKeyframe({\n\n                    $onEnter: () => {\n\n                        this.setSprite(sprite);\n                    },\n                    $timecode: $index * (1000 / 10)\n                });\n            })),\n            new TimelineKeyframe({\n\n                $onEnter: ($timeline) => {\n\n                    $timeline.seekTimecode(0);\n                },\n                $timecode: $frames.length * (1000 / 10)\n            })\n        ]);\n    }\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.active, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.disabled, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.focus, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.idle, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$data = dataButtonNewGame;\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport default ActorButtonNewGame;\n","import {AABB, ActorPreloadable, Sprite, Timeline, TimelineKeyframe, Vector2} from '@theatrejs/theatrejs';\n\nimport dataButtonQuit from './button-quit-64x16.json';\nimport textureButtonQuit from './button-quit-64x16.png';\n\nclass ActorButtonQuit extends ActorPreloadable([textureButtonQuit]) {\n\n    /**\n     * Stores sprite data.\n     * @type {typedatasprite}\n     * @private\n     */\n    $data;\n\n    /**\n     * Stores the timeline.\n     * @type {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Creates an animated timeline for the spritesheet.\n     * @param {typedataspriteframe[]} $frames The sprite frames data.\n     * @param {typedataspritesize} $size The sprite size data.\n     * @returns {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $createTimeline($frames, $size) {\n\n        return new Timeline([\n\n            ...($frames.map(($frame, $index) => {\n\n                const {x, y, width, height} = $frame;\n\n                const sprite = new Sprite({\n\n                    $frameSource: new AABB(\n\n                        new Vector2(x / $size.width, y / $size.height),\n                        new Vector2((x + width) / $size.width, (y + height) / $size.height)\n                    ),\n                    $sizeTarget: new Vector2(width, height),\n                    $textureColor: textureButtonQuit\n                });\n\n                return new TimelineKeyframe({\n\n                    $onEnter: () => {\n\n                        this.setSprite(sprite);\n                    },\n                    $timecode: $index * (1000 / 10)\n                });\n            })),\n            new TimelineKeyframe({\n\n                $onEnter: ($timeline) => {\n\n                    $timeline.seekTimecode(0);\n                },\n                $timecode: $frames.length * (1000 / 10)\n            })\n        ]);\n    }\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.active, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.disabled, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.focus, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.idle, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$data = dataButtonQuit;\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport default ActorButtonQuit;\n","export default __webpack_public_path__ + \"4378e9fa9e4ca0b2781ec67b69c8af0f.mp3\";","export default __webpack_public_path__ + \"f2651d13f4de25921433f7a8c179abd0.mp3\";","import {ActorPreloadable, EVENTCODES, FiniteStateMachine, Sound, STORAGE, Vector2, Vibration} from '@theatrejs/theatrejs';\n\nimport ActorButtonContinue from 'actors/button-continue/actor-button-continue.js';\nimport ActorButtonDlc from 'actors/button-dlc/actor-button-dlc.js';\nimport ActorButtonNewGame from 'actors/button-new-game/actor-button-new-game.js';\nimport ActorButtonQuit from 'actors/button-quit/actor-button-quit.js';\n\nimport soundNavigation from './navigation.mp3';\nimport soundSelection from './selection.mp3';\n\nclass ActorMenu extends ActorPreloadable([ActorButtonContinue, ActorButtonDlc, ActorButtonNewGame, ActorButtonQuit, soundNavigation, soundSelection]) {\n\n    /**\n     * Stores the finite state machine.\n     * @type {import('@theatrejs/theatrejs').FiniteStateMachine<('INITIATE' | 'CONTINUESELECTED' | 'CONTINUEACTIVATED' | 'NEWGAMESELECTED' | 'NEWGAMEACTIVATED' | 'QUITSELECTED' | 'QUITACTIVATED')>}\n     * @private\n     */\n    $finiteStateMachineMenu;\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onBeforeRemove']}\n     */\n    onBeforeRemove() {\n\n        this.followers.forEach(($follower) => {\n\n            this.stage.removeActor($follower);\n        });\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        const DEBOUNCEINITIATE = 800;\n        const DEBOUNCENAVIGATION = 200;\n        const DEBOUNCESELECTION = 800;\n\n        const buttonContinue = /** @type {ActorButtonContinue} */(this.stage.createActor(ActorButtonContinue)).translate(new Vector2(0, 24 * 1.5));\n        const buttonNewGame = /** @type {ActorButtonNewGame} */(this.stage.createActor(ActorButtonNewGame)).translate(new Vector2(0, 24 * 0.5));\n        const buttonDlc = /** @type {ActorButtonDlc} */(this.stage.createActor(ActorButtonDlc)).translate(new Vector2(0, -24 * 0.5));\n        const buttonQuit = /** @type {ActorButtonQuit} */(this.stage.createActor(ActorButtonQuit)).translate(new Vector2(0, -24 * 1.5));\n\n        if (STORAGE.get('continue') !== true) {\n\n            buttonContinue.actionDisable();\n        }\n\n        buttonDlc.actionDisable();\n\n        this.addFollower(buttonContinue);\n        this.addFollower(buttonNewGame);\n        this.addFollower(buttonDlc);\n        this.addFollower(buttonQuit);\n\n        const checkCommandActivate = () => {\n\n            return this.engine.getInput(EVENTCODES.KEYBOARDAZERTY.ENTER)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.A)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.START);\n        };\n\n        const checkCommandNavigateUp = () => {\n\n            return this.engine.getInput(EVENTCODES.KEYBOARDAZERTY.UP)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.UP)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.LSUP);\n        };\n\n        const checkCommandNavigateDown = () => {\n\n            return this.engine.getInput(EVENTCODES.KEYBOARDAZERTY.DOWN)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.DOWN)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.LSDOWN);\n        };\n\n        this.$finiteStateMachineMenu = new FiniteStateMachine([\n\n            {\n                $state: 'INITIATE',\n                $transitions: [\n\n                    {\n                        $state: 'CONTINUESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCEINITIATE && STORAGE.get('continue') === true\n                    },\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCEINITIATE && STORAGE.get('continue') !== true\n                    }\n                ]\n            },\n            {\n                $state: 'CONTINUESELECTED',\n                $onEnter: ({$previous}) => {\n\n                    buttonContinue.actionFocus();\n\n                    if ($previous === 'INITIATE') {\n\n                        return;\n                    }\n\n                    if ($previous === 'CONTINUEACTIVATED') {\n\n                        return;\n                    }\n\n                    this.addSound(new Sound({\n\n                        $audio: soundNavigation,\n                        $volume: 0.5\n                    }));\n                },\n                $onLeave: () => buttonContinue.actionRest(),\n                $transitions: [\n\n                    {\n                        $state: 'CONTINUEACTIVATED',\n                        $condition: () => checkCommandActivate() === true\n                    },\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCENAVIGATION && checkCommandNavigateDown() === true && checkCommandNavigateUp() === false && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'CONTINUEACTIVATED',\n                $onEnter: () => {\n\n                    buttonContinue.actionActivate();\n\n                    this.addSound(new Sound({\n\n                        $audio: soundSelection,\n                        $volume: 0.5\n                    }));\n\n                    this.addVibration(new Vibration({\n\n                        $duration: 100,\n                        $intensityFrequencyHigh: 1,\n                        $intensityFrequencyLow: 0\n                    }));\n                },\n                $onLeave: () => {\n\n                    buttonContinue.actionRest();\n\n                    console.log('Continue');\n                },\n                $transitions: [\n\n                    {\n                        $state: 'CONTINUESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCESELECTION && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'NEWGAMESELECTED',\n                $onEnter: ({$previous}) => {\n\n                    buttonNewGame.actionFocus();\n\n                    if ($previous === 'INITIATE') {\n\n                        return;\n                    }\n\n                    if ($previous === 'NEWGAMEACTIVATED') {\n\n                        return;\n                    }\n\n                    this.addSound(new Sound({\n\n                        $audio: soundNavigation,\n                        $volume: 0.5\n                    }));\n                },\n                $onLeave: () => buttonNewGame.actionRest(),\n                $transitions: [\n\n                    {\n                        $state: 'NEWGAMEACTIVATED',\n                        $condition: () => checkCommandActivate() === true\n                    },\n                    {\n                        $state: 'CONTINUESELECTED',\n                        $condition: ({$timer}) => STORAGE.get('continue') === true && $timer >= DEBOUNCENAVIGATION && checkCommandNavigateUp() === true && checkCommandNavigateDown() === false && checkCommandActivate() === false\n                    },\n                    {\n                        $state: 'QUITSELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCENAVIGATION && checkCommandNavigateDown() === true && checkCommandNavigateUp() === false && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'NEWGAMEACTIVATED',\n                $onEnter: () => {\n\n                    buttonNewGame.actionActivate();\n\n                    this.addSound(new Sound({\n\n                        $audio: soundSelection,\n                        $volume: 0.5\n                    }));\n\n                    this.addVibration(new Vibration({\n\n                        $duration: 100,\n                        $intensityFrequencyHigh: 1,\n                        $intensityFrequencyLow: 0\n                    }));\n                },\n                $onLeave: () => {\n\n                    buttonNewGame.actionRest();\n\n                    if (STORAGE.get('continue') !== true) {\n\n                        buttonContinue.actionRest();\n                        STORAGE.set('continue', true);\n                    }\n\n                    console.log('New Game');\n                },\n                $transitions: [\n\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCESELECTION && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'QUITSELECTED',\n                $onEnter: ({$previous}) => {\n\n                    buttonQuit.actionFocus();\n\n                    if ($previous === 'QUITACTIVATED') {\n\n                        return;\n                    }\n\n                    this.addSound(new Sound({\n\n                        $audio: soundNavigation,\n                        $volume: 0.5\n                    }));\n                },\n                $onLeave: () => buttonQuit.actionRest(),\n                $transitions: [\n\n                    {\n                        $state: 'QUITACTIVATED',\n                        $condition: () => checkCommandActivate() === true\n                    },\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCENAVIGATION && checkCommandNavigateUp() === true && checkCommandNavigateDown() === false && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'QUITACTIVATED',\n                $onEnter: () => {\n\n                    buttonQuit.actionActivate();\n\n                    this.addSound(new Sound({\n\n                        $audio: soundSelection,\n                        $volume: 0.5\n                    }));\n\n                    this.addVibration(new Vibration({\n\n                        $duration: 100,\n                        $intensityFrequencyHigh: 1,\n                        $intensityFrequencyLow: 0\n                    }));\n                },\n                $onLeave: () => {\n\n                    buttonQuit.actionRest();\n\n                    if (STORAGE.get('continue') === true) {\n\n                        buttonContinue.actionDisable()\n                        STORAGE.set('continue', false);\n                    }\n\n                    console.log('Quit');\n                },\n                $transitions: [\n\n                    {\n                        $state: 'QUITSELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCESELECTION && checkCommandActivate() === false\n                    }\n                ]\n            }\n        ]);\n\n        this.$finiteStateMachineMenu.initiate('INITIATE');\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$finiteStateMachineMenu.update($timetick);\n    }\n}\n\nexport default ActorMenu;\n","import {StagePreloadable, Vector2, Vector3} from '@theatrejs/theatrejs';\n\nimport ActorMenu from 'actors/actor-menu/actor-menu.js';\n\nclass StageMenu extends StagePreloadable([ActorMenu]) {\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Stage['onCreate']}\n     */\n    onCreate() {\n\n        this.engine.setColor(new Vector3(27 / 255, 36 / 255, 71 / 255));\n        this.engine.setResolution(new Vector2(480, 360));\n\n        this.createActor(ActorMenu);\n    }\n}\n\nexport default StageMenu;\n","import {EventGamepad, EventGamepadAnalog, EventGamepadDigital} from '../index.js';\n\n/**\n * The ordered list of the axes event codes of the gamepad.\n * @type {string[][]}\n * @constant\n */\nconst GAMEPADAXES = [\n\n    ['StickLeftLeft', 'StickLeftRight'],\n    ['StickLeftUp', 'StickLeftDown'],\n    ['StickRightLeft', 'StickRightRight'],\n    ['StickRightUp', 'StickRightDown']\n];\n\n/**\n * The ordered list of the buttons event codes of the gamepad.\n * @type {string[]}\n * @constant\n */\nconst GAMEPADBUTTONS = [\n\n    'ClusterRightButtonBottom',\n    'ClusterRightButtonRight',\n    'ClusterRightButtonLeft',\n    'ClusterRightButtonTop',\n    'ClusterFrontButtonTopLeft',\n    'ClusterFrontButtonTopRight',\n    'ClusterFrontButtonBottomLeft',\n    'ClusterFrontButtonBottomRight',\n    'ClusterCenterButtonLeft',\n    'ClusterCenterButtonRight',\n    'StickLeftButton',\n    'StickRightButton',\n    'ClusterLeftButtonTop',\n    'ClusterLeftButtonBottom',\n    'ClusterLeftButtonLeft',\n    'ClusterLeftButtonRight',\n    'ClusterCenterButtonCenter'\n];\n\n/**\n * The threshold of the gampead axes.\n * @type {number}\n * @constant\n */\nconst THRESHOLDGAMEPADAXES = 0.5;\n\n/**\n * Creates gamepad extension.\n *\n * @example\n *\n * const extensionGamepad = new ExtensionGamepad();\n */\nclass ExtensionGamepad {\n\n    /**\n     * Stores the index of the last connected gamepad.\n     * @type {number}\n     * @private\n     */\n    $indexLastConnected;\n\n    /**\n     * Stores the gamepad state.\n     * @type {Object.<string, boolean>}\n     * @private\n     */\n    $stateGamepad;\n\n    /**\n     * Stores the unloaded status.\n     * @type {boolean}\n     * @private\n     */\n    $unloaded;\n\n    /**\n     * Creates a new gamepad extension.\n     */\n    constructor() {\n\n        this.$stateGamepad = {};\n        this.$unloaded = false;\n\n        [...GAMEPADBUTTONS, ...GAMEPADAXES.flat()].forEach(($code) => {\n\n            this.$stateGamepad[$code] = false;\n        });\n\n        window.addEventListener('beforeunload', this.$onBeforeUnload.bind(this));\n\n        window.addEventListener('gamepadconnected', this.$onConnect.bind(this));\n        window.addEventListener('gamepaddisconnected', this.$onDisconnect.bind(this));\n\n        window.addEventListener('gamepadvibrate', this.$onVibrate.bind(this));\n\n        window.requestAnimationFrame(this.$update.bind(this));\n    }\n\n    /**\n     * Called when the scope is about to be unloaded.\n     * @private\n     */\n    $onBeforeUnload() {\n\n        this.$unloaded = true;\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (typeof gamepad === 'undefined') {\n\n            return;\n        }\n\n        if (typeof gamepad.vibrationActuator === 'undefined') {\n\n            return;\n        }\n\n        gamepad.vibrationActuator.reset();\n    }\n\n    /**\n     * Called when the gamepad is connected.\n     * @param {GamepadEvent} $event The native gamepad connected event.\n     * @private\n     */\n    $onConnect($event) {\n\n        if ($event.gamepad.mapping !== 'standard') {\n\n            return;\n        }\n\n        Object.entries(this.$stateGamepad).forEach(([$code, $activated]) => {\n\n            if ($activated === true) {\n\n                this.$stateGamepad[$code] = false;\n\n                window.dispatchEvent(new EventGamepadDigital('gamepadup', $code));\n            }\n        });\n\n        this.$indexLastConnected = $event.gamepad.index;\n\n        window.dispatchEvent(new EventGamepadDigital('gamepadconnect', 'Connected'));\n    }\n\n    /**\n     * Called when the gamepad is disconnected.\n     * @param {GamepadEvent} $event The native gamepad disconnected event.\n     * @private\n     */\n    $onDisconnect($event) {\n\n        if ($event.gamepad.index !== this.$indexLastConnected) {\n\n            return;\n        }\n\n        Object.entries(this.$stateGamepad).forEach(([$code, $activated]) => {\n\n            if ($activated === true) {\n\n                this.$stateGamepad[$code] = false;\n\n                window.dispatchEvent(new EventGamepadDigital('gamepadup', $code));\n            }\n        });\n\n        this.$indexLastConnected = undefined;\n\n        window.dispatchEvent(new EventGamepadDigital('gamepadconnect', 'Disconnected'));\n    }\n\n    /**\n     * Called when a gamepad vibration is needed.\n     * @param {Event} $event The gamepad vibrate event.\n     * @private\n     */\n    $onVibrate($event) {\n\n        if (this.$unloaded === true) {\n\n            return;\n        }\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (typeof gamepad === 'undefined') {\n\n            return;\n        }\n\n        if (typeof gamepad.vibrationActuator === 'undefined') {\n\n            return;\n        }\n\n        if ($event instanceof EventGamepadDigital\n        && $event.code === 'VibrateEnd') {\n\n            gamepad.vibrationActuator.reset();\n\n            return;\n        }\n\n        if ($event instanceof EventGamepad\n        && $event.code === 'VibrateStart') {\n\n            gamepad.vibrationActuator.playEffect('dual-rumble', {\n\n                startDelay: 0,\n                duration: $event.data.$duration,\n                strongMagnitude: $event.data.$intensityFrequencyLow,\n                weakMagnitude: $event.data.$intensityFrequencyHigh\n            });\n\n            return;\n        }\n    }\n\n    /**\n     * Updates the state of the gamepad.\n     * @private\n     */\n    $update() {\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (gamepad instanceof Gamepad) {\n\n            GAMEPADBUTTONS.forEach(($button, $index) => {\n\n                const button = gamepad.buttons[$index];\n\n                if (button.pressed === true) {\n\n                    if (this.$stateGamepad[$button] === false) {\n\n                        this.$stateGamepad[$button] = true;\n                    }\n\n                    window.dispatchEvent(new EventGamepadDigital('gamepaddown', $button));\n                    window.dispatchEvent(new EventGamepadAnalog('gamepadanalog', $button, button.value));\n                }\n\n                else {\n\n                    if (this.$stateGamepad[$button] === true) {\n\n                        this.$stateGamepad[$button] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', $button));\n                    }\n                }\n            });\n\n            gamepad.axes.forEach(($direction, $index) => {\n\n                const [axeMinimum, axeMaximum] = GAMEPADAXES[$index];\n\n                if ($direction <= - THRESHOLDGAMEPADAXES) {\n\n                    if (this.$stateGamepad[axeMaximum] === true) {\n\n                        this.$stateGamepad[axeMaximum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMaximum));\n                    }\n\n                    this.$stateGamepad[axeMinimum] = true;\n                    window.dispatchEvent(new EventGamepadDigital('gamepaddown', axeMinimum));\n                    window.dispatchEvent(new EventGamepadAnalog('gamepadanalog', axeMinimum, ($direction - (Math.sign($direction) * THRESHOLDGAMEPADAXES)) / (1 - THRESHOLDGAMEPADAXES)));\n                }\n\n                else if ($direction >= THRESHOLDGAMEPADAXES) {\n\n                    if (this.$stateGamepad[axeMinimum] === true) {\n\n                        this.$stateGamepad[axeMinimum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMinimum));\n                    }\n\n                    this.$stateGamepad[axeMaximum] = true;\n                    window.dispatchEvent(new EventGamepadDigital('gamepaddown', axeMaximum));\n                    window.dispatchEvent(new EventGamepadAnalog('gamepadanalog', axeMaximum, ($direction - (Math.sign($direction) * THRESHOLDGAMEPADAXES)) / (1 - THRESHOLDGAMEPADAXES)));\n                }\n\n                else {\n\n                    if (this.$stateGamepad[axeMinimum] === true) {\n\n                        this.$stateGamepad[axeMinimum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMinimum));\n                    }\n\n                    if (this.$stateGamepad[axeMaximum] === true) {\n\n                        this.$stateGamepad[axeMaximum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMaximum));\n                    }\n                }\n            });\n        }\n\n        window.requestAnimationFrame(this.$update.bind(this));\n    }\n}\n\nexport {\n\n    ExtensionGamepad\n};\n\nexport default ExtensionGamepad;\n","/**\n * The dynamic collider type.\n * @type {'DYNAMIC'}\n * @constant\n */\nconst DYNAMIC = 'DYNAMIC';\n\n/**\n * The kinetic collider type.\n * @type {'KINETIC'}\n * @constant\n */\nconst KINETIC = 'KINETIC';\n\n/**\n * The static collider type.\n * @type {'STATIC'}\n * @constant\n */\nconst STATIC = 'STATIC';\n\nexport {\n\n    DYNAMIC,\n    KINETIC,\n    STATIC\n};\n","/**\n * The audio/mpeg Content-Type.\n * @type {'audio/mpeg'}\n * @constant\n */\nconst AUDIOMPEG = 'audio/mpeg';\n\n/**\n * The audio/wave Content-Type.\n * @type {'audio/wave'}\n * @constant\n */\nconst AUDIOWAVE = 'audio/wave';\n\n/**\n * The image/jpeg Content-Type.\n * @type {'image/jpeg'}\n * @constant\n */\nconst IMAGEJPEG = 'image/jpeg';\n\n/**\n * The image/png Content-Type.\n * @type {'image/png'}\n * @constant\n */\nconst IMAGEPNG = 'image/png';\n\nexport {\n\n    AUDIOMPEG,\n    AUDIOWAVE,\n    IMAGEJPEG,\n    IMAGEPNG\n};\n","/**\n * The XBOX gamepad 'A' event code.\n * @type {'ClusterRightButtonBottom'}\n * @constant\n */\nconst A = 'ClusterRightButtonBottom';\n\n/**\n * The XBOX gamepad 'B' event code.\n * @type {'ClusterRightButtonRight'}\n * @constant\n */\nconst B = 'ClusterRightButtonRight';\n\n/**\n * The XBOX gamepad 'X' event code.\n * @type {'ClusterRightButtonLeft'}\n * @constant\n */\nconst X = 'ClusterRightButtonLeft';\n\n/**\n * The XBOX gamepad 'Y' event code.\n * @type {'ClusterRightButtonTop'}\n * @constant\n */\nconst Y = 'ClusterRightButtonTop';\n\n/**\n * The XBOX gamepad 'LB' event code.\n * @type {'ClusterFrontButtonTopLeft'}\n * @constant\n */\nconst LB = 'ClusterFrontButtonTopLeft';\n\n/**\n * The XBOX gamepad 'RB' event code.\n * @type {'ClusterFrontButtonTopRight'}\n * @constant\n */\nconst RB = 'ClusterFrontButtonTopRight';\n\n/**\n * The XBOX gamepad 'LT' event code.\n * @type {'ClusterFrontButtonBottomLeft'}\n * @constant\n */\nconst LT = 'ClusterFrontButtonBottomLeft';\n\n/**\n * The XBOX gamepad 'RT' event code.\n * @type {'ClusterFrontButtonBottomRight'}\n * @constant\n */\nconst RT = 'ClusterFrontButtonBottomRight';\n\n/**\n * The XBOX gamepad 'BACK' event code.\n * @type {'ClusterCenterButtonLeft'}\n * @constant\n */\nconst BACK = 'ClusterCenterButtonLeft';\n\n/**\n * The XBOX gamepad 'START' event code.\n * @type {'ClusterCenterButtonRight'}\n * @constant\n */\nconst START = 'ClusterCenterButtonRight';\n\n/**\n * The XBOX gamepad 'LSB' event code.\n * @type {'StickLeftButton'}\n * @constant\n */\nconst LSB = 'StickLeftButton';\n\n/**\n * The XBOX gamepad 'RSB' event code.\n * @type {'StickRightButton'}\n * @constant\n */\nconst RSB = 'StickRightButton';\n\n/**\n * The XBOX gamepad 'UP' event code.\n * @type {'ClusterLeftButtonTop'}\n * @constant\n */\nconst UP = 'ClusterLeftButtonTop';\n\n/**\n * The XBOX gamepad 'DOWN' event code.\n * @type {'ClusterLeftButtonBottom'}\n * @constant\n */\nconst DOWN = 'ClusterLeftButtonBottom';\n\n/**\n * The XBOX gamepad 'LEFT' event code.\n * @type {'ClusterLeftButtonLeft'}\n * @constant\n */\nconst LEFT = 'ClusterLeftButtonLeft';\n\n/**\n * The XBOX gamepad 'RIGHT' event code.\n * @type {'ClusterLeftButtonRight'}\n * @constant\n */\nconst RIGHT = 'ClusterLeftButtonRight';\n\n/**\n * The XBOX gamepad 'XBOX' event code.\n * @type {'ClusterCenterButtonCenter'}\n * @constant\n */\nconst XBOX = 'ClusterCenterButtonCenter';\n\n/**\n * The XBOX gamepad 'LSLEFT' event code.\n * @type {'StickLeftLeft'}\n * @constant\n */\nconst LSLEFT = 'StickLeftLeft';\n\n/**\n * The XBOX gamepad 'LSRIGHT' event code.\n * @type {'StickLeftRight'}\n * @constant\n */\nconst LSRIGHT = 'StickLeftRight';\n\n/**\n * The XBOX gamepad 'LSUP' event code.\n * @type {'StickLeftUp'}\n * @constant\n */\nconst LSUP = 'StickLeftUp';\n\n/**\n * The XBOX gamepad 'LSDOWN' event code.\n * @type {'StickLeftDown'}\n * @constant\n */\nconst LSDOWN = 'StickLeftDown';\n\n/**\n * The XBOX gamepad 'RSLEFT' event code.\n * @type {'StickRightLeft'}\n * @constant\n */\nconst RSLEFT = 'StickRightLeft';\n\n/**\n * The XBOX gamepad 'RSRIGHT' event code.\n * @type {'StickRightRight'}\n * @constant\n */\nconst RSRIGHT = 'StickRightRight';\n\n/**\n * The XBOX gamepad 'RSUP' event code.\n * @type {'StickRightUp'}\n * @constant\n */\nconst RSUP = 'StickRightUp';\n\n/**\n * The XBOX gamepad 'RSDOWN' event code.\n * @type {'StickRightDown'}\n * @constant\n */\nconst RSDOWN = 'StickRightDown';\n\n/**\n * The XBOX gamepad 'CONNECTED' event code.\n * @type {'Connected'}\n * @constant\n */\nconst CONNECTED = 'Connected';\n\n/**\n * The XBOX gamepad 'DISCONNECTED' event code.\n * @type {'Disconnected'}\n * @constant\n */\nconst DISCONNECTED = 'Disconnected';\n\n/**\n * The XBOX gamepad 'VIBRATEEND' event code.\n * @type {'VibrateEnd'}\n * @constant\n */\nconst VIBRATEEND = 'VibrateEnd';\n\n/**\n * The XBOX gamepad 'VIBRATESTART' event code.\n * @type {'VibrateStart'}\n * @constant\n */\nconst VIBRATESTART = 'VibrateStart';\n\nexport {\n\n    A,\n    B,\n    X,\n    Y,\n\n    LB,\n    RB,\n    LT,\n    RT,\n\n    BACK,\n    START,\n\n    LSB,\n    RSB,\n\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT,\n\n    XBOX,\n\n    LSLEFT,\n    LSRIGHT,\n    LSUP,\n    LSDOWN,\n    RSLEFT,\n    RSRIGHT,\n    RSUP,\n    RSDOWN,\n\n    CONNECTED,\n    DISCONNECTED,\n    VIBRATEEND,\n    VIBRATESTART\n};\n","/**\n * The AZERTY-based keyboard 'DELETE' event code.\n * @type {'Delete'}\n * @constant\n */\nconst DELETE = 'Delete';\n\n/**\n * The AZERTY-based keyboard 'ENTER' event code.\n * @type {'Enter'}\n * @constant\n */\nconst ENTER = 'Enter';\n\nexport {\n\n    DELETE,\n    ENTER\n};\n","/**\n * The AZERTY-based keyboard 'TAB' event code.\n * @type {'Tab'}\n * @constant\n */\nconst TAB = 'Tab';\n\n/**\n * The AZERTY-based keyboard 'UP' event code.\n * @type {'ArrowUp'}\n * @constant\n */\nconst UP = 'ArrowUp';\n\n/**\n * The AZERTY-based keyboard 'LEFT' event code.\n * @type {'ArrowLeft'}\n * @constant\n */\nconst LEFT = 'ArrowLeft';\n\n/**\n * The AZERTY-based keyboard 'RIGHT' event code.\n * @type {'ArrowRight'}\n * @constant\n */\nconst RIGHT = 'ArrowRight';\n\n/**\n * The AZERTY-based keyboard 'DOWN' event code.\n * @type {'ArrowDown'}\n * @constant\n */\nconst DOWN = 'ArrowDown';\n\nexport {\n\n    TAB,\n\n    UP,\n    LEFT,\n    RIGHT,\n    DOWN\n};\n","/**\n * The value to convert an angle from degrees to radians.\n * @type {number}\n * @constant\n */\nconst RADIANS = Math.PI / 180;\n\nexport {\n\n    RADIANS\n};\n","/**\n * Creates AABBs.\n *\n * @example\n *\n * const aabb = new AABB(new Vector2(-1, -1), new Vector2(1, 1));\n */\nclass AABB {\n\n    /**\n     * Stores the maximum values of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @private\n     */\n    $maximum;\n\n    /**\n     * Stores the minimum values of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @private\n     */\n    $minimum;\n\n    /**\n     * Gets the center of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get center() {\n\n        return this.minimum.clone().add(this.halfSize);\n    }\n\n    /**\n     * Gets the half-size of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get halfSize() {\n\n        return this.size.clone().scale(0.5);\n    }\n\n    /**\n     * Gets the maximum values of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get maximum() {\n\n        return this.$maximum;\n    }\n\n    /**\n     * Gets the minimum values of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get minimum() {\n\n        return this.$minimum;\n    }\n\n    /**\n     * Gets the size of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get size() {\n\n        return this.$maximum.clone().subtract(this.$minimum);\n    }\n\n    /**\n     * Creates a new AABB.\n     * @param {import('../index.js').Vector2} $minimum The minimum values of the AABB to create.\n     * @param {import('../index.js').Vector2} $maximum The maximum values of the AABB to create.\n     */\n    constructor($minimum, $maximum) {\n\n        this.$maximum = $maximum;\n        this.$minimum = $minimum;\n    }\n\n    /**\n     * Gets the manhattan distance between two AABBs.\n     * @param {import('../index.js').AABB} $a The first AABB to compare.\n     * @param {import('../index.js').AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceManhattan($a, $b) {\n\n        const distanceX = AABB.distanceX($a, $b);\n        const distanceY = AABB.distanceY($a, $b);\n\n        if (distanceX > 0 || distanceY > 0) {\n\n            return Math.max(distanceX, 0) + Math.max(distanceY, 0);\n        }\n\n        return distanceX + distanceY;\n    }\n\n    /**\n     * Gets the distance between two AABBs on the x-axis.\n     * @param {import('../index.js').AABB} $a The first AABB to compare.\n     * @param {import('../index.js').AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceX($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.x - $a.center.x);\n        const distanceMinimum = $a.halfSize.x + $b.halfSize.x;\n\n        return distanceCenter - distanceMinimum;\n    }\n\n    /**\n     * Gets the distance between two AABBs on the y-axis.\n     * @param {import('../index.js').AABB} $a The first AABB to compare.\n     * @param {import('../index.js').AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceY($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.y - $a.center.y);\n        const distanceMinimum = $a.halfSize.y + $b.halfSize.y;\n\n        return distanceCenter - distanceMinimum;\n    }\n\n    /**\n     * Creates a new AABB from the given AABB.\n     * @param {import('../index.js').AABB} $aabb The given AABB.\n     * @returns {import('../index.js').AABB}\n     * @public\n     * @static\n     */\n    static from($aabb) {\n\n        return $aabb.clone();\n    }\n\n    /**\n     * Gets the delta penetration between two AABBs strictly overlaping with each other on the x-axis (the common area).\n     * @param {import('../index.js').AABB} $a The first AABB to compare.\n     * @param {import('../index.js').AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static overlapX($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.x - $a.center.x);\n        const distanceMinimum = $a.halfSize.x + $b.halfSize.x;\n\n        return distanceMinimum - distanceCenter;\n    }\n\n    /**\n     * Gets the delta penetration between two AABBs strictly overlaping with each other on the y-axis (the common area).\n     * @param {import('../index.js').AABB} $a The first AABB to compare.\n     * @param {import('../index.js').AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static overlapY($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.y - $a.center.y);\n        const distanceMinimum = $a.halfSize.y + $b.halfSize.y;\n\n        return distanceMinimum - distanceCenter;\n    }\n\n    /**\n     * Clones the AABB.\n     * @returns {import('../index.js').AABB}\n     * @public\n     */\n    clone() {\n\n        return new AABB(this.$minimum, this.$maximum);\n    }\n\n    /**\n     * Translates the AABB in the world space from a third person point of view.\n     * @param {import('../index.js').Vector2} $vector The translation to apply.\n     * @returns {this}\n     * @public\n     */\n    translate($vector) {\n\n        this.$maximum = this.$maximum.clone().add($vector);\n        this.$minimum = this.$minimum.clone().add($vector);\n\n        return this;\n    }\n}\n\nexport {\n\n    AABB\n};\n\nexport default AABB;\n","import {UTILS, Sprite, Vector2, Collider} from '../index.js';\n\n/**\n * Abstract actors.\n *\n * @example\n *\n * class ActorExample extends Actor {}\n */\nclass Actor {\n\n    /**\n     * Stores the preloadable assets.\n     * @type {string[]}\n     * @public\n     * @static\n     */\n    static preloadables = [];\n\n    /**\n     * Stores the collider.\n     * @type {import('../index.js').Collider}\n     * @private\n     */\n    $collider;\n\n    /**\n     * Stores the components.\n     * @type {Object.<string, any>}\n     * @private\n     */\n    $components;\n\n    /**\n     * Stores the follower actors.\n     * @type {Set<import('../index.js').Actor>}\n     * @private\n     */\n    $followers;\n\n    /**\n     * Stores the sounds.\n     * @type {import('../index.js').Sound[]}\n     * @private\n     */\n    $sounds;\n\n    /**\n     * Stores the sprite.\n     * @type {import('../index.js').Sprite}\n     * @private\n     */\n    $sprite;\n\n    /**\n     * Stores the current stage.\n     * @type {import('../index.js').Stage}\n     * @private\n     */\n    $stage;\n\n    /**\n     * Stores the position.\n     * @type {import('../index.js').Vector2}\n     * @private\n     */\n    $translation;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Stores the vibrations.\n     * @type {import('../index.js').Vibration[]}\n     * @private\n     */\n    $vibrations;\n\n    /**\n     * Stores the z-index.\n     * @type {number}\n     * @private\n     */\n    $zIndex;\n\n    /**\n     * Gets the collider.\n     * @type {import('../index.js').Collider}\n     * @public\n     */\n    get collider() {\n\n        return this.$collider;\n    }\n\n    /**\n     * Gets the current engine.\n     * @type {import('../index.js').Engine}\n     * @public\n     */\n    get engine() {\n\n        return this.stage.engine;\n    }\n\n    /**\n     * Gets the follower actors.\n     * @type {Actor[]}\n     * @public\n     */\n    get followers() {\n\n        return Array.from(this.$followers);\n    }\n\n    /**\n     * Gets the sounds.\n     * @type {import('../index.js').Sound[]}\n     * @public\n     */\n    get sounds() {\n\n        return this.$sounds;\n    }\n\n    /**\n     * Gets the sprite.\n     * @type {import('../index.js').Sprite}\n     * @public\n     */\n    get sprite() {\n\n        return this.$sprite;\n    }\n\n    /**\n     * Gets the current stage.\n     * @type {import('../index.js').Stage}\n     * @public\n     */\n    get stage() {\n\n        return this.$stage;\n    }\n\n    /**\n     * Gets the position.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get translation() {\n\n        return this.$translation;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Gets the vibrations.\n     * @type {import('../index.js').Vibration[]}\n     * @public\n     */\n    get vibrations() {\n\n        return this.$vibrations;\n    }\n\n    /**\n     * Gets the z-index.\n     * @type {number}\n     * @public\n     */\n    get zIndex() {\n\n        return this.$zIndex;\n    }\n\n    /**\n     * Create a new actor.\n     * @param {import('../index.js').Stage} $stage The stage on which to create the actor.\n     */\n    constructor($stage) {\n\n        this.$stage = $stage;\n\n        this.$components = {};\n        this.$followers = new Set();\n        this.$sounds = [];\n        this.$translation = new Vector2(0, 0);\n        this.$uuid = UTILS.uuid();\n        this.$vibrations = [];\n        this.$zIndex = 0;\n    }\n\n    /**\n     * Adds a follower actor.\n     * @param {import('../index.js').Actor} $actor The follower actor to add.\n     * @returns {this}\n     * @public\n     */\n    addFollower($actor) {\n\n        this.$followers.add($actor);\n\n        return this;\n    }\n\n    /**\n     * Adds the given sound.\n     * @param {import('../index.js').Sound} $sound The sound to add.\n     * @returns {this}\n     * @public\n     */\n    addSound($sound) {\n\n        this.$sounds.push($sound);\n\n        return this;\n    }\n\n    /**\n     * Adds the given vibration.\n     * @param {import('../index.js').Vibration} $vibration The vibration to add.\n     * @returns {this}\n     * @public\n     */\n    addVibration($vibration) {\n\n        this.$vibrations.push($vibration);\n\n        return this;\n    }\n\n    /**\n     * Gets a component.\n     * @param {string} $name The name of the component to get.\n     * @returns {any}\n     * @public\n     */\n    getComponent($name) {\n\n        return this.$components[$name];\n    }\n\n    /**\n     * Checks if the actor has a collider.\n     * @returns {boolean}\n     * @public\n     */\n    hasCollider() {\n\n        return this.$collider instanceof Collider;\n    }\n\n    /**\n     * Checks if the actor has the given component.\n     * @param {string} $name The name of the component to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasComponent($name) {\n\n        return this.$components.hasOwnProperty($name) === true;\n    }\n\n    /**\n     * Checks if the actor has the given follower actor.\n     * @param {import('../index.js').Actor} $actor The actor to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasFollower($actor) {\n\n        return this.$followers.has($actor) === true;\n    }\n\n    /**\n     * Checks if the actor has a sprite.\n     * @returns {boolean}\n     * @public\n     */\n    hasSprite() {\n\n        return this.$sprite instanceof Sprite;\n    }\n\n    /**\n     * Called just after removing the actor.\n     * @public\n     */\n    onAfterRemove() {}\n\n    /**\n     * Called just before removing the actor.\n     * @public\n     */\n    onBeforeRemove() {}\n\n    /**\n     * Called when a collision is being resolved.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').Actor} $parameters.$actor The colliding actor.\n     * @param {boolean} $parameters.$east If the origin of collision is facing the east face.\n     * @param {boolean} $parameters.$north If the origin of collision is facing the north face.\n     * @param {boolean} $parameters.$south If the origin of collision is facing the south face.\n     * @param {boolean} $parameters.$west If the origin of collision is facing the west face.\n     * @public\n     */\n    onCollide({$actor, $east, $north, $south, $west}) {}\n\n    /**\n     * Called when a collision is being entered.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').Actor} $parameters.$actor The colliding actor.\n     * @param {boolean} $parameters.$east If the origin of collision is facing the east face.\n     * @param {boolean} $parameters.$north If the origin of collision is facing the north face.\n     * @param {boolean} $parameters.$south If the origin of collision is facing the south face.\n     * @param {boolean} $parameters.$west If the origin of collision is facing the west face.\n     * @public\n     */\n    onCollideEnter({$actor, $east, $north, $south, $west}) {}\n\n    /**\n     * Called when a collision is being left.\n     * @param {import('../index.js').Actor} $actor The colliding actor.\n     * @public\n     */\n    onCollideLeave($actor) {}\n\n    /**\n     * Called when the actor is being created.\n     * @public\n     */\n    onCreate() {}\n\n    /**\n     * Called when a sound is finishing playing.\n     * @param {import('../index.js').Sound} $sound The sound.\n     * @public\n     */\n    onSoundFinish($sound) {}\n\n    /**\n     * Called when the actor is being updated by one tick update.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    onTick($timetick) {}\n\n    /**\n     * Removes a follower actor.\n     * @param {import('../index.js').Actor} $actor The follower actor to remove.\n     * @returns {this}\n     * @public\n     */\n    removeFollower($actor) {\n\n        this.$followers.delete($actor);\n\n        return this;\n    }\n\n    /**\n     * Removes the given sound.\n     * @param {import('../index.js').Sound} $sound The sound to remove.\n     * @returns {this}\n     * @public\n     */\n    removeSound($sound) {\n\n        UTILS.extract($sound, this.$sounds);\n\n        return this;\n    }\n\n    /**\n     * Removes all sound.\n     * @returns {this}\n     * @public\n     */\n    removeSounds() {\n\n        this.$sounds = [];\n\n        return this;\n    }\n\n    /**\n     * Removes the given vibration.\n     * @param {import('../index.js').Vibration} $vibration The vibration to remove.\n     * @returns {this}\n     * @public\n     */\n    removeVibration($vibration) {\n\n        UTILS.extract($vibration, this.$vibrations);\n\n        return this;\n    }\n\n    /**\n     * Removes all vibration.\n     * @returns {this}\n     * @public\n     */\n    removeVibrations() {\n\n        this.$vibrations = [];\n\n        return this;\n    }\n\n    /**\n     * Sets the collider.\n     * @param {import('../index.js').Collider} $collider The collider to set.\n     * @returns {this}\n     * @public\n     */\n    setCollider($collider) {\n\n        this.$collider = $collider;\n\n        return this;\n    }\n\n    /**\n     * Sets a component.\n     * @param {string} $name The name of the component to set.\n     * @param {any} $component The value of the component to set.\n     * @returns {this}\n     * @public\n     */\n    setComponent($name, $component) {\n\n        this.$components[$name] = $component;\n\n        return this;\n    }\n\n    /**\n     * Sets the sprite.\n     * @param {import('../index.js').Sprite} $sprite The sprite to set.\n     * @returns {this}\n     * @public\n     */\n    setSprite($sprite) {\n\n        this.$sprite = $sprite;\n\n        return this;\n    }\n\n    /**\n     * Sets the z-index.\n     * @param {number} $zIndex The z-index to set.\n     * @returns {this}\n     * @public\n     */\n    setZIndex($zIndex) {\n\n        this.$zIndex = $zIndex;\n\n        return this;\n    }\n\n    /**\n     * Translates the actor in the world space from a third person point of view.\n     * @param {import('../index.js').Vector2} $vector The translation to apply.\n     * @returns {this}\n     * @public\n     */\n    translate($vector) {\n\n        const translation = $vector.clone();\n\n        Array.from(this.$followers).forEach(($follower) => {\n\n            if (this.stage.hasActor($follower) === false) {\n\n                this.$followers.delete($follower);\n\n                return;\n            }\n\n            $follower.translate(translation);\n        });\n\n        this.$translation.add(translation);\n\n        return this;\n    }\n\n    /**\n     * Translates the actor in the world space to the given position.\n     * @param {import('../index.js').Vector2} $vector The position to translate to.\n     * @returns {this}\n     * @public\n     */\n    translateTo($vector) {\n\n        const translation = $vector.clone().subtract(this.$translation);\n\n        Array.from(this.$followers).forEach(($follower) => {\n\n            if (this.stage.hasActor($follower) === false) {\n\n                this.$followers.delete($follower);\n\n                return;\n            }\n\n            $follower.translate(translation);\n        });\n\n        this.$translation.add(translation);\n\n        return this;\n    }\n}\n\nexport {\n\n    Actor\n};\n\nexport default Actor;\n","import {Actor} from '../index.js';\n\n/**\n * Factores an actor with preloadable assets.\n * @param {(string | typeof import('../index.js').Actor)[]} $preloadables The preloadable assets (mix of preloadable assets and/or actors with preloadable assets).\n * @returns {typeof import('../index.js').Actor}\n */\nfunction ActorPreloadable($preloadables = []) {\n\n    /**\n     * @type {Set<string>}\n     */\n    const preloadables = new Set();\n\n    $preloadables.forEach(($preloadable) => {\n\n        if (typeof $preloadable === 'string') {\n\n            if (preloadables.has($preloadable) === true) {\n\n                return;\n            }\n\n            preloadables.add($preloadable);\n\n            return;\n        }\n\n        if (typeof $preloadable === typeof Actor) {\n\n            $preloadable.preloadables.forEach(($preloadable) => {\n\n                if (preloadables.has($preloadable) === true) {\n\n                    return;\n                }\n\n                preloadables.add($preloadable);\n            });\n\n            return;\n        }\n    });\n\n    return class extends Actor {\n\n        /**\n         * @type {typeof import('../index.js').Actor.preloadables}\n         */\n        static preloadables = Array.from(preloadables);\n    };\n}\n\nexport {\n\n    ActorPreloadable\n};\n\nexport default ActorPreloadable;\n","/**\n * Creates colliders.\n *\n * @example\n *\n * const collider = new Collider({$boundaries, $traversable, $type});\n */\nclass Collider {\n\n    /**\n     * @typedef {(import('../index.js').COLLIDERTYPES.DYNAMIC | import('../index.js').COLLIDERTYPES.KINETIC | import('../index.js').COLLIDERTYPES.STATIC)} typecollider A collider type.\n     */\n\n    /**\n     * Stores the boundaries.\n     * @type {import('../index.js').AABB}\n     * @private\n     */\n    $boundaries;\n\n    /**\n     * Stores the traversable status.\n     * @type {boolean}\n     * @private\n     */\n    $traversable;\n\n    /**\n     * Stores the collider type.\n     * @type {typecollider}\n     * @private\n     */\n    $type;\n\n    /**\n     * Gets the boundaries.\n     * @type {import('../index.js').AABB}\n     * @public\n     */\n    get boundaries() {\n\n        return this.$boundaries;\n    }\n\n    /**\n     * Gets the traversable status.\n     * @type {boolean}\n     * @public\n     */\n    get traversable() {\n\n        return this.$traversable;\n    }\n\n    /**\n     * Gets the collider type.\n     * @type {typecollider}\n     * @public\n     */\n    get type() {\n\n        return this.$type;\n    }\n\n    /**\n     * Creates a new collider.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').AABB} $parameters.$boundaries The boundaries of the collider to create.\n     * @param {boolean} [$parameters.$traversable] The traversable status of the collider to create.\n     * @param {typecollider} $parameters.$type The type of the collider to create.\n     */\n    constructor({$boundaries, $traversable = false, $type}) {\n\n        this.$boundaries = $boundaries;\n        this.$traversable = $traversable;\n        this.$type = $type;\n    }\n}\n\nexport {\n\n    Collider\n};\n\nexport default Collider;\n","import {CONTENTTYPES, Loop, Stage, SystemActor, SystemAudio, SystemCollision, SystemInput, SystemRender, SystemVibration, UTILS, Vector2, Vector3} from '../index.js';\n\n/**\n * Creates game engines.\n *\n * @example\n *\n * const engine = new Engine({$color, $container, $resolution});\n * engine.initiate(60);\n *\n * await engine.preloadStage(SceneExample);\n *\n * engine.createStage(SceneExample);\n */\nclass Engine {\n\n    /**\n     * Stores the rendering background color.\n     * @type {import('../index.js').Vector3}\n     * @private\n     */\n    $color;\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the loop.\n     * @type {import('../index.js').Loop}\n     * @private\n     */\n    $loop;\n\n    /**\n     * Stores the next stage.\n     * @type {typeof import('../index.js').Stage}\n     * @private\n     */\n    $next;\n\n    /**\n     * Stores the preloaded status of the assets.\n     * @type {Set<string>}\n     * @private\n     */\n    $preloaded;\n\n    /**\n     * Stores the rendering resolution.\n     * @type {import('../index.js').Vector2}\n     * @private\n     */\n    $resolution;\n\n    /**\n     * Stores the current stage.\n     * @type {import('../index.js').Stage}\n     * @private\n     */\n    $stage;\n\n    /**\n     * Stores the current actor system.\n     * @type {import('../index.js').SystemActor}\n     * @private\n     */\n    $systemActor;\n\n    /**\n     * Stores the current audio system.\n     * @type {import('../index.js').SystemAudio}\n     * @private\n     */\n    $systemAudio;\n\n    /**\n     * Stores the current collision system.\n     * @type {import('../index.js').SystemCollision}\n     * @private\n     */\n    $systemCollision;\n\n    /**\n     * Stores the current input system.\n     * @type {import('../index.js').SystemInput}\n     * @private\n     */\n    $systemInput;\n\n    /**\n     * Stores the current render system.\n     * @type {import('../index.js').SystemRender}\n     * @private\n     */\n    $systemRender;\n\n    /**\n     * Stores the current vibration system.\n     * @type {import('../index.js').SystemVibration}\n     * @private\n     */\n    $systemVibration;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Gets the container.\n     * @type {HTMLElement}\n     * @public\n     */\n    get container() {\n\n        return this.$container;\n    }\n\n    /**\n     * Gets the current stage.\n     * @type {import('../index.js').Stage}\n     * @public\n     */\n    get stage() {\n\n        return this.$stage;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Creates a new game engine.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').Vector3} [$parameters.$color] The rendering background color to use.\n     * @param {HTMLElement} $parameters.$container The container for the game engine to create.\n     * @param {import('../index.js').Vector2} [$parameters.$resolution] The rendering resolution to use.\n     */\n    constructor({$color = new Vector3(0, 0, 0), $container, $resolution = new Vector2(320, 240)}) {\n\n        this.$color = $color;\n        this.$container = $container;\n        this.$resolution = $resolution;\n\n        this.$uuid = UTILS.uuid();\n\n        this.$loop = new Loop(this.tick.bind(this));\n        this.$preloaded = new Set();\n\n        this.$systemActor = new SystemActor();\n        this.$systemAudio = new SystemAudio();\n        this.$systemCollision = new SystemCollision();\n        this.$systemInput = new SystemInput({$container: this.$container});\n        this.$systemRender = new SystemRender({$color: this.$color, $container: this.$container, $resolution: this.$resolution});\n        this.$systemVibration = new SystemVibration();\n    }\n\n    /**\n     * Creates the given stage.\n     * @param {typeof import('../index.js').Stage} $stage The stage to create.\n     * @private\n     */\n    $createStage($stage) {\n\n        this.$stage = new $stage(this);\n        this.$stage.onCreate();\n    }\n\n    /**\n     * Creates the given stage on the next tick update.\n     * @param {typeof import('../index.js').Stage} $stage The stage to create on the next tick update.\n     * @public\n     */\n    createStage($stage) {\n\n        this.$next = $stage;\n    }\n\n    /**\n     * @type {import('../index.js').SystemInput['getInput']}\n     */\n    getInput(...$parameters) {\n\n        return this.$systemInput.getInput(...$parameters);\n    }\n\n    /**\n     * @type {import('../index.js').SystemInput['getInputAnalog']}\n     */\n    getInputAnalog(...$parameters) {\n\n        return this.$systemInput.getInputAnalog(...$parameters);\n    }\n\n    /**\n     * Checks if the engine has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        return this.$preloaded.has($asset) === true;\n    }\n\n    /**\n     * Initiates the engine.\n     * @param {number} [$tickrateMinimum] The minimum acceptable number of ticks per virtual second (in ticks/s).\n     * @public\n     */\n    initiate($tickrateMinimum = 60) {\n\n        this.$loop.initiate($tickrateMinimum);\n\n        this.$systemInput.initiate();\n        this.$systemRender.initiate();\n    }\n\n    /**\n     * Preloads the assets of the given stage.\n     * @param {typeof import('../index.js').Stage} $stage The stage to preload the assets from.\n     * @returns {Promise<(undefined | AudioBuffer | WebGLTexture)[]>}\n     * @public\n     */\n    preloadStage($stage) {\n\n        /**\n         * @type {Promise<undefined | AudioBuffer | WebGLTexture>[]}\n         */\n        const promises = [];\n\n        UTILS.deduplicate($stage.preloadables).forEach(($asset) => {\n\n            if (this.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            this.$preloaded.add($asset);\n\n            if (this.$systemAudio.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            if (this.$systemRender.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            /**\n             * @type {Promise<undefined | AudioBuffer | WebGLTexture>}\n             */\n            const promise = new Promise(($resolve) => {\n\n                fetch($asset)\n                .then(($content) => {\n\n                    const contentType = $content.headers.get('Content-Type');\n\n                    switch(contentType) {\n\n                        case CONTENTTYPES.IMAGEJPEG:\n                        case CONTENTTYPES.IMAGEPNG: {\n\n                            this.$systemRender.loadTexture($content)\n                            .then(($texture) => {\n\n                                $resolve($texture);\n                            });\n\n                            break;\n                        }\n\n                        case CONTENTTYPES.AUDIOMPEG:\n                        case CONTENTTYPES.AUDIOWAVE: {\n\n                            this.$systemAudio.loadAudio($content)\n                            .then(($bufferAudio) => {\n\n                                $resolve($bufferAudio);\n                            });\n\n                            break;\n                        }\n\n                        default: {\n\n                            $resolve(undefined);\n                        }\n                    }\n                });\n            });\n\n            promises.push(promise);\n        });\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * @type {import('../index.js').SystemRender['setColor']}\n     */\n    setColor(...$parameters) {\n\n        return this.$systemRender.setColor(...$parameters);\n    }\n\n    /**\n     * @type {import('../index.js').SystemRender['setResolution']}\n     */\n    setResolution(...$parameters) {\n\n        return this.$systemRender.setResolution(...$parameters);\n    }\n\n    /**\n     * Terminates the engine (immediately) (must be used outside the lifecycle of this engine).\n     * @public\n     */\n    terminate() {\n\n        this.$loop.terminate();\n\n        this.$createStage(Stage);\n        this.tick(0);\n\n        this.$systemInput.terminate();\n        this.$systemRender.terminate();\n        this.$systemAudio.terminate();\n        this.$systemVibration.terminate();\n    }\n\n    /**\n     * Updates each system once.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    tick($timetick) {\n\n        if (typeof this.$next === typeof Stage) {\n\n            const stage = this.$next;\n\n            this.$next = undefined;\n\n            this.$createStage(stage);\n        }\n\n        if (typeof this.$stage === 'undefined') {\n\n            return;\n        }\n\n        this.$systemInput.tick();\n        this.$systemActor.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n        this.$systemCollision.tick(this.$stage);\n        this.$systemRender.tick(this.$stage);\n        this.$systemAudio.tick(this.$stage);\n        this.$systemVibration.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n    }\n}\n\nexport {\n\n    Engine\n};\n\nexport default Engine;\n","/**\n * Creates finite state machines.\n * @template {string} Type The generic type of the names of a state.\n *\n * @example\n *\n * const toggle = new FiniteStateMachine([\n *\n *     {\n *         $state: 'ON',\n *         $transitions: [{\n *\n *             $state: 'OFF',\n *             $condition: ({$timer}) => ($timer >= 1000)\n *         }]\n *     },\n *     {\n *         $state: 'OFF',\n *         $transitions: [{\n *\n *             $state: 'ON',\n *             $condition: ({$timer}) => ($timer >= 1000)\n *         }]\n *     }\n * ]);\n */\nclass FiniteStateMachine {\n\n    /**\n     * @callback typestatehandlerenter A state entering handler.\n     * @param {Object} $parameters The given parameters.\n     * @param {Type} $parameters.$previous The previous state.\n     * @returns {void}\n     */\n\n    /**\n     * @callback typestatehandlerleave A state leaving handler.\n     * @param {Object} $parameters The given parameters.\n     * @param {number} $parameters.$timer The timer of the current state.\n     * @param {Type} $parameters.$next The next state.\n     * @returns {void}\n     */\n\n    /**\n     * @callback typestatetransitioncondition A state transition condition.\n     * @param {Object} $parameters The given parameters.\n     * @param {Type} $parameters.$previous The previous state.\n     * @param {number} $parameters.$timer The timer of the current state.\n     * @returns {boolean}\n     */\n\n    /**\n     * @typedef {Object} typestatetransition A transition to a state.\n     * @property {typestatetransitioncondition} typestatetransition.$condition The condition to transition to given state.\n     * @property {Type} typestatetransition.$state The given state to transition to.\n     */\n\n    /**\n     * @typedef {Object} typestate A state.\n     * @property {Type} typestate.$state The name of the state.\n     * @property {typestatehandlerenter} [typestate.$onEnter] The handler to execute when entering the state.\n     * @property {typestatehandlerleave} [typestate.$onLeave] The handler to execute when leaving the state.\n     * @property {typestatetransition[]} typestate.$transitions The transitions to given states.\n     */\n\n    /**\n     * Stores the initiated status.\n     * @type {boolean}\n     * @private\n     */\n    $initiated;\n\n    /**\n     * Stores the previous state.\n     * @type {typestate}\n     * @private\n     */\n    $previous;\n\n    /**\n     * Stores the current state.\n     * @type {typestate}\n     * @private\n     */\n    $state;\n\n    /**\n     * Stores the states.\n     * @type {Map.<Type, typestate>}\n     * @private\n     */\n    $states;\n\n    /**\n     * Stores the timer of the current state.\n     * @type {number}\n     * @private\n     */\n    $timer;\n\n    /**\n     * Creates a new finite state machine.\n     * @param {typestate[]} $data The representation of the finite state machine.\n     */\n    constructor($data) {\n\n        this.$initiated = false;\n        this.$states = new Map();\n        this.$timer = 0;\n\n        $data.forEach(($state) => {\n\n            this.$states.set($state.$state, $state);\n        });\n    }\n\n    /**\n     * Initiates the finite state machine.\n     * @param {Type} $state The name of the state to initiate.\n     * @public\n     */\n    initiate($state) {\n\n        if (this.$initiated === true) {\n\n            return;\n        }\n\n        this.$previous = this.$state\n        this.$state = this.$states.get($state);\n\n        if (typeof this.$state.$onEnter === 'function') {\n\n            this.$state.$onEnter({$previous: undefined});\n        }\n\n        this.$initiated = true;\n    }\n\n    /**\n     * Updates the finite state machine.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    update($timetick) {\n\n        if (this.$initiated === false) {\n\n            return;\n        }\n\n        this.$timer += $timetick;\n\n        for (let $transition of this.$state.$transitions) {\n\n            let previous;\n\n            if (typeof this.$previous !== 'undefined') {\n\n                previous = this.$previous.$state;\n            }\n\n            const current = this.$state.$state;\n            const next = $transition.$state;\n\n            if ($transition.$condition({$previous: previous, $timer: this.$timer}) === true) {\n\n                if (typeof this.$state.$onLeave === 'function') {\n\n                    this.$state.$onLeave({$timer: this.$timer, $next: next});\n                }\n\n                this.$timer = 0;\n\n                this.$previous = this.$state;\n                this.$state = this.$states.get(next);\n\n                if (typeof this.$state.$onEnter === 'function') {\n\n                    this.$state.$onEnter({$previous: current});\n                }\n\n                break;\n            }\n        }\n    }\n}\n\nexport {\n\n    FiniteStateMachine\n};\n\nexport default FiniteStateMachine;\n","/**\n * Creates update loops.\n *\n * @example\n *\n * const loop = new Loop(handler);\n * loop.initiate();\n */\nclass Loop {\n\n    /**\n     * Stores the handler to execute with the update loop.\n     * @type {Function}\n     * @private\n     */\n    $handler;\n\n    /**\n     * Stores the identifier of the last requestAnimationFrame call.\n     * @type {number}\n     * @private\n     */\n    $identifier;\n\n    /**\n     * Stores the time value of the previous tick call.\n     * @type {number}\n     * @private\n     */\n    $timePrevious;\n\n    /**\n     * Stores the global scope used.\n     * @type {typeof globalThis}\n     * @private\n     */\n    $scope;\n\n    /**\n     * Creates a new update loop.\n     * @param {Function} $handler The handler to execute with the update loop.\n     * @param {typeof globalThis} $scope The global scope to use.\n     */\n    constructor($handler, $scope = window) {\n\n        this.$handler = $handler;\n        this.$scope = $scope;\n    }\n\n    /**\n     * Loops the update loop.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    $loop($timetick) {\n\n        const timeCurrent = performance.now();\n\n        if (typeof this.$timePrevious !== 'undefined') {\n\n            const timetickCurrent = timeCurrent - this.$timePrevious;\n            const timetickMinimum = $timetick;\n            const timetickSafe = Math.min(timetickMinimum, timetickCurrent);\n\n            this.$handler(timetickSafe);\n        }\n\n        this.$identifier = this.$scope.requestAnimationFrame(this.$loop.bind(this, $timetick));\n\n        this.$timePrevious = timeCurrent;\n    }\n\n    /**\n     * Initiates the update loop.\n     * @param {number} [$tickrateMinimum] The minimum acceptable number of ticks per virtual second (in ticks/s).\n     * @public\n     */\n    initiate($tickrateMinimum = 60) {\n\n        this.$loop(1000 / $tickrateMinimum);\n    }\n\n    /**\n     * Terminates the update loop.\n     * @public\n     */\n    terminate() {\n\n        if (typeof this.$identifier !== 'undefined') {\n\n            this.$scope.cancelAnimationFrame(this.$identifier);\n\n            this.$timePrevious = undefined;\n        }\n    }\n}\n\nexport {\n\n    Loop\n};\n\nexport default Loop;\n","/**\n * Static default shader sources.\n *\n * @example\n *\n * const sourceFragment = Shader.sourceFragment;\n * const sourceVertex = Shader.sourceVertex;\n */\nclass Shader {\n\n    /**\n     * @typedef {('vec2' | 'vec3')} typetypeattribute A type of attribute.\n     */\n\n    /**\n     * @typedef {('bool' | 'bool[]' | 'float' | 'float[]' | 'int' | 'int[]' | 'mat4' | 'mat4[]' | 'sampler2D' | 'vec2' | 'vec2[]' | 'vec3' | 'vec3[]')} typetypeuniform A type of uniform.\n     */\n\n    /**\n     * Stores the attributes needed by the shader program.\n     * @type {Object.<string, typetypeattribute>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static attributes = {\n\n        'attributePosition': 'vec2',\n        'attributeUvmapping': 'vec2'\n    };\n\n    /**\n     * Stores the fragment shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourceFragment = (\n\n        'precision highp float;' +\n\n        'uniform sampler2D uniformTextureColor;' +\n        'uniform sampler2D uniformTextureOpacity;' +\n        'uniform vec2 uniformTranslationPointOfView;' +\n\n        'varying vec2 varyingUvmapping;' +\n\n        'void main(void) {' +\n\n            'vec4 colorTextureColor = texture2D(uniformTextureColor, varyingUvmapping);' +\n            'vec4 colorTextureOpacity = texture2D(uniformTextureOpacity, varyingUvmapping);' +\n\n            'float alpha = colorTextureColor.a * colorTextureOpacity.r;' +\n\n            'gl_FragColor = vec4(colorTextureColor.rgb, alpha);' +\n        '}'\n    );\n\n    /**\n     * Stores the vertex shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourceVertex = (\n\n        'attribute vec2 attributePosition;' +\n        'attribute vec2 attributeUvmapping;' +\n\n        'uniform vec2 uniformAspect;' +\n        'uniform vec2 uniformSize;' +\n        'uniform vec2 uniformTranslation;' +\n        'uniform vec2 uniformTranslationPointOfView;' +\n\n        'varying vec2 varyingUvmapping;' +\n\n        'void main(void) {' +\n\n            'varyingUvmapping = attributeUvmapping;' +\n\n            'vec2 position = (attributePosition * uniformSize + uniformTranslation);' +\n            'vec2 projection = 2.0 * (position - uniformTranslationPointOfView) / uniformAspect;' +\n\n            'gl_Position = vec4(projection, 0.0, 1.0);' +\n        '}'\n    );\n\n    /**\n     * Stores the uniforms needed by the shader program.\n     * @type {Object.<string, typetypeuniform>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static uniforms = {\n\n        'uniformAspect': 'vec2',\n        'uniformSize': 'vec2',\n        'uniformTextureColor': 'sampler2D',\n        'uniformTextureOpacity': 'sampler2D',\n        'uniformTranslation': 'vec2',\n        'uniformTranslationPointOfView': 'vec2'\n    };\n}\n\nexport {\n\n    Shader\n};\n\nexport default Shader;\n","/**\n * Creates sounds.\n *\n * @example\n *\n * // minimal\n * const sound = new Sound({\n *\n *     $audio: audio\n * });\n *\n * @example\n *\n * // full\n * const sound = new Sound({\n *\n *     $audio: audio,\n *     $durationFadeOut: 125,\n *     $loop: false,\n *     $volume: 1\n * });\n */\nclass Sound {\n\n    /**\n     * Stores the audio source.\n     * @type {string}\n     * @private\n     */\n    $audio;\n\n    /**\n     * Stores fade out duration.\n     * @type {number}\n     * @private\n     */\n    $durationFadeOut;\n\n    /**\n     * Stores the loop status.\n     * @type {boolean}\n     * @private\n     */\n    $loop;\n\n    /**\n     * Stores the volume.\n     * @type {number}\n     * @private\n     */\n    $volume;\n\n    /**\n     * Gets the audio source.\n     * @type {string}\n     * @public\n     */\n    get audio() {\n\n        return this.$audio;\n    }\n\n    /**\n     * Gets fade out duration (in ms) (must be positive).\n     * @type {number}\n     * @public\n     */\n    get durationFadeOut() {\n\n        return this.$durationFadeOut;\n    }\n\n    /**\n     * Gets the loop status.\n     * @type {boolean}\n     * @public\n     */\n    get loop() {\n\n        return this.$loop;\n    }\n\n    /**\n     * Gets the volume.\n     * @type {number}\n     * @public\n     */\n    get volume() {\n\n        return this.$volume;\n    }\n\n    /**\n     * Creates a new sound.\n     * @param {Object} $parameters The given parameters.\n     * @param {string} $parameters.$audio The audio source.\n     * @param {number} [$parameters.$durationFadeOut] The fade out duration (in ms) (must be positive).\n     * @param {boolean} [$parameters.$loop] The loop status.\n     * @param {number} [$parameters.$volume] The volume.\n     */\n    constructor({$audio, $durationFadeOut = 1000 / 60, $loop = false, $volume = 1}) {\n\n        this.$audio = $audio;\n        this.$durationFadeOut = $durationFadeOut;\n        this.$loop = $loop;\n        this.$volume = $volume;\n    }\n}\n\nexport {\n\n    Sound\n};\n\nexport default Sound;\n","import {AABB, Vector2} from '../index.js';\n\n/**\n * Creates sprites.\n *\n * @example\n *\n * // minimal\n * const sprite = new Sprite({\n *\n *     $sizeTarget: new Vector2(32, 32),\n *     $textureColor: textureColor\n * });\n *\n * @example\n *\n * // full\n * const sprite = new Sprite({\n *\n *     $frameSource: new AABB(new Vector2(0, 0), new Vector2(1, 1)),\n *     $sizeTarget: new Vector2(32, 32),\n *     $textureColor: textureColor,\n *     $textureOpacity: textureOpacity\n * });\n */\nclass Sprite {\n\n    /**\n     * Stores the frame to use from the texture sources (with values in [0, 1] ranges).\n     * @type {import('../index.js').AABB}\n     * @private\n     */\n    $frameSource;\n\n    /**\n     * Stores the serialized value of frame to use from the texture sources (with values in [0, 1] ranges).\n     * @type {string}\n     * @private\n     */\n    $frameSourceSerialized;\n\n    /**\n     * Stores the target size.\n     * @type {import('../index.js').Vector2}\n     * @private\n     */\n    $sizeTarget;\n\n    /**\n     * Stores the color texture source.\n     * @type {string}\n     * @private\n     */\n    $textureColor;\n\n    /**\n     * Stores the opacity texture source.\n     * @type {string}\n     * @private\n     */\n    $textureOpacity;\n\n    /**\n     * Gets the frame to use from the texture sources.\n     * @type {import('../index.js').AABB}\n     * @public\n     */\n    get frameSource() {\n\n        return this.$frameSource;\n    }\n\n    /**\n     * Gets the serialized value of the frame to use from the texture sources.\n     * @type {string}\n     * @public\n     */\n    get frameSourceSerialized() {\n\n        return this.$frameSourceSerialized;\n    }\n\n    /**\n     * Gets the target size.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get sizeTarget() {\n\n        return this.$sizeTarget;\n    }\n\n    /**\n     * Gets the color texture source.\n     * @type {string}\n     * @public\n     */\n    get textureColor() {\n\n        return this.$textureColor;\n    }\n\n    /**\n     * Gets the opacity texture source.\n     * @type {string}\n     * @public\n     */\n    get textureOpacity() {\n\n        return this.$textureOpacity;\n    }\n\n    /**\n     * Creates a new sprite.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').AABB} [$parameters.$frameSource] The frame to use from the texture sources (with values in [0, 1] ranges) (if not specified then the full texture is used).\n     * @param {import('../index.js').Vector2} $parameters.$sizeTarget The target size.\n     * @param {string} $parameters.$textureColor The color texture source.\n     * @param {string} [$parameters.$textureOpacity] The opacity texture source.\n     */\n    constructor({$frameSource = new AABB(new Vector2(0, 0), new Vector2(1, 1)), $sizeTarget, $textureColor, $textureOpacity}) {\n\n        this.$frameSource = $frameSource;\n        this.$sizeTarget = $sizeTarget;\n        this.$textureColor = $textureColor;\n        this.$textureOpacity = $textureOpacity;\n\n        this.$frameSourceSerialized = JSON.stringify([\n\n            [$frameSource.minimum.x, $frameSource.minimum.y],\n            [$frameSource.maximum.x, $frameSource.maximum.y]\n        ]);\n    }\n}\n\nexport {\n\n    Sprite\n};\n\nexport default Sprite;\n","import {Actor, UTILS} from '../index.js';\n\n/**\n * Abstract stages.\n *\n * @example\n *\n * class StageExample extends Stage {}\n */\nclass Stage {\n\n    /**\n     * Stores the preloadable assets.\n     * @type {string[]}\n     * @public\n     * @static\n     */\n    static preloadables = [];\n\n    /**\n     * Stores the current actors.\n     * @type {import('../index.js').Actor[]}\n     * @private\n     */\n    $actors;\n\n    /**\n     * Stores the current engine.\n     * @type {import('../index.js').Engine}\n     * @private\n     */\n    $engine;\n\n    /**\n     * Stores the point of view.\n     * @type {import('../index.js').Actor}\n     * @private\n     */\n    $pointOfView;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Gets the current actors.\n     * @type {import('../index.js').Actor[]}\n     * @public\n     */\n    get actors() {\n\n        return this.$actors;\n    }\n\n    /**\n     * Gets the current engine.\n     * @type {import('../index.js').Engine}\n     * @public\n     */\n    get engine() {\n\n        return this.$engine;\n    }\n\n    /**\n     * Gets the point of view.\n     * @type {import('../index.js').Actor}\n     * @public\n     */\n    get pointOfView() {\n\n        return this.$pointOfView;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Creates a new stage.\n     * @param {import('../index.js').Engine} $engine The engine on which to create the stage.\n     */\n    constructor($engine) {\n\n        this.$engine = $engine;\n\n        this.$actors = [];\n        this.$pointOfView = this.createActor(Actor);\n        this.$uuid = UTILS.uuid();\n    }\n\n    /**\n     * Creates the given actor.\n     * @param {typeof import('../index.js').Actor} [$actor] The actor to create.\n     * @public\n     */\n    createActor($actor = Actor) {\n\n        const actor = new $actor(this);\n\n        this.$actors.push(actor);\n\n        actor.onCreate();\n\n        return actor;\n    }\n\n    /**\n     * Checks if the stage has the given actor.\n     * @param {import('../index.js').Actor} $actor The actor to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasActor($actor) {\n\n        return this.$actors.indexOf($actor) !== -1;\n    }\n\n    /**\n     * Called when the stage is being created.\n     * @public\n     */\n    onCreate() {}\n\n    /**\n     * Removes the given actor.\n     * @param {import('../index.js').Actor} $actor The actor to remove.\n     * @public\n     */\n    removeActor($actor) {\n\n        const index = this.$actors.indexOf($actor);\n\n        if (index === -1) {\n\n            return;\n        }\n\n        $actor.onBeforeRemove();\n\n        this.$actors.splice(index, 1);\n\n        $actor.onAfterRemove();\n    }\n\n    /**\n     * Removes all actors.\n     * @public\n     */\n    removeActors() {\n\n        while (this.$actors.length > 0) {\n\n            this.removeActor(this.$actors[0]);\n        }\n    }\n\n    /**\n     * Sets the given actor as the point of view.\n     * @param {import('../index.js').Actor} $actor The actor to set as the point of view.\n     * @public\n     */\n    setPointOfView($actor) {\n\n        this.$pointOfView = $actor;\n    }\n}\n\nexport {\n\n    Stage\n};\n\nexport default Stage;\n","import {Actor, Stage} from '../index.js';\n\n/**\n * Factores a stage with preloadable assets.\n * @param {(string | typeof import('../index.js').Actor)[]} $preloadables The preloadable assets (mix of preloadable assets and/or actors with preloadable assets).\n * @returns {typeof import('../index.js').Stage}\n */\nfunction StagePreloadable($preloadables = []) {\n\n    /**\n     * @type {Set<string>}\n     */\n    const preloadables = new Set();\n\n    $preloadables.forEach(($preloadable) => {\n\n        if (typeof $preloadable === 'string') {\n\n            if (preloadables.has($preloadable) === true) {\n\n                return;\n            }\n\n            preloadables.add($preloadable);\n\n            return;\n        }\n\n        if (typeof $preloadable === typeof Actor) {\n\n            $preloadable.preloadables.forEach(($preloadable) => {\n\n                if (preloadables.has($preloadable) === true) {\n\n                    return;\n                }\n\n                preloadables.add($preloadable);\n            });\n\n            return;\n        }\n    });\n\n    return class extends Stage {\n\n        /**\n         * @type {typeof import('../index.js').Stage.preloadables}\n         */\n        static preloadables = Array.from(preloadables);\n    };\n}\n\nexport {\n\n    StagePreloadable\n};\n\nexport default StagePreloadable;\n","/**\n * Gets the stored data with the given name.\n * @param {string} $name The name of the stored data to get.\n * @returns {any}\n */\nfunction get($name) {\n\n    const value = window.localStorage.getItem($name);\n\n    if (value === null) {\n\n        return undefined;\n    }\n\n    return JSON.parse(value);\n}\n\n/**\n * Checks if the storage has data stored with the given name.\n * @param {string} $name The name of the stored data to check.\n * @returns {boolean}\n */\nfunction has($name) {\n\n    const value = window.localStorage.getItem($name);\n\n    if (value === null) {\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Removes the stored data with the given name.\n * @param {string} $name The name of the stored data to remove.\n */\nfunction remove($name) {\n\n    window.localStorage.removeItem($name);\n}\n\n/**\n * Sets the data to store with the given name.\n * @param {string} $name The name of the data to store.\n * @param {any} $value The value of the data to store.\n */\nfunction set($name, $value) {\n\n    const value = JSON.stringify($value);\n\n    if (typeof value === 'undefined') {\n\n        return;\n    }\n\n    window.localStorage.setItem($name, value);\n}\n\nexport {\n\n    get,\n    has,\n    remove,\n    set\n};\n","/**\n * Creates timelines.\n *\n * @example\n *\n * const timeline = new Timeline(keyframes);\n * timeline.seekTimecode(0);\n * timeline.tick(timetick);\n */\nclass Timeline {\n\n    /**\n     * Stores the keyframes.\n     * @type {import('../index.js').TimelineKeyframe[]}\n     * @private\n     */\n    $keyframes;\n\n    /**\n     * Stores the timecode.\n     * @type {number}\n     * @private\n     */\n    $timecode;\n\n    /**\n     * Gets the timecode.\n     * @type {number}\n     * @public\n     */\n    get timecode() {\n\n        return this.$timecode;\n    }\n\n    /**\n     * Creates a new timeline.\n     * @param {import('../index.js').TimelineKeyframe[]} [$keyframes] The keyframes.\n     */\n    constructor($keyframes = []) {\n\n        this.$keyframes = [...$keyframes].sort(($a, $b) => ($a.timecode - $b.timecode));\n\n        this.$timecode = 0;\n    }\n\n    /**\n     * Seeks to the given name.\n     * @param {string} $name The name of the keyframe to seek to.\n     * @returns {this}\n     * @public\n     */\n    seekName($name) {\n\n        const result = this.$keyframes.find(($keyframe) => ($keyframe.name === $name));\n\n        if (typeof result !== 'undefined') {\n\n            this.seekTimecode(result.timecode);\n        }\n\n        return this;\n    }\n\n    /**\n     * Seeks to the given timecode.\n     * @param {number} $timecode The timecode to seek to (in ms).\n     * @returns {this}\n     * @public\n     */\n    seekTimecode($timecode) {\n\n        this.$timecode = $timecode;\n\n        this.$keyframes.forEach(($keyframe) => {\n\n            if ($keyframe.timecode !== this.$timecode) {\n\n                return;\n            }\n\n            $keyframe.onEnter(this);\n        });\n\n        return this;\n    }\n\n    /**\n     * Updates the timeline by one tick update.\n     * @param {number} $timetick The tick duration (in ms).\n     * @returns {this}\n     * @public\n     */\n    tick($timetick) {\n\n        if ($timetick === 0) {\n\n            return this;\n        }\n\n        const previous = this.$timecode;\n\n        this.$timecode += $timetick;\n\n        const current = this.$timecode;\n\n        this.$keyframes.forEach(($keyframe) => {\n\n            if ($keyframe.timecode <= previous) {\n\n                return;\n            }\n\n            if ($keyframe.timecode > current) {\n\n                return;\n            }\n\n            $keyframe.onEnter(this);\n        });\n\n        return this;\n    }\n}\n\nexport {\n\n    Timeline\n};\n\nexport default Timeline;\n","/**\n * Creates timeline keyframes.\n *\n * @example\n *\n * // minimal\n * const keyframe = new TimelineKeyframe({$onEnter, $timecode});\n *\n * @example\n *\n * // full\n * const keyframe = new TimelineKeyframe({$name, $onEnter, $timecode});\n */\nclass TimelineKeyframe {\n\n    /**\n     * @callback typehandlerenter A handler to execute when entering a keyframe.\n     * @param {import('../index.js').Timeline} $timeline The reference timeline.\n     * @returns {void}\n     */\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Stores the keyframe entering handler.\n     * @type {typehandlerenter}\n     * @private\n     */\n    $onEnter;\n\n    /**\n     * Stores the timecode.\n     * @type {number}\n     * @private\n     */\n    $timecode;\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Gets the keyframe entering handler.\n     * @type {typehandlerenter}\n     * @public\n     */\n    get onEnter() {\n\n        return this.$onEnter;\n    }\n\n    /**\n     * Gets the timecode.\n     * @type {number}\n     * @public\n     */\n    get timecode() {\n\n        return this.$timecode;\n    }\n\n    /**\n     * Creates a new timeline keyframe.\n     * @param {Object} $parameters The given parameters.\n     * @param {string} [$parameters.$name] The name.\n     * @param {typehandlerenter} $parameters.$onEnter The keyframe entering handler.\n     * @param {number} $parameters.$timecode The timecode.\n     */\n    constructor({$name, $onEnter, $timecode}) {\n\n        this.$name = $name;\n        this.$onEnter = $onEnter;\n        this.$timecode = $timecode;\n    }\n}\n\nexport {\n\n    TimelineKeyframe\n};\n\nexport default TimelineKeyframe;\n","/**\n * Deduplicates the items of the given array (a new array is created).\n * @template T\n * @param {T[]} $array The array.\n * @returns {T[]}\n */\nfunction deduplicate($array) {\n\n    return Array.from(new Set($array));\n}\n\n/**\n * Extracts the given item from the given array.\n * @template T\n * @param {T} $item The item to remove.\n * @param {T[]} $array The array.\n * @returns {T[]}\n */\nfunction extract($item, $array) {\n\n    const index = $array.indexOf($item);\n\n    if (index === -1) {\n\n        return [];\n    }\n\n    return $array.splice(index, 1);\n}\n\n/**\n * Resolves when the browser is ready to perform an animation frame request.\n * @returns Promise<void>\n */\nfunction frame() {\n\n    /**\n     * @type {Promise<number>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        window.requestAnimationFrame($resolve);\n    });\n\n    return promise;\n}\n\n/**\n * Resolves when the user has interacted at least once since page load.\n * @returns {Promise<void>}\n */\nfunction ready() {\n\n    /**\n     * @type {Promise<void>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        /**\n         * @type {number}\n         */\n        let id;\n\n        const check = () => {\n\n            if (navigator.userActivation.hasBeenActive === false) {\n\n                id = window.requestAnimationFrame(check);\n\n                return;\n            }\n\n            window.cancelAnimationFrame(id);\n\n            $resolve();\n        };\n\n        id = window.requestAnimationFrame(check);\n    });\n\n    return promise;\n}\n\n/**\n * Resolves when the given delay has passed.\n * @param {number} $delay The delay (in ms).\n * @returns Promise<void>\n */\nfunction sleep($delay) {\n\n    /**\n     * @type {Promise<void>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        window.setTimeout($resolve, $delay);\n    });\n\n    return promise;\n}\n\n/**\n * Gets a new UUID.\n * @returns {string}\n */\nfunction uuid() {\n\n    return window.crypto.randomUUID();\n}\n\nexport {\n\n    deduplicate,\n    extract,\n    frame,\n    ready,\n    sleep,\n    uuid\n};\n","import {MATHEMATICS} from '../index.js';\n\n/**\n * Creates two-dimensional vectors.\n *\n * @example\n *\n * // without chaining\n * const vector = new Vector2(3, 2);\n * vector.add(new Vector2(1, 0));\n *\n * @example\n *\n * // with chaining\n * const vector = new Vector2(3, 2).add(new Vector2(1, 0));\n */\nclass Vector2 {\n\n    /**\n     * Stores the x component.\n     * @type {number}\n     * @private\n     */\n    $x;\n\n    /**\n     * Stores the y component.\n     * @type {number}\n     * @private\n     */\n    $y;\n\n    /**\n     * Gets the x component.\n     * @type {number}\n     * @public\n     */\n    get x() {\n\n        return this.$x;\n    }\n\n    /**\n     * Gets the y component.\n     * @type {number}\n     * @public\n     */\n    get y() {\n\n        return this.$y;\n    }\n\n    /**\n     * Creates a new two-dimensional vector.\n     * @param {number} $x The x component of the vector to create.\n     * @param {number} $y The y component of the vector to create.\n     */\n    constructor($x, $y) {\n\n        this.$x = $x;\n        this.$y = $y;\n    }\n\n    /**\n     * Creates a new vector from the given vector.\n     * @param {import('../index.js').Vector2} $vector The given vector.\n     * @returns {import('../index.js').Vector2}\n     * @public\n     * @static\n     */\n    static from($vector) {\n\n        return $vector.clone();\n    }\n\n    /**\n     * Adds the given vector.\n     * @param {import('../index.js').Vector2} $vector The vector to add.\n     * @returns {this}\n     * @public\n     */\n    add($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x + $vector.x;\n        this.$y = y + $vector.y;\n\n        return this;\n    }\n\n    /**\n     * Clones the vector.\n     * @returns {import('../index.js').Vector2}\n     * @public\n     */\n    clone() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        return new Vector2(x, y);\n    }\n\n    /**\n     * Checks the equality with the given vector.\n     * @param {import('../index.js').Vector2} $vector The vector to check with.\n     * @returns {boolean}\n     * @public\n     */\n    equal($vector) {\n\n        return this.$x === $vector.x\n        && this.$y === $vector.y;\n    }\n\n    /**\n     * Gets the length of the vector.\n     * @returns {number}\n     * @public\n     */\n    length() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    /**\n     * Multiplies with the given vector.\n     * @param {import('../index.js').Vector2} $vector The vector to multiply with.\n     * @returns {this}\n     * @public\n     */\n    multiply($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x * $vector.x;\n        this.$y = y * $vector.y;\n\n        return this;\n    }\n\n    /**\n     * Negates the vector.\n     * @returns {this}\n     * @public\n     */\n    negate() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = - x;\n        this.$y = - y;\n\n        return this;\n    }\n\n    /**\n     * Normalizes the vector.\n     * @returns {this}\n     * @public\n     */\n    normalize() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        let length = x * x + y * y;\n\n        if (length > 0) {\n\n            length = 1 / Math.sqrt(length);\n        }\n\n        this.$x = x * length;\n        this.$y = y * length;\n\n        return this;\n    }\n\n    /**\n     * Rotates the vector by the given angle.\n     * @param {number} $angle The angle of rotation to apply (in degrees) (clockwise).\n     * @returns {this}\n     * @public\n     */\n    rotate($angle) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        const radians = $angle * MATHEMATICS.RADIANS;\n\n        const cosine = Math.cos(radians);\n        const sine = Math.sin(radians);\n\n        this.$x = x * cosine - y * sine;\n        this.$y = x * sine + y * cosine;\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by the given scalar factor.\n     * @param {number} $factor The scalar factor to multiply with.\n     * @returns {this}\n     * @public\n     */\n    scale($factor) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x * $factor;\n        this.$y = y * $factor;\n\n        return this;\n    }\n\n    /**\n     * Subtracts the given vector.\n     * @param {import('../index.js').Vector2} $vector The vector to subtract.\n     * @returns {this}\n     * @public\n     */\n    subtract($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x - $vector.x;\n        this.$y = y - $vector.y;\n\n        return this;\n    }\n}\n\nexport {\n\n    Vector2\n};\n\nexport default Vector2;\n","/**\n * Creates three-dimensional vectors.\n *\n * @example\n *\n * // without chaining\n * const vector = new Vector3(3, 2, 1);\n * vector.add(new Vector3(1, 0, -1));\n *\n * @example\n *\n * // with chaining\n * const vector = new Vector3(3, 2, 1).add(new Vector3(1, 0, -1));\n */\nclass Vector3 {\n\n    /**\n     * Stores the x component.\n     * @type {number}\n     * @private\n     */\n    $x;\n\n    /**\n     * Stores the y component.\n     * @type {number}\n     * @private\n     */\n    $y;\n\n    /**\n     * Stores the z component.\n     * @type {number}\n     * @private\n     */\n    $z;\n\n    /**\n     * Gets the x component.\n     * @type {number}\n     * @public\n     */\n    get x() {\n\n        return this.$x;\n    }\n\n    /**\n     * Gets the y component.\n     * @type {number}\n     * @public\n     */\n    get y() {\n\n        return this.$y;\n    }\n\n    /**\n     * Gets the z component.\n     * @type {number}\n     * @public\n     */\n    get z() {\n\n        return this.$z;\n    }\n\n    /**\n     * Creates a new three-dimensional vector.\n     * @param {number} $x The x component of the vector to create.\n     * @param {number} $y The y component of the vector to create.\n     * @param {number} $z The z component of the vector to create.\n     */\n    constructor($x, $y, $z) {\n\n        this.$x = $x;\n        this.$y = $y;\n        this.$z = $z;\n    }\n\n    /**\n     * Creates a new vector from the given vector.\n     * @param {import('../index.js').Vector3} $vector The given vector.\n     * @returns {import('../index.js').Vector3}\n     * @public\n     * @static\n     */\n    static from($vector) {\n\n        return $vector.clone();\n    }\n\n    /**\n     * Adds the given vector.\n     * @param {import('../index.js').Vector3} $vector The vector to add.\n     * @returns {this}\n     * @public\n     */\n    add($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x + $vector.x;\n        this.$y = y + $vector.y;\n        this.$z = z + $vector.z;\n\n        return this;\n    }\n\n    /**\n     * Clones the vector.\n     * @returns {import('../index.js').Vector3}\n     * @public\n     */\n    clone() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        return new Vector3(x, y, z);\n    }\n\n    /**\n     * Checks the equality with the given vector.\n     * @param {import('../index.js').Vector3} $vector The vector to check with.\n     * @returns {boolean}\n     * @public\n     */\n    equal($vector) {\n\n        return this.$x === $vector.x\n        && this.$y === $vector.y\n        && this.$z === $vector.z;\n    }\n\n    /**\n     * Gets the length of the vector.\n     * @returns {number}\n     * @public\n     */\n    length() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n\n    /**\n     * Multiplies with the given vector.\n     * @param {import('../index.js').Vector3} $vector The vector to multiply with.\n     * @returns {this}\n     * @public\n     */\n    multiply($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x * $vector.x;\n        this.$y = y * $vector.y;\n        this.$z = z * $vector.z;\n\n        return this;\n    }\n\n    /**\n     * Negates the vector.\n     * @returns {this}\n     * @public\n     */\n    negate() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = - x;\n        this.$y = - y;\n        this.$z = - z;\n\n        return this;\n    }\n\n    /**\n     * Normalizes the vector.\n     * @returns {this}\n     * @public\n     */\n    normalize() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        let length = x * x + y * y + z * z;\n\n        if (length > 0) {\n\n            length = 1 / Math.sqrt(length);\n        }\n\n        this.$x = x * length;\n        this.$y = y * length;\n        this.$z = z * length;\n\n        return this;\n    }\n\n    /**\n     * Rotates the vector.\n     * @param {import('../index.js').Quaternion} $quaternion The rotation to apply.\n     * @returns {this}\n     * @public\n     */\n    rotate($quaternion) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        const xq = $quaternion.x;\n        const yq = $quaternion.y;\n        const zq = $quaternion.z;\n        const wq = $quaternion.w;\n\n        let xu = yq * z - zq * y;\n        let yu = zq * x - xq * z;\n        let zu = xq * y - yq * x;\n\n        let xv = yq * zu - zq * yu;\n        let yv = zq * xu - xq * zu;\n        let zv = xq * yu - yq * xu;\n\n        const w = wq * 2;\n\n        xu *= w;\n        yu *= w;\n        zu *= w;\n\n        xv *= 2;\n        yv *= 2;\n        zv *= 2;\n\n        this.$x = x + xu + xv;\n        this.$y = y + yu + yv;\n        this.$z = z + zu + zv;\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by the given scalar factor.\n     * @param {number} $factor The scalar factor to multiply with.\n     * @returns {this}\n     * @public\n     */\n    scale($factor) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x * $factor;\n        this.$y = y * $factor;\n        this.$z = z * $factor;\n\n        return this;\n    }\n\n    /**\n     * Subtracts the given vector.\n     * @param {import('../index.js').Vector3} $vector The vector to subtract.\n     * @returns {this}\n     * @public\n     */\n    subtract($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x - $vector.x;\n        this.$y = y - $vector.y;\n        this.$z = z - $vector.z;\n\n        return this;\n    }\n}\n\nexport {\n\n    Vector3\n};\n\nexport default Vector3;\n","/**\n * Creates vibrations.\n *\n * @example\n *\n * const vibration = new Vibration({\n *\n *     $duration: 200,\n *     $intensityFrequencyHigh: 0.8,\n *     $intensityFrequencyLow: 0.2\n * });\n */\nclass Vibration {\n\n    /**\n     * Stores the duration.\n     * @type {number}\n     * @private\n     */\n    $duration;\n\n    /**\n     * Stores the intensity of the high-frequency (weak) rumble motors.\n     * @type {number}\n     * @private\n     */\n    $intensityFrequencyHigh;\n\n    /**\n     * Stores the intensity of the low-frequency (strong) rumble motors.\n     * @type {number}\n     * @private\n     */\n    $intensityFrequencyLow;\n\n    /**\n     * Gets the duration (in ms).\n     * @type {number}\n     * @public\n     */\n    get duration() {\n\n        return this.$duration;\n    }\n\n    /**\n     * Gets the intensity of the high-frequency (weak) rumble motors (with value in [0, 1] range).\n     * @type {number}\n     * @public\n     */\n    get intensityFrequencyHigh() {\n\n        return this.$intensityFrequencyHigh;\n    }\n\n    /**\n     * Gets the intensity of the low-frequency (strong) rumble motors (with value in [0, 1] range).\n     * @type {number}\n     * @public\n     */\n    get intensityFrequencyLow() {\n\n        return this.$intensityFrequencyLow;\n    }\n\n    /**\n     * Creates a new vibration.\n     * @param {Object} $parameters The given parameters.\n     * @param {number} $parameters.$duration The duration (in ms).\n     * @param {number} $parameters.$intensityFrequencyHigh The intensity of the high-frequency (weak) rumble motors (with value in [0, 1] range).\n     * @param {number} $parameters.$intensityFrequencyLow The intensity of the low-frequency (strong) rumble motors (with value in [0, 1] range).\n     */\n    constructor({$duration, $intensityFrequencyHigh, $intensityFrequencyLow}) {\n\n        this.$duration = $duration;\n        this.$intensityFrequencyHigh = $intensityFrequencyHigh;\n        this.$intensityFrequencyLow = $intensityFrequencyLow;\n    }\n}\n\nexport {\n\n    Vibration\n};\n\nexport default Vibration;\n","/**\n * Creates gamepad events.\n *\n * @example\n *\n * const event = new EventGamepad(type, code, data);\n */\nclass EventGamepad extends Event {\n\n    /**\n     * @typedef {Object} typedatavibration The event data.\n     * @property {number} typedatavibration.$duration The duration of the vibration (in ms).\n     * @property {number} typedatavibration.$intensityFrequencyHigh The intensity of the high-frequency (weak) rumble motors (with value in [0, 1] range).\n     * @property {number} typedatavibration.$intensityFrequencyLow The intensity of the low-frequency (strong) rumble motors (with value in [0, 1] range).\n     */\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the data.\n     * @type {typedatavibration}\n     * @private\n     */\n    $data;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the data.\n     * @type {typedatavibration}\n     * @public\n     */\n    get data() {\n\n        return this.$data;\n    }\n\n    /**\n     * Creates a new gamepad event.\n     * @param {('gamepadvibrate')} $type The event type.\n     * @param {string} $code The event code.\n     * @param {typedatavibration} $data The data.\n     */\n    constructor($type, $code, $data) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$data = $data;\n    }\n}\n\nexport {\n\n    EventGamepad\n};\n\nexport default EventGamepad;\n","/**\n * Creates gamepad analog events.\n *\n * @example\n *\n * const event = new EventGamepadAnalog(type, code, value);\n */\nclass EventGamepadAnalog extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the analog value.\n     * @type {number}\n     * @private\n     */\n    $value;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the analog value.\n     * @type {number}\n     * @public\n     */\n    get value() {\n\n        return this.$value;\n    }\n\n    /**\n     * Creates a new gamepad analog event.\n     * @param {('gamepadanalog')} $type The event type.\n     * @param {string} $code The event code.\n     * @param {number} $value The analog value.\n     */\n    constructor($type, $code, $value) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$value = $value;\n    }\n}\n\nexport {\n\n    EventGamepadAnalog\n};\n\nexport default EventGamepadAnalog;\n","/**\n * Creates gamepad digital events.\n *\n * @example\n *\n * const event = new EventGamepadDigital(type, code);\n */\nclass EventGamepadDigital extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Creates a new gamepad digital event.\n     * @param {('gamepadconnect' | 'gamepaddown' | 'gamepadup' | 'gamepadvibrate')} $type The event type.\n     * @param {string} $code The event code.\n     */\n    constructor($type, $code) {\n\n        super($type);\n\n        this.$code = $code;\n    }\n}\n\nexport {\n\n    EventGamepadDigital\n};\n\nexport default EventGamepadDigital;\n","/**\n * Creates actor systems.\n *\n * @example\n *\n * const system = new SystemActor();\n * system.tick({$stage, $timetick});\n */\nclass SystemActor {\n\n    /**\n     * Updates the system by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    tick({$stage, $timetick}) {\n\n        $stage.actors.forEach(($actor) => {\n\n            $actor.onTick($timetick);\n        });\n    }\n}\n\nexport {\n\n    SystemActor\n};\n\nexport default SystemActor;\n","import {UTILS} from '../index.js';\n\n/**\n * Creates audio systems.\n *\n * @example\n *\n * const system = new SystemAudio();\n */\nclass SystemAudio {\n\n    /**\n     * @typedef {Object} typedataaudio The audio data.\n     * @property {AudioBufferSourceNode} typeaudio.$audio The audio buffer source node.\n     * @property {GainNode} typeaudio.$gain The gain.\n     * @property {number} typeaudio.$startTime The start time of the audio in the audio context timeline.\n     */\n\n    /**\n     * Stores the safe delay before removing the audio context when the system terminates.\n     * @type {number}\n     * @public\n     * @readonly\n     * @static\n     */\n    static DELAYCONTEXTCLEARSAFE = 1000;\n\n    /**\n     * Stores the cache of the audio assets.\n     * @type {Map<string, AudioBuffer>}\n     * @private\n     */\n    $cache;\n\n    /**\n     * Stores the audio context.\n     * @type {AudioContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Stores the mapping between the playing sounds and their audio data.\n     * @type {Map<import('../index.js').Sound, typedataaudio>}\n     * @private\n     */\n    $mappingSoundsPlaying;\n\n    /**\n     * Creates a new audio system.\n     */\n    constructor() {\n\n        this.$cache = new Map();\n        this.$context = new AudioContext();\n        this.$mappingSoundsPlaying = new Map();\n    }\n\n    /**\n     * Creates the values for the fade out curve.\n     * @param {number} $volume The volume of the sound.\n     * @returns {number[]}\n     * @private\n     */\n    $createValuesCurveFadeOut($volume) {\n\n        return [\n\n            - 1 + $volume * 1,\n            - 1 + $volume * 0\n        ];\n    }\n\n    /**\n     * Loads the audio from the given audio file content.\n     * @param {Response} $content The audio file content.\n     * @returns {Promise<AudioBuffer>}\n     * @private\n     */\n    $loadAudio($content) {\n\n        const promise = new Promise(($resolve) => {\n\n            $content.arrayBuffer()\n            .then(($bufferArray) => (this.$context.decodeAudioData($bufferArray))\n            .then(($bufferAudio) => {\n\n                this.$cache.set($content.url, $bufferAudio);\n\n                $resolve($bufferAudio);\n            }));\n        });\n\n        return promise;\n    }\n\n    /**\n     * Prepares the audio from the given audio source.\n     * @param {string} $audio The audio source.\n     * @private\n     */\n    $prepareAudio($audio) {\n\n        if (this.$cache.has($audio) === true) {\n\n            return;\n        }\n\n        this.$cache.set($audio, undefined);\n\n        fetch($audio)\n        .then(($content) => (this.$loadAudio($content)));\n    }\n\n    /**\n     * Terminates the given sound.\n     * @param {import('../index.js').Sound} $sound The sound to terminate.\n     * @private\n     */\n    $terminateSound($sound) {\n\n        const {$audio, $gain, $startTime} = this.$mappingSoundsPlaying.get($sound);\n\n        if ($sound.loop === false\n        && this.$context.currentTime > $startTime + Math.max(0, $audio.buffer.duration - ($sound.durationFadeOut / 1000))) {\n\n            return\n        }\n\n        $gain.gain.cancelScheduledValues(this.$context.currentTime);\n        $gain.gain.setValueCurveAtTime(\n\n            this.$createValuesCurveFadeOut($sound.volume),\n            this.$context.currentTime,\n            Math.min($audio.buffer.duration, $sound.durationFadeOut / 1000)\n        );\n\n        this.$mappingSoundsPlaying.delete($sound);\n\n        $audio.onended = () => {\n\n            $audio.disconnect();\n            $gain.disconnect();\n        };\n    }\n\n    /**\n     * Checks if the system has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        return this.$cache.has($asset) === true;\n    }\n\n    /**\n     * Loads the audio from the given audio file content.\n     * @param {Response} $content The audio file content.\n     * @returns {Promise<AudioBuffer>}\n     * @public\n     */\n    loadAudio($content) {\n\n        if (this.$cache.has($content.url) === true) {\n\n            const promise = new Promise(($resolve) => {\n\n                const audio = this.$cache.get($content.url);\n\n                $resolve(audio);\n            });\n\n            return promise;\n        }\n\n        this.$cache.set($content.url, undefined);\n\n        return this.$loadAudio($content);\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        let delayFadeOut = 0;\n\n        Array.from(this.$mappingSoundsPlaying.keys()).forEach(($sound) => {\n\n            if ($sound.durationFadeOut > delayFadeOut) {\n\n                delayFadeOut = $sound.durationFadeOut;\n            }\n\n            this.$terminateSound($sound);\n        });\n\n        window.setTimeout(() => {\n\n            this.$context.close();\n            this.$context = undefined;\n\n        }, delayFadeOut + SystemAudio.DELAYCONTEXTCLEARSAFE);\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {import('../index.js').Stage} $stage The stage on which to execute the system.\n     * @public\n     */\n    tick($stage) {\n\n        /**\n         * @type {import('../index.js').Sound[]}\n         */\n        const previous = Array.from(this.$mappingSoundsPlaying.keys());\n\n        $stage.actors.forEach(($actor) => {\n\n            $actor.sounds.forEach(($sound) => {\n\n                if (this.$mappingSoundsPlaying.has($sound) === true) {\n\n                    UTILS.extract($sound, previous);\n\n                    return;\n                }\n\n                this.$prepareAudio($sound.audio);\n\n                if (typeof this.$cache.get($sound.audio) === 'undefined') {\n\n                    return;\n                }\n\n                const bufferAudio = this.$cache.get($sound.audio);\n\n                const audio = this.$context.createBufferSource();\n                audio.buffer = bufferAudio;\n                audio.connect(this.$context.destination);\n                audio.start(0);\n\n                const gain = this.$context.createGain();\n                gain.gain.value = $sound.volume - 1;\n                gain.connect(this.$context.destination);\n\n                audio.connect(gain);\n\n                this.$mappingSoundsPlaying.set($sound, {\n\n                    $audio: audio,\n                    $gain: gain,\n                    $startTime: this.$context.currentTime\n                });\n\n                if ($sound.loop === true) {\n\n                    audio.loop = true;\n\n                    return;\n                }\n\n                gain.gain.setValueCurveAtTime(\n\n                    this.$createValuesCurveFadeOut($sound.volume),\n                    this.$context.currentTime + Math.max(0, audio.buffer.duration - ($sound.durationFadeOut / 1000)),\n                    Math.min(audio.buffer.duration, $sound.durationFadeOut / 1000)\n                );\n\n                audio.onended = () => {\n\n                    audio.disconnect();\n                    gain.disconnect();\n\n                    this.$mappingSoundsPlaying.delete($sound);\n\n                    $actor.removeSound($sound);\n                    $actor.onSoundFinish($sound);\n                };\n            });\n        });\n\n        previous.forEach(($sound) => {\n\n            this.$terminateSound($sound);\n        });\n    }\n}\n\nexport {\n\n    SystemAudio\n};\n\nexport default SystemAudio;\n","import {AABB, COLLIDERTYPES, Vector2} from '../index.js';\n\n/**\n * Creates collision systems.\n *\n * @example\n *\n * const system = new SystemCollision();\n */\nclass SystemCollision {\n\n    /**\n     * @typedef {[import('../index.js').Actor, import('../index.js').Actor]} typepairactor A pair of actors.\n     */\n\n    /**\n     * Stores the current collision pairs.\n     * @type {typepairactor[]}\n     * @private\n     */\n    $current;\n\n    /**\n     * Stores the previous collision pairs.\n     * @type {typepairactor[]}\n     * @private\n     */\n    $previous;\n\n    /**\n     * Creates a new collision system.\n     */\n    constructor() {\n\n        this.$current = [];\n        this.$previous = [];\n    }\n\n    /**\n     * Checks if a collision previously existed between two given actors.\n     * @param {import('../index.js').Actor} $dynamic The first actor to check on.\n     * @param {import('../index.js').Actor} $inert The second actor to check with.\n     * @returns {boolean}\n     * @private\n     */\n    $hasCollisionPrevious($dynamic, $inert) {\n\n        const result = this.$previous.find(([$dynamicPrevious, $inertPrevious]) => {\n\n            return $dynamic === $dynamicPrevious\n            && $inert === $inertPrevious;\n\n        });\n\n        return typeof result !== 'undefined';\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {import('../index.js').Stage} $stage The stage on which to execute the system.\n     * @public\n     */\n    tick($stage) {\n\n        /**\n         * @typedef {Object} typepaircollision A pair of candidates for collision.\n         * @property {number} typepaircollision.$distance The manhattan distance between the two actors.\n         * @property {import('../index.js').Actor} typepaircollision.$dynamic The first actor.\n         * @property {import('../index.js').Actor} typepaircollision.$inert The second actor.\n         */\n\n        /**\n         * @type {typepaircollision[]}\n         */\n        const pairs = [];\n\n        /**\n         * @type {import('../index.js').Actor[]}\n         */\n        const dynamics = [];\n\n        /**\n         * @type {import('../index.js').Actor[]}\n         */\n        const kinetics = [];\n\n        /**\n         * @type {import('../index.js').Actor[]}\n         */\n        const statics = [];\n\n        $stage.actors.forEach(($actor) => {\n\n            if ($actor.hasCollider() === false) {\n\n                return;\n            }\n\n            switch ($actor.collider.type) {\n\n                case COLLIDERTYPES.DYNAMIC: {\n\n                    dynamics.push($actor);\n\n                    break;\n                }\n\n                case COLLIDERTYPES.KINETIC: {\n\n                    kinetics.push($actor);\n\n                    break;\n                }\n\n                case COLLIDERTYPES.STATIC: {\n\n                    statics.push($actor);\n\n                    break;\n                }\n            }\n        });\n\n        const inerts = [...statics, ...kinetics];\n\n        if (inerts.length === 0) {\n\n            return;\n        }\n\n        dynamics.forEach(($dynamic) => {\n\n            const boundariesDynamic = $dynamic.collider.boundaries.clone().translate($dynamic.translation);\n            const centerBoundariesDynamic = new AABB(boundariesDynamic.center, boundariesDynamic.center);\n\n            inerts.forEach(($inert) => {\n\n                const boundariesInert = $inert.collider.boundaries.clone().translate($inert.translation);\n\n                const distance = AABB.distanceManhattan(centerBoundariesDynamic, boundariesInert);\n\n                pairs.push({\n\n                    $distance: distance,\n                    $dynamic: $dynamic,\n                    $inert: $inert\n                });\n            });\n        });\n\n        pairs.sort(($a, $b) => {\n\n            return $a.$distance - $b.$distance;\n        });\n\n        pairs.forEach(($pair) => {\n\n            const {$dynamic, $inert} = $pair;\n\n            if ($stage.hasActor($dynamic) === false) {\n\n                return;\n            }\n\n            if ($stage.hasActor($inert) === false) {\n\n                return;\n            }\n\n            const boundariesDynamic = $dynamic.collider.boundaries.clone().translate($dynamic.translation);\n            const boundariesInert = $inert.collider.boundaries.clone().translate($inert.translation);\n\n            const overlapX = AABB.overlapX(boundariesDynamic, boundariesInert);\n\n            if (overlapX <= 0) {\n\n                return;\n            }\n\n            const overlapY = AABB.overlapY(boundariesDynamic, boundariesInert);\n\n            if (overlapY <= 0) {\n\n                return;\n            }\n\n            this.$current.push([$dynamic, $inert]);\n\n            const directionX = Math.sign($inert.translation.x - $dynamic.translation.x);\n            const directionY = Math.sign($inert.translation.y - $dynamic.translation.y);\n\n            const checkMinimumX = (overlapX <= overlapY);\n            const checkMinimumY = (overlapY <= overlapX);\n\n            if ($dynamic.collider.traversable === false\n            && $inert.collider.traversable === false) {\n\n                const resolverDynamic = new Vector2(\n\n                    checkMinimumX ? - directionX * overlapX : 0,\n                    checkMinimumY ? - directionY * overlapY : 0\n                );\n\n                $dynamic.translate(resolverDynamic);\n            }\n\n            const originDynamicEast = checkMinimumX === true && directionX === 1;\n            const originDynamicNorth = checkMinimumY === true && directionY === 1;\n            const originDynamicSouth = checkMinimumY === true && directionY === -1;\n            const originDynamicWest = checkMinimumX === true && directionX === -1;\n\n            if (this.$hasCollisionPrevious($dynamic, $inert) === false) {\n\n                $dynamic.onCollideEnter({\n\n                    $actor: $inert,\n                    $east: originDynamicEast,\n                    $north: originDynamicNorth,\n                    $south: originDynamicSouth,\n                    $west: originDynamicWest\n                });\n\n                $inert.onCollideEnter({\n\n                    $actor: $dynamic,\n                    $east: originDynamicWest,\n                    $north: originDynamicSouth,\n                    $south: originDynamicNorth,\n                    $west: originDynamicEast\n                });\n            }\n\n            $dynamic.onCollide({\n\n                $actor: $inert,\n                $east: originDynamicEast,\n                $north: originDynamicNorth,\n                $south: originDynamicSouth,\n                $west: originDynamicWest\n            });\n\n            $inert.onCollide({\n\n                $actor: $dynamic,\n                $east: originDynamicWest,\n                $north: originDynamicSouth,\n                $south: originDynamicNorth,\n                $west: originDynamicEast\n            });\n        });\n\n        this.$previous.filter(([$dynamicPrevious, $inertPrevious]) => {\n\n            const result = this.$current.find(([$dynamic, $inert]) => {\n\n                return $dynamic === $dynamicPrevious\n                && $inert === $inertPrevious;\n            });\n\n            return typeof result === 'undefined';\n\n        }).forEach(([$dynamicPrevious, $inertPrevious]) => {\n\n            $dynamicPrevious.onCollideLeave($inertPrevious);\n            $inertPrevious.onCollideLeave($dynamicPrevious);\n        });\n\n        this.$previous = [...this.$current];\n        this.$current = [];\n    }\n}\n\nexport {\n\n    SystemCollision\n};\n\nexport default SystemCollision;\n","import {EventGamepadAnalog, EventGamepadDigital} from '../index.js';\n\n/**\n * Creates input systems.\n *\n * @example\n *\n * const system = new SystemInput({$container});\n * system.initiate();\n * system.tick();\n */\nclass SystemInput {\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the input events.\n     * @type {Event[]}\n     * @private\n     */\n    $events;\n\n    /**\n     * Stores the initiated status.\n     * @type {boolean}\n     * @private\n     */\n    $initiated;\n\n    /**\n     * Stores the state of the accepted inputs.\n     * @type {Object.<string, boolean>}\n     * @private\n     */\n    $inputs;\n\n    /**\n     * Stores the state of the accepted analog inputs.\n     * @type {Object.<string, number>}\n     * @private\n     */\n    $inputsAnalog;\n\n    /**\n     * Creates a new input system.\n     * @param {Object} $parameters The given parameters.\n     * @param {HTMLElement} $parameters.$container The container on which to attach input events.\n     */\n    constructor({$container}) {\n\n        this.$container = $container;\n\n        this.$events = [];\n        this.$initiated = false;\n        this.$inputs = {};\n        this.$inputsAnalog = {};\n    }\n\n    /**\n     * Stacks the input events for the next tick.\n     * @param {Event} $event The input event to stack.\n     * @private\n     */\n    $stack($event) {\n\n        $event.preventDefault();\n\n        this.$events.push($event);\n    }\n\n    /**\n     * Gets the current input state value of the given digital input.\n     * @param {string} $input The event code of the given digital input.\n     * @returns {boolean}\n     * @public\n     */\n    getInput($input) {\n\n        const input = this.$inputs[$input];\n\n        if (typeof input === 'undefined') {\n\n            return false;\n        }\n\n        return input;\n    }\n\n    /**\n     * Gets the current input state value of the given analog input.\n     * @param {string} $input The event code of the given analog input.\n     * @returns {number}\n     * @public\n     */\n    getInputAnalog($input) {\n\n        const input = this.$inputsAnalog[$input];\n\n        if (typeof input === 'undefined') {\n\n            return 0;\n        }\n\n        return input;\n    }\n\n    /**\n     * Initiates the system.\n     * @public\n     */\n    initiate() {\n\n        if (this.$initiated === true) {\n\n            return;\n        }\n\n        window.addEventListener('blur', this.$stack.bind(this));\n\n        window.addEventListener('contextmenu', this.$stack.bind(this));\n\n        window.addEventListener('gamepadanalog', this.$stack.bind(this));\n        window.addEventListener('gamepadconnect', this.$stack.bind(this));\n        window.addEventListener('gamepaddown', this.$stack.bind(this));\n        window.addEventListener('gamepadup', this.$stack.bind(this));\n\n        this.$container.addEventListener('keydown', this.$stack.bind(this));\n        this.$container.addEventListener('keyup', this.$stack.bind(this));\n\n        this.$initiated = true;\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        if (this.$initiated === false) {\n\n            return;\n        }\n\n        window.removeEventListener('blur', this.$stack.bind(this));\n\n        window.removeEventListener('contextmenu', this.$stack.bind(this));\n\n        window.removeEventListener('gamepadanalog', this.$stack.bind(this));\n        window.removeEventListener('gamepadconnect', this.$stack.bind(this));\n        window.removeEventListener('gamepaddown', this.$stack.bind(this));\n        window.removeEventListener('gamepadup', this.$stack.bind(this));\n\n        this.$container.removeEventListener('keydown', this.$stack.bind(this));\n        this.$container.removeEventListener('keyup', this.$stack.bind(this));\n\n        this.$initiated = false;\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @public\n     */\n    tick() {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        while (this.$events.length > 0) {\n\n            const $event = this.$events.shift();\n\n            if ($event.type === 'blur') {\n\n                this.$inputs = {};\n                this.$inputsAnalog = {};\n            }\n\n            else if ($event instanceof EventGamepadAnalog\n            && $event.type === 'gamepadanalog') {\n\n                this.$inputsAnalog[$event.code] = $event.value;\n            }\n\n            else if ($event instanceof EventGamepadDigital\n            && $event.type === 'gamepaddown') {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof EventGamepadDigital\n            && $event.type === 'gamepadup') {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n\n            else if ($event instanceof KeyboardEvent\n            && $event.type === 'keydown') {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof KeyboardEvent\n            && $event.type === 'keyup') {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n        }\n    }\n}\n\nexport {\n\n    SystemInput\n};\n\nexport default SystemInput;\n","import {Shader, Vector3} from '../index.js';\n\n/**\n * Creates render systems.\n *\n * @example\n *\n * const system = new SystemRender({$color, $container, $resolution});\n * system.initiate();\n * system.tick($stage);\n */\nclass SystemRender {\n\n    /**\n     * Stores the texture unit for the textures to preload.\n     * @type {0}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNITTEXTURE0 = 0;\n\n    /**\n     * Stores the texture unit for the color textures.\n     * @type {1}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNITTEXTURE1 = 1;\n\n    /**\n     * Stores the texture unit for the opacity textures.\n     * @type {2}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNITTEXTURE2 = 2;\n\n    /**\n     * Stores the common vertices positions of the sprites.\n     * @type {WebGLBuffer}\n     * @private\n     */\n    $bufferPosition;\n\n    /**\n     * Stores the cache of the texture assets.\n     * @type {Map<string, WebGLTexture>}\n     * @private\n     */\n    $cache;\n\n    /**\n     * Stores the canvas element.\n     * @type {HTMLCanvasElement}\n     * @private\n     */\n    $canvas;\n\n    /**\n     * Stores the background color.\n     * @type {import('../index.js').Vector3}\n     * @private\n     */\n    $color;\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the canvas context.\n     * @type {WebGL2RenderingContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Stores the number of indices of the vertices positions of the sprites.\n     * @type {number}\n     * @private\n     */\n    $indices;\n\n    /**\n     * Stores the initiated status.\n     * @type {boolean}\n     * @private\n     */\n    $initiated;\n\n    /**\n     * Stores the shader program attribute locations.\n     * @type {Object.<string, number>}\n     * @private\n     */\n    $locationsAttribute;\n\n    /**\n     * Stores the shader program uniform locations.\n     * @type {Object.<string, WebGLUniformLocation>}\n     * @private\n     */\n    $locationsUniform;\n\n    /**\n     * Stores the mapping between the texture sources and their uvmappings.\n     * @type {Object.<string, WebGLBuffer>}\n     * @private\n     */\n    $mappingBuffersUv;\n\n    /**\n     * Stores the shader program.\n     * @type {WebGLProgram}\n     * @private\n     */\n    $program;\n\n    /**\n     * Stores the ResizeObserver.\n     * @type {ResizeObserver}\n     * @private\n     */\n    $resizeOberver;\n\n    /**\n     * Stores the resolution.\n     * @type {import('../index.js').Vector2}\n     * @private\n     */\n    $resolution;\n\n    /**\n     * Stores the texture of the default color texture source.\n     * @type {WebGLTexture}\n     * @private\n     */\n    $textureColorDefault;\n\n    /**\n     * Stores the texture of the default opacity texture source.\n     * @type {WebGLTexture}\n     * @private\n     */\n    $textureOpacityDefault;\n\n    /**\n     * Creates a new render system.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').Vector3} [$parameters.$color] The rendering background color to use.\n     * @param {HTMLElement} $parameters.$container The container on which to attach the canvas.\n     * @param {import('../index.js').Vector2} $parameters.$resolution The rendering resolution to use.\n     */\n    constructor({$color = new Vector3(0, 0, 0), $container, $resolution}) {\n\n        this.$color = $color;\n        this.$container = $container;\n        this.$resolution = $resolution;\n\n        this.$cache = new Map();\n        this.$canvas = document.createElement('canvas');\n        this.$canvas.style.width = '100%';\n        this.$canvas.style.height = '100%';\n        this.$canvas.style.display = 'block';\n        this.$canvas.style.outline = '0';\n        this.$canvas.style.imageRendering = 'pixelated';\n        this.$context = this.$canvas.getContext('webgl2', {\n\n            'antialias': false\n        });\n\n        $container.appendChild(this.$canvas);\n\n        this.$resize();\n\n        this.$initiated = false;\n    }\n\n    /**\n     * Creates the common vertices positions of the sprites.\n     * @private\n     */\n    $createBufferPositions() {\n\n        const positions = [\n\n            -0.5, -0.5,\n            -0.5, 0.5,\n            0.5, 0.5,\n            0.5, -0.5\n        ];\n\n        const bufferPosition = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ARRAY_BUFFER, bufferPosition);\n        this.$context.bufferData(this.$context.ARRAY_BUFFER, new Float32Array(positions), this.$context.STATIC_DRAW);\n\n        this.$bufferPosition = bufferPosition;\n    }\n\n    /**\n     * Creates the uvmapping from the given sprite.\n     * @param {import('../index.js').Sprite} $sprite The sprite.\n     * @private\n     */\n    $createBufferUvsOnce($sprite) {\n\n        if (typeof this.$mappingBuffersUv[$sprite.frameSourceSerialized] !== 'undefined') {\n\n            return;\n        }\n\n        const frame = $sprite.frameSource;\n\n        const uvs = [\n\n            frame.minimum.x, frame.maximum.y,\n            frame.minimum.x, frame.minimum.y,\n            frame.maximum.x, frame.minimum.y,\n            frame.maximum.x, frame.maximum.y\n        ];\n\n        const bufferUv = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ARRAY_BUFFER, bufferUv);\n        this.$context.bufferData(this.$context.ARRAY_BUFFER, new Float32Array(uvs), this.$context.STATIC_DRAW);\n\n        this.$mappingBuffersUv[$sprite.frameSourceSerialized] = bufferUv;\n    }\n\n    /**\n     * Creates the indices of the vertices positions of the sprites.\n     * @private\n     */\n    $createIndices() {\n\n        const indices = [\n\n            0,\n            1,\n            2,\n            3\n        ];\n\n        const bufferIndex = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ELEMENT_ARRAY_BUFFER, bufferIndex);\n        this.$context.bufferData(this.$context.ELEMENT_ARRAY_BUFFER, new Uint32Array(indices), this.$context.STATIC_DRAW);\n\n        this.$indices = indices.length;\n    }\n\n    /**\n     * Creates the attributes locations to use by the shader program.\n     * @param {WebGLProgram} $program The shader program.\n     * @param {typeof import('../index.js').Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createLocationsAttribute($program, $shader) {\n\n        Object.keys($shader.attributes).forEach(($name) => {\n\n            this.$locationsAttribute[$name] = this.$context.getAttribLocation($program, $name);\n        });\n    }\n\n    /**\n     * Creates the uniform locations to use by the shader program.\n     * @param {WebGLProgram} $program The shader program.\n     * @param {typeof import('../index.js').Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createLocationsUniform($program, $shader) {\n\n        Object.keys($shader.uniforms).forEach(($name) => {\n\n            this.$locationsUniform[$name] = this.$context.getUniformLocation($program, $name);\n        });\n    }\n\n    /**\n     * Creates the shader program.\n     * @param {typeof import('../index.js').Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createProgram($shader) {\n\n        const shaderVertex = this.$context.createShader(this.$context.VERTEX_SHADER);\n        this.$context.shaderSource(shaderVertex, $shader.sourceVertex);\n        this.$context.compileShader(shaderVertex);\n\n        const shaderFragment = this.$context.createShader(this.$context.FRAGMENT_SHADER);\n        this.$context.shaderSource(shaderFragment, $shader.sourceFragment);\n        this.$context.compileShader(shaderFragment);\n\n        this.$program = this.$context.createProgram();\n        this.$context.attachShader(this.$program, shaderVertex);\n        this.$context.attachShader(this.$program, shaderFragment);\n        this.$context.linkProgram(this.$program);\n    }\n\n    /**\n     * Creates a texture from the given bitmap texture data.\n     * @param {ImageBitmap} $textureBitmap The bitmap texture data.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {WebGLTexture}\n     * @private\n     */\n    $createTexture($textureBitmap, $unitTexture) {\n\n        const texture = this.$context.createTexture();\n\n        this.$context.activeTexture($unitTexture);\n        this.$context.bindTexture(this.$context.TEXTURE_2D, texture);\n\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_MIN_FILTER, this.$context.NEAREST);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_MAG_FILTER, this.$context.NEAREST);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_WRAP_S, this.$context.CLAMP_TO_EDGE);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_WRAP_T, this.$context.CLAMP_TO_EDGE);\n\n        this.$context.texImage2D(this.$context.TEXTURE_2D, 0, this.$context.RGBA, this.$context.RGBA, this.$context.UNSIGNED_BYTE, $textureBitmap);\n\n        return texture;\n    }\n\n    /**\n     * Creates a default texture (1 pixel texture).\n     * @param {import('../index.js').Vector3} $color The target texture unit.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {WebGLTexture}\n     * @private\n     */\n    $createTextureDefault($color, $unitTexture) {\n\n        const texture = this.$context.createTexture();\n\n        this.$context.activeTexture(this.$context.TEXTURE0 + $unitTexture);\n        this.$context.bindTexture(this.$context.TEXTURE_2D, texture);\n        this.$context.texImage2D(this.$context.TEXTURE_2D, 0, this.$context.RGBA, 1, 1, 0, this.$context.RGBA, this.$context.UNSIGNED_BYTE, new Uint8Array([$color.x, $color.y, $color.z, 255]));\n\n        return texture;\n    }\n\n    /**\n     * Loads the texture from the given texture file content.\n     * @param {Response} $content The texture file content.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {Promise<WebGLTexture>}\n     * @private\n     */\n    $loadTexture($content, $unitTexture) {\n\n        const promise = new Promise(($resolve) => {\n\n            $content.blob()\n            .then(($blob) => (createImageBitmap($blob)))\n            .then(($textureBitmap) => {\n\n                const texture = this.$createTexture($textureBitmap, $unitTexture);\n\n                this.$cache.set($content.url, texture);\n\n                $resolve(texture);\n            });\n        });\n\n        return promise;\n    }\n\n    /**\n     * Prepares the texture from the given texture source.\n     * @param {string} $texture The texture source.\n     * @param {number} $unitTexture The target texture unit.\n     * @private\n     */\n    $prepareTexture($texture, $unitTexture) {\n\n        if (this.$cache.has($texture) === true) {\n\n            return;\n        }\n\n        this.$cache.set($texture, undefined);\n\n        fetch($texture)\n        .then(($content) => (this.$loadTexture($content, $unitTexture)));\n    }\n\n    /**\n     * Called when the scope is about to be unloaded.\n     * @private\n     */\n    $onBeforeUnload() {\n\n        this.$context.getExtension('WEBGL_lose_context').loseContext();\n    }\n\n    /**\n     * Resets the canvas.\n     * @param {number} $width The context viewport width.\n     * @param {number} $height The context viewport height.\n     * @private\n     */\n    $resetCanvas($width, $height) {\n\n        this.$context.clearColor(this.$color.x, this.$color.y, this.$color.z, 1);\n        this.$context.clearDepth(1);\n\n        this.$context.viewport(0, 0, $width, $height);\n        this.$context.clear(this.$context.COLOR_BUFFER_BIT | this.$context.DEPTH_BUFFER_BIT);\n    }\n\n    /**\n     * Resizes the rendering context.\n     * @public\n     */\n    $resize() {\n\n        const width = this.$resolution.x;\n        const height = this.$resolution.y;\n\n        const widthContext = Math.max(width, Math.floor(height * this.$canvas.clientWidth / this.$canvas.clientHeight));\n        const heightContext = Math.max(height, Math.floor(width * this.$canvas.clientHeight / this.$canvas.clientWidth));\n\n        this.$canvas.setAttribute('width', '' + Math.floor(widthContext / 2) * 2);\n        this.$canvas.setAttribute('height', '' + Math.floor(heightContext / 2) * 2);\n    }\n\n    /**\n     * Sends an attribute to the shader program.\n     * @param {typeof import('../index.js').Shader} $shader The representation of the shader.\n     * @param {string} $name The name of the attribute.\n     * @param {any} $value The value of the attribute.\n     * @private\n     */\n    $sendAttribute($shader, $name, $value) {\n\n        if (typeof $shader.attributes[$name] === 'undefined') {\n\n            return;\n        }\n\n        const type = $shader.attributes[$name];\n\n        switch (type) {\n\n            case 'vec2': {\n\n                this.$context.bindBuffer(this.$context.ARRAY_BUFFER, $value);\n                const location = this.$locationsAttribute[$name];\n                this.$context.vertexAttribPointer(location, 2, this.$context.FLOAT, false, 0, 0);\n                this.$context.enableVertexAttribArray(location);\n\n                break;\n            }\n\n            case 'vec3': {\n\n                this.$context.bindBuffer(this.$context.ARRAY_BUFFER, $value);\n                const location = this.$locationsAttribute[$name];\n                this.$context.vertexAttribPointer(location, 3, this.$context.FLOAT, false, 0, 0);\n                this.$context.enableVertexAttribArray(location);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Sends a uniform to the shader program.\n     * @param {typeof import('../index.js').Shader} $shader The representation of the shader.\n     * @param {string} $name The name of the uniform.\n     * @param {any} $value The value of the uniform.\n     * @private\n     */\n    $sendUniform($shader, $name, $value) {\n\n        if (typeof $shader.uniforms[$name] === 'undefined') {\n\n            return;\n        }\n\n        const type = $shader.uniforms[$name];\n\n        switch (type) {\n\n            case 'bool':\n            case 'int':\n            case 'sampler2D': {\n\n                this.$context.uniform1i(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'bool[]':\n            case 'int[]': {\n\n                this.$context.uniform1iv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'float': {\n\n                this.$context.uniform1f(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'float[]': {\n\n                this.$context.uniform1fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'mat4':\n            case 'mat4[]': {\n\n                this.$context.uniformMatrix4fv(this.$locationsUniform[$name], false, $value);\n\n                break;\n            }\n\n            case 'vec2':\n            case 'vec2[]': {\n\n                this.$context.uniform2fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'vec3':\n            case 'vec3[]': {\n\n                this.$context.uniform3fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Checks if the system has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        return this.$cache.has($asset) === true;\n    }\n\n    /**\n     * Initiates the system.\n     * @public\n     */\n    initiate() {\n\n        if (this.$initiated === true) {\n\n            return;\n        }\n\n        this.$indices = 0;\n        this.$locationsAttribute = {};\n        this.$locationsUniform = {};\n        this.$mappingBuffersUv = {};\n\n        this.$context.frontFace(this.$context.CW);\n        this.$context.enable(this.$context.CULL_FACE);\n        this.$context.cullFace(this.$context.BACK);\n\n        this.$context.enable(this.$context.BLEND);\n        this.$context.blendFunc(this.$context.SRC_ALPHA, this.$context.ONE_MINUS_SRC_ALPHA);\n\n        this.$createProgram(Shader);\n\n        this.$context.useProgram(this.$program);\n\n        this.$createLocationsUniform(this.$program, Shader);\n        this.$createLocationsAttribute(this.$program, Shader);\n\n        this.$createBufferPositions();\n        this.$createIndices();\n\n        this.$textureColorDefault = this.$createTextureDefault(new Vector3(127, 127, 127), SystemRender.UNITTEXTURE1);\n        this.$textureOpacityDefault = this.$createTextureDefault(new Vector3(255, 255, 255), SystemRender.UNITTEXTURE2);\n\n        this.$resizeOberver = new ResizeObserver(this.$resize.bind(this));\n        this.$resizeOberver.observe(this.$container);\n\n        window.addEventListener('beforeunload', this.$onBeforeUnload.bind(this));\n\n        this.$initiated = true;\n    }\n\n    /**\n     * Loads the texture from the given texture file content.\n     * @param {Response} $content The texture file content.\n     * @returns {Promise<WebGLTexture>}\n     * @public\n     */\n    loadTexture($content) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        if (this.$cache.has($content.url) === true) {\n\n            const promise = new Promise(($resolve) => {\n\n                const texture = this.$cache.get($content.url);\n\n                $resolve(texture);\n            });\n\n            return promise;\n        }\n\n        this.$cache.set($content.url, undefined);\n\n        return this.$loadTexture($content, this.$context.TEXTURE0 + SystemRender.UNITTEXTURE0);\n    }\n\n    /**\n     * Sets the rendering background color.\n     * @param {import('../index.js').Vector3} $color The rendering background color to set.\n     * @public\n     */\n    setColor($color) {\n\n        this.$color = $color;\n    }\n\n    /**\n     * Sets the rendering resolution.\n     * @param {import('../index.js').Vector2} $resolution The rendering resolution to set.\n     * @public\n     */\n    setResolution($resolution) {\n\n        this.$resolution = $resolution.clone();\n\n        this.$resize();\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        if (this.$initiated === false) {\n\n            return;\n        }\n\n        this.$resizeOberver.disconnect();\n\n        window.removeEventListener('beforeunload', this.$onBeforeUnload.bind(this));\n\n        this.$initiated = false;\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {import('../index.js').Stage} $stage The stage on which to execute the system.\n     * @public\n     */\n    tick($stage) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        this.$resetCanvas(this.$canvas.width, this.$canvas.height);\n\n        this.$sendUniform(Shader, 'uniformAspect', [this.$canvas.width, this.$canvas.height]);\n        this.$sendUniform(Shader, 'uniformTranslationPointOfView', [Math.floor($stage.pointOfView.translation.x), Math.floor($stage.pointOfView.translation.y)]);\n\n        this.$sendAttribute(Shader, 'attributePosition', this.$bufferPosition);\n\n        const actors = [...$stage.actors];\n\n        actors.sort(($a, $b) => {\n\n            return $a.zIndex - $b.zIndex;\n        });\n\n        actors.forEach(($actor) => {\n\n            if ($actor.hasSprite() === false) {\n\n                return;\n            }\n\n            let textureColor = this.$textureColorDefault;\n\n            this.$prepareTexture($actor.sprite.textureColor, this.$context.TEXTURE0 + SystemRender.UNITTEXTURE1);\n\n            if (typeof this.$cache.get($actor.sprite.textureColor) !== 'undefined') {\n\n                textureColor = this.$cache.get($actor.sprite.textureColor);\n            }\n\n            this.$context.activeTexture(this.$context.TEXTURE0 + SystemRender.UNITTEXTURE1);\n            this.$context.bindTexture(this.$context.TEXTURE_2D, textureColor);\n            this.$sendUniform(Shader, 'uniformTextureColor', SystemRender.UNITTEXTURE1);\n\n            let textureOpacity = this.$textureOpacityDefault;\n\n            if (typeof $actor.sprite.textureOpacity !== 'undefined') {\n\n                this.$prepareTexture($actor.sprite.textureOpacity, this.$context.TEXTURE0 + SystemRender.UNITTEXTURE2);\n\n                if (typeof this.$cache.get($actor.sprite.textureOpacity) !== 'undefined') {\n\n                    textureOpacity = this.$cache.get($actor.sprite.textureOpacity);\n                }\n            }\n\n            this.$context.activeTexture(this.$context.TEXTURE0 + SystemRender.UNITTEXTURE2);\n            this.$context.bindTexture(this.$context.TEXTURE_2D, textureOpacity);\n            this.$sendUniform(Shader, 'uniformTextureOpacity', SystemRender.UNITTEXTURE2);\n\n            this.$sendUniform(Shader, 'uniformSize', [$actor.sprite.sizeTarget.x, $actor.sprite.sizeTarget.y]);\n            this.$sendUniform(Shader, 'uniformTranslation', [Math.floor($actor.translation.x), Math.floor($actor.translation.y)]);\n\n            this.$createBufferUvsOnce($actor.sprite);\n            this.$sendAttribute(Shader, 'attributeUvmapping', this.$mappingBuffersUv[$actor.sprite.frameSourceSerialized]);\n\n            this.$context.drawElements(this.$context.TRIANGLE_FAN, this.$indices, this.$context.UNSIGNED_INT, 0);\n        });\n    }\n}\n\nexport {\n\n    SystemRender\n};\n\nexport default SystemRender;\n","import {EVENTCODES, EventGamepad, EventGamepadDigital, UTILS} from '../index.js';\n\n/**\n * Creates vibration systems.\n *\n * @example\n *\n * const system = new SystemVibration();\n */\nclass SystemVibration {\n\n    /**\n     * Stores the delay before a vibration ends.\n     * @type {number}\n     * @public\n     * @readonly\n     * @static\n     */\n    static DELAYVIBRATIONEND = 1000;\n\n    /**\n     * Stores the mapping between the playing vibrations and their elapsed time.\n     * @type {Map<import('../index.js').Vibration, number>}\n     * @private\n     */\n    $mappingVibrationsPlaying;\n\n    /**\n     * Creates a new vibration system.\n     */\n    constructor() {\n\n        this.$mappingVibrationsPlaying = new Map();\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        window.dispatchEvent(new EventGamepadDigital('gamepadvibrate', EVENTCODES.GAMEPADXBOX.VIBRATEEND));\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    tick({$stage, $timetick}) {\n\n        /**\n         * @type {import('../index.js').Vibration[]}\n         */\n        const previous = Array.from(this.$mappingVibrationsPlaying.keys());\n\n        $stage.actors.forEach(($actor) => {\n\n            /**\n             * @type {import('../index.js').Vibration[]}\n             */\n            const finished = [];\n\n            $actor.vibrations.forEach(($vibration) => {\n\n                if (this.$mappingVibrationsPlaying.has($vibration) === false) {\n\n                    this.$mappingVibrationsPlaying.set($vibration, 0);\n\n                    return;\n                }\n\n                const elapsedTime = this.$mappingVibrationsPlaying.get($vibration) + $timetick;\n\n                if (elapsedTime >= $vibration.duration) {\n\n                    finished.push($vibration);\n\n                    return;\n                }\n\n                this.$mappingVibrationsPlaying.set($vibration, elapsedTime);\n\n                UTILS.extract($vibration, previous);\n            });\n\n            finished.forEach(($vibration) => {\n\n                $actor.removeVibration($vibration);\n            });\n        });\n\n        previous.forEach(($vibration) => {\n\n            this.$mappingVibrationsPlaying.delete($vibration);\n        });\n\n        /**\n         * @type {import('../index.js').Vibration[]}\n         */\n        const current = Array.from(this.$mappingVibrationsPlaying.keys());\n\n        let intensityFrequencyHigh = 0;\n        let intensityFrequencyLow = 0;\n\n        current.forEach(($vibration) => {\n\n            intensityFrequencyHigh = Math.max(intensityFrequencyHigh, $vibration.intensityFrequencyHigh);\n            intensityFrequencyLow = Math.max(intensityFrequencyLow, $vibration.intensityFrequencyLow);\n        });\n\n        window.dispatchEvent(new EventGamepad('gamepadvibrate', EVENTCODES.GAMEPADXBOX.VIBRATESTART, {\n\n            $duration: SystemVibration.DELAYVIBRATIONEND,\n            $intensityFrequencyHigh: intensityFrequencyHigh,\n            $intensityFrequencyLow: intensityFrequencyLow\n        }));\n    }\n}\n\nexport {\n\n    SystemVibration\n};\n\nexport default SystemVibration;\n","import {ExtensionGamepad} from './extensions/gamepad.extension.js';\n\nnew ExtensionGamepad();\n\nexport * as COLLIDERTYPES from './constants/collidertypes.js';\nexport * as CONTENTTYPES from './constants/contenttypes.js';\nexport * as EVENTCODES from './constants/eventcodes.js';\nexport * as MATHEMATICS from './constants/mathematics.js';\n\nexport {AABB} from './core/aabb.js';\nexport {Actor} from './core/actor.js';\nexport {ActorPreloadable} from './core/actorpreloadable.js';\nexport {Collider} from './core/collider.js';\nexport {Engine} from './core/engine.js';\nexport {FiniteStateMachine} from './core/finitestatemachine.js';\nexport {Loop} from './core/loop.js';\nexport {Quaternion} from './core/quaternion.js';\nexport {Shader} from './core/shader.js';\nexport {Sound} from './core/sound.js';\nexport {Sprite} from './core/sprite.js';\nexport {Stage} from './core/stage.js';\nexport {StagePreloadable} from './core/stagepreloadable.js';\nexport {State} from './core/state.js';\nexport * as STORAGE from './core/storage.js';\nexport {Timeline} from './core/timeline.js';\nexport {TimelineKeyframe} from './core/timelinekeyframe.js';\nexport * as UTILS from './core/utils.js';\nexport {Vector2} from './core/vector2.js';\nexport {Vector3} from './core/vector3.js';\nexport {Vibration} from './core/vibration.js';\n\nexport {EventGamepad} from './events/gamepad.js';\nexport {EventGamepadAnalog} from './events/gamepadanalog.js';\nexport {EventGamepadDigital} from './events/gamepaddigital.js';\n\nexport {SystemActor} from './systems/actor.system.js';\nexport {SystemAudio} from './systems/audio.system.js';\nexport {SystemCollision} from './systems/collision.system.js';\nexport {SystemInput} from './systems/input.system.js';\nexport {SystemRender} from './systems/render.system.js';\nexport {SystemVibration} from './systems/vibration.system.js';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(864);\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","engine","$container","document","body","initiate","preloadStage","createStage","ActorButtonContinue","$data","$timeline","$createTimeline","$frames","$size","map","$frame","$index","x","y","width","height","sprite","$frameSource","$sizeTarget","$textureColor","$onEnter","this","setSprite","$timecode","seekTimecode","length","actionActivate","frames","active","actionDisable","disabled","actionFocus","focus","actionRest","idle","onCreate","onTick","$timetick","tick","ActorButtonDlc","ActorButtonNewGame","ActorButtonQuit","ActorMenu","$finiteStateMachineMenu","onBeforeRemove","followers","forEach","$follower","stage","removeActor","DEBOUNCENAVIGATION","buttonContinue","createActor","translate","buttonNewGame","buttonDlc","buttonQuit","addFollower","checkCommandActivate","getInput","checkCommandNavigateUp","checkCommandNavigateDown","$state","$transitions","$condition","$timer","$previous","addSound","$audio","$volume","$onLeave","addVibration","$duration","$intensityFrequencyHigh","$intensityFrequencyLow","console","log","update","StageMenu","setColor","setResolution","GAMEPADAXES","GAMEPADBUTTONS","DYNAMIC","KINETIC","STATIC","AUDIOMPEG","AUDIOWAVE","IMAGEJPEG","IMAGEPNG","A","START","UP","DOWN","LSUP","LSDOWN","VIBRATEEND","VIBRATESTART","ENTER","RADIANS","Math","PI","AABB","$maximum","$minimum","center","minimum","clone","add","halfSize","size","scale","maximum","subtract","constructor","distanceManhattan","$a","$b","distanceX","distanceY","max","abs","from","$aabb","overlapX","distanceCenter","overlapY","$vector","Actor","static","$collider","$components","$followers","$sounds","$sprite","$stage","$translation","$uuid","$vibrations","$zIndex","collider","Array","sounds","translation","uuid","vibrations","zIndex","Set","Vector2","$actor","$sound","push","$vibration","getComponent","$name","hasCollider","Collider","hasComponent","hasOwnProperty","hasFollower","has","hasSprite","Sprite","onAfterRemove","onCollide","$east","$north","$south","$west","onCollideEnter","onCollideLeave","onSoundFinish","removeFollower","delete","removeSound","removeSounds","removeVibration","removeVibrations","setCollider","setComponent","$component","setZIndex","hasActor","translateTo","ActorPreloadable","$preloadables","preloadables","$preloadable","$boundaries","$traversable","$type","boundaries","traversable","type","Engine","$color","$loop","$next","$preloaded","$resolution","$systemActor","$systemAudio","$systemCollision","$systemInput","$systemRender","$systemVibration","container","Vector3","Loop","bind","SystemActor","SystemAudio","SystemCollision","SystemInput","SystemRender","SystemVibration","$createStage","$parameters","getInputAnalog","hasAssetLoaded","$asset","$tickrateMinimum","promises","promise","Promise","$resolve","fetch","then","$content","headers","get","loadTexture","$texture","loadAudio","$bufferAudio","undefined","all","terminate","Stage","FiniteStateMachine","$initiated","$states","Map","set","$transition","previous","current","next","$handler","$identifier","$timePrevious","$scope","window","timeCurrent","performance","now","timetickCurrent","timetickMinimum","timetickSafe","min","requestAnimationFrame","cancelAnimationFrame","Shader","Sound","$durationFadeOut","audio","durationFadeOut","loop","volume","$frameSourceSerialized","$textureOpacity","frameSource","frameSourceSerialized","sizeTarget","textureColor","textureOpacity","JSON","stringify","$actors","$engine","$pointOfView","actors","pointOfView","actor","indexOf","index","splice","removeActors","setPointOfView","StagePreloadable","value","localStorage","getItem","parse","remove","removeItem","$value","setItem","Timeline","$keyframes","timecode","sort","seekName","result","find","$keyframe","name","onEnter","TimelineKeyframe","deduplicate","$array","extract","$item","ready","id","check","navigator","userActivation","hasBeenActive","sleep","$delay","setTimeout","crypto","randomUUID","$x","$y","equal","sqrt","multiply","negate","normalize","rotate","$angle","radians","cosine","cos","sine","sin","$factor","$z","z","$quaternion","xq","yq","zq","xu","yu","zu","xv","yv","zv","w","Vibration","duration","intensityFrequencyHigh","intensityFrequencyLow","EventGamepad","Event","$code","code","data","super","EventGamepadAnalog","EventGamepadDigital","$cache","$context","$mappingSoundsPlaying","AudioContext","$createValuesCurveFadeOut","$loadAudio","arrayBuffer","$bufferArray","decodeAudioData","url","$prepareAudio","$terminateSound","$gain","$startTime","currentTime","buffer","gain","cancelScheduledValues","setValueCurveAtTime","onended","disconnect","delayFadeOut","keys","close","DELAYCONTEXTCLEARSAFE","bufferAudio","createBufferSource","connect","destination","start","createGain","$current","$hasCollisionPrevious","$dynamic","$inert","$dynamicPrevious","$inertPrevious","pairs","dynamics","kinetics","statics","inerts","boundariesDynamic","centerBoundariesDynamic","boundariesInert","distance","$distance","$pair","directionX","sign","directionY","checkMinimumX","checkMinimumY","resolverDynamic","originDynamicEast","originDynamicNorth","originDynamicSouth","originDynamicWest","filter","$events","$inputs","$inputsAnalog","$stack","$event","preventDefault","$input","input","addEventListener","removeEventListener","shift","KeyboardEvent","$bufferPosition","$canvas","$indices","$locationsAttribute","$locationsUniform","$mappingBuffersUv","$program","$resizeOberver","$textureColorDefault","$textureOpacityDefault","createElement","style","display","outline","imageRendering","getContext","appendChild","$resize","$createBufferPositions","bufferPosition","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","$createBufferUvsOnce","frame","uvs","bufferUv","$createIndices","indices","bufferIndex","ELEMENT_ARRAY_BUFFER","Uint32Array","$createLocationsAttribute","$shader","Object","attributes","getAttribLocation","$createLocationsUniform","uniforms","getUniformLocation","$createProgram","shaderVertex","createShader","VERTEX_SHADER","shaderSource","sourceVertex","compileShader","shaderFragment","FRAGMENT_SHADER","sourceFragment","createProgram","attachShader","linkProgram","$createTexture","$textureBitmap","$unitTexture","texture","createTexture","activeTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","RGBA","UNSIGNED_BYTE","$createTextureDefault","TEXTURE0","Uint8Array","$loadTexture","blob","$blob","createImageBitmap","$prepareTexture","$onBeforeUnload","getExtension","loseContext","$resetCanvas","$width","$height","clearColor","clearDepth","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","widthContext","floor","clientWidth","clientHeight","heightContext","setAttribute","$sendAttribute","location","vertexAttribPointer","FLOAT","enableVertexAttribArray","$sendUniform","uniform1i","uniform1iv","uniform1f","uniform1fv","uniformMatrix4fv","uniform2fv","uniform3fv","frontFace","CW","enable","CULL_FACE","cullFace","BACK","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","useProgram","UNITTEXTURE1","UNITTEXTURE2","ResizeObserver","observe","UNITTEXTURE0","drawElements","TRIANGLE_FAN","UNSIGNED_INT","$mappingVibrationsPlaying","dispatchEvent","finished","elapsedTime","DELAYVIBRATIONEND","$indexLastConnected","$stateGamepad","$unloaded","flat","$onConnect","$onDisconnect","$onVibrate","$update","gamepad","getGamepads","vibrationActuator","reset","mapping","entries","$activated","playEffect","startDelay","strongMagnitude","weakMagnitude","Gamepad","$button","button","buttons","pressed","axes","$direction","axeMinimum","axeMaximum","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","Symbol","queue","d","fn","r","a","hasAwait","currentDeps","outerResolve","reject","depQueues","resolve","rej","deps","dep","obj","e","ret","wrapDeps","getResult","fnQueue","q","err","definition","key","o","defineProperty","enumerable","g","globalThis","Function","prop","prototype","call","toStringTag","scriptUrl","importScripts","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","i","test","Error","replace","p"],"sourceRoot":""}