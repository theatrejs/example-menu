{"version":3,"file":"index.js","mappings":"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;;;;;;;;;;AC9HyC;;AAEhB;;AAExD,wBAAwB,sEAAgB,EAAE,uEAAS;;AAEnD;AACA,cAAc;AACd;AACA;;AAEA,iCAAiC,yDAAO;AACxC,sCAAsC,yDAAO;;AAE7C,yBAAyB,uEAAS;AAClC;AACA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBzB;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAOE;;;;;;;;;;;;;;;;;;AC1BF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAQE;;;;;;;;;;;;;;;;;;;;AClC0D;AACM;AACA;;AAOhE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAwCE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjPiN;AACzJ;AACsC;AAC3C;AAC6D;AACxC;AACV;;AA8E9D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AA2CE;;;;;;;;;;;;;;;;AC5SF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAME;;;;;;;;;;;;;;;;;;;;;;;;;;AClBF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAgBE;;;;;;;;;;;;;;;AClGF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAKE;;;;;;;;;;;;;;;;;;;;ACVF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAUE;;;;;;;;;;;;;;;;;;;AClDF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAUE;;;;;;;;;;;;;;;;AC3CF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAME;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBiN;AACzJ;AACsC;AAC3C;AAC6D;AACxC;AACV;;AA8E9D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AA2CE;;;;;;;;;;;;;;;;AC5SF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAME;;;;;;;;;;;;;;;;;;;;;;;;;;AClBF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAgBE;;;;;;;;;;;;;;;AClGF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAKE;;;;;;;;;;;;;;;;;;;;ACVF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAUE;;;;;;;;;;;;;;;;;;;AClDF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAUE;;;;;;;;;;;;;;;;AC3CF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAME;;;;;;;;;;;;;;;AClBF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAKE;;;;;;;;;;;;;;;;ACVF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,eAAe,+BAA+B;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,4BAA4B;AAC3C,eAAe,4BAA4B;AAC3C,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,4BAA4B;AAC3C,eAAe,4BAA4B;AAC3C,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,4BAA4B;AAC3C,eAAe,4BAA4B;AAC3C,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,4BAA4B;AAC3C,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,4BAA4B;AAC3C,eAAe,4BAA4B;AAC3C,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,4BAA4B;AAC3C,eAAe,4BAA4B;AAC3C,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAKE;;AAEF,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;ACnNyC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA;;AAEA;;AAEA;AACA;AACA;AACA,gCAAgC,8CAAO;AACvC,qBAAqB,iDAAU;AAC/B;AACA;AACA;;AAEA;AACA;AACA,eAAe,6BAA6B;AAC5C,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,6BAA6B;AAC5C,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,iCAAiC;AAChD,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAC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e,SAAS;AACxB,eAAe,cAAc;AAC7B;AACA,iBAAiB,yCAAyC;;AAE1D;AACA;AACA;AACA;AACA;;AAKE;;AAEF,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;ACpF8I;;AAEtK;AACA;AACA;AACA;AACA;AACA,8BAA8B,gCAAgC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,+BAA+B;AAC9C,eAAe,aAAa;AAC5B,eAAe,+BAA+B;AAC9C;AACA,iBAAiB,aAAa,8CAAO,yCAAyC,8CAAO,WAAW;;AAEhG;AACA;AACA;;AAEA,qBAAqB,iDAAU;;AAE/B,yBAAyB,2CAAI;AAC7B;;AAEA,gCAAgC,kDAAW;AAC3C,gCAAgC,kDAAW;AAC3C,oCAAoC,sDAAe;AACnD,gCAAgC,kDAAW,EAAE,4BAA4B;AACzE,iCAAiC,mDAAY,EAAE,gFAAgF;AAC/H,oCAAoC,sDAAe;AACnD;;AAEA;AACA;AACA,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ACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,mBAAmB;AAClC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAKE;;AAEF,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;ACtGpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAKE;;AAEF,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;AClG1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAmB;AACpC;;AAEA;AACA,iBAAiB,uIAAuI;AACxJ;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA,+BAA+B;;AAE/B,+CAA+C;AAC/C,iDAAiD;AACjD,oDAAoD;;AAEpD,uCAAuC;;AAEvC,0BAA0B;;AAE1B,uFAAuF;AACvF,2FAA2F;;AAE3F,uEAAuE;;AAEvE,+DAA+D;AAC/D,UAAU;AACV;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C,2CAA2C;;AAE3C,oCAAoC;AACpC,kCAAkC;AAClC,yCAAyC;AACzC,oDAAoD;;AAEpD,uCAAuC;;AAEvC,0BAA0B;;AAE1B,mDAAmD;;AAEnD,oFAAoF;AACpF,gGAAgG;;AAEhG,sDAAsD;AACtD,UAAU;AACV;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;;AAEF,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;AChHtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB;AACA,iBAAiB,iEAAiE;;AAElF;AACA;AACA;AACA;AACA;AACA;;AAKE;;AAEF,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;;AClHqB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,4BAA4B;AAC3C,eAAe,+BAA+B;AAC9C,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,iBAAiB,mBAAmB,2CAAI,KAAK,8CAAO,YAAY,8CAAO,qDAAqD;;AAE5H;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAKE;;AAEF,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;AC5ImB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;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,oBAAoB;AAC9D;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B;AACrE;AACA;;AAEA;AACA;AACA,eAAe,gCAAgC;AAC/C,iBAAiB;AACjB;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,kBAAkB;AACjC,eAAe,QAAQ;AACvB;AACA,iBAAiB,2BAA2B;;AAE5C;AACA;AACA;AACA;AACA;;AAKE;;AAEF,iEAAe,gBAAgB,EAAC;;;;;;;;;;;;;;;;;;;;AC5FhC;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,KAAK;AAChB,aAAa;AACb;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAUE;;;;;;;;;;;;;;;;;ACtHsC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA,iCAAiC,0DAAmB;;AAEpD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAKE;;AAEF,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;ACxPvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,kCAAkC;AACjD,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,+BAA+B;AAC9C,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAKE;;AAEF,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;AC5SvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,iBAAiB,2DAA2D;;AAE5E;AACA;AACA;AACA;AACA;;AAKE;;AAEF,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;ACrFzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,QAAQ;AACzB,kBAAkB,QAAQ;AAC1B,kBAAkB,QAAQ;AAC1B,kBAAkB,QAAQ;AAC1B;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,QAAQ;AACvB,eAAe,mBAAmB;AAClC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAKE;;AAEF,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;ACtE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,mBAAmB;AAClC,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAKE;;AAEF,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;AC/DlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,qEAAqE;AACpF,eAAe,QAAQ;AACvB;AACA;;AAEA;;AAEA;AACA;AACA;;AAKE;;AAEF,iEAAe,mBAAmB,EAAC;;;;;;;;;;;;;;;;;AC5C+C;;AAElF;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,SAAS;;AAET;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,yCAAyC,0DAAmB;AAC5D;AACA,SAAS;;AAET;;AAEA,iCAAiC,0DAAmB;AACpD;;AAEA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,yCAAyC,0DAAmB;AAC5D;AACA,SAAS;;AAET;;AAEA,iCAAiC,0DAAmB;AACpD;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,8BAA8B,0DAAmB;AACjD;;AAEA;;AAEA;AACA;;AAEA,8BAA8B,mDAAY;AAC1C;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,6CAA6C,0DAAmB;AAChE,6CAA6C,yDAAkB;AAC/D;;AAEA;;AAEA;;AAEA;AACA,iDAAiD,0DAAmB;AACpE;AACA;AACA,aAAa;;AAEb;;AAEA;;AAEA;;AAEA;;AAEA;AACA,iDAAiD,0DAAmB;AACpE;;AAEA;AACA,6CAA6C,0DAAmB;AAChE,6CAA6C,yDAAkB;AAC/D;;AAEA;;AAEA;;AAEA;AACA,iDAAiD,0DAAmB;AACpE;;AAEA;AACA,6CAA6C,0DAAmB;AAChE,6CAA6C,yDAAkB;AAC/D;;AAEA;;AAEA;;AAEA;AACA,iDAAiD,0DAAmB;AACpE;;AAEA;;AAEA;AACA,iDAAiD,0DAAmB;AACpE;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAKE;;AAEF,iEAAe,gBAAgB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/TmC;;AAEnE,IAAI,8EAAgB;;AAE0C;AACF;AACJ;AACE;;AAEtB;AACE;AACsB;AAChB;AACJ;AACwB;AAC5B;AACY;AACR;AACF;AACE;AACF;AACsB;AACtB;AACO;AACD;AACgB;AACnB;AACC;AACA;AACI;;AAEG;AACY;AACE;;AAET;AACA;AACQ;AACR;AACE;AACM;;;;;;;;;;;;;;;;ACxC9D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,6BAA6B;AAC5C,eAAe,QAAQ;AACvB;AACA;AACA,UAAU,kBAAkB;;AAE5B;;AAEA;AACA,SAAS;AACT;AACA;;AAKE;;AAEF,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;AC/BO;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,QAAQ;AACzB,kBAAkB,uBAAuB;AACzC,kBAAkB,UAAU;AAC5B,kBAAkB,QAAQ;AAC1B;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;;AAEA,eAAe,2BAA2B;;AAE1C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,e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AEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,uCAAuC,yDAAkB;AACzD;;AAEA;AACA;;AAEA,uCAAuC,0DAAmB;AAC1D;;AAEA;;AAEA;AACA;AACA;;AAEA,uCAAuC,0DAAmB;AAC1D;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAKE;;AAEF,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;AC1OiB;;AAE5C;AACA;AACA;AACA;AACA;AACA,oCAAoC,gCAAgC;AACpE;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,+BAA+B;AAC9C,eAAe,aAAa;AAC5B,eAAe,+BAA+B;AAC9C;AACA,iBAAiB,aAAa,8CAAO,mCAAmC;;AAExE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,qCAAqC;AACpD;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,qCAAqC;AACpD;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA,eAAe,qCAAqC;AACpD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,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xG;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,6BAA6B;AAC5C,eAAe,QAAQ;AACvB;AACA;AACA,UAAU,kBAAkB;;AAE5B;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;AACA,sBAAsB;AACtB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,gBAAgB,oDAAa;AAC7B,aAAa;;AAEb;;AAEA;AACA,aAAa;AACb,SAAS;;AAET;;AAEA;AACA,SAAS;;AAET;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;;AAET,iCAAiC,mDAAY,mBAAmB,0EAAmC;;AAEnG;AACA;AACA;AACA,SAAS;AACT;AACA;;AAKE;;AAEF,iEAAe,eAAe,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC/H/B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,IAAI;WACJ;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,CAAC;WACD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA;WACA,sBAAsB;WACtB;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA,EAAE;WACF;WACA;;;;;WCrEA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;UEfA;UACA;UACA;UACA","sources":["webpack://@theatrejs/example-menu/./index.js","webpack://@theatrejs/example-menu/./sources/actors/actor-menu/navigation.mp3","webpack://@theatrejs/example-menu/./sources/actors/actor-menu/selection.mp3","webpack://@theatrejs/example-menu/./sources/actors/actor-menu/actor-menu.js","webpack://@theatrejs/example-menu/./sources/actors/button-continue/actor-button-continue.js","webpack://@theatrejs/example-menu/./sources/actors/button-dlc/actor-button-dlc.js","webpack://@theatrejs/example-menu/./sources/actors/button-new-game/actor-button-new-game.js","webpack://@theatrejs/example-menu/./sources/actors/button-quit/actor-button-quit.js","webpack://@theatrejs/example-menu/./sources/stages/stage-menu.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/collidertypes.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/contenttypes.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/gamepad.xbox.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azerty.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertycharacters.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertyeditors.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertyfunctions.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertylockers.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertymodifiers.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertynavigators.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.azertysystems.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.qwerty.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.qwertycharacters.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.qwertyeditors.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.qwertyfunctions.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.qwertylockers.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.qwertymodifiers.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.qwertynavigators.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/eventcodes/keyboard.qwertysystems.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/constants/mathematics.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/aabb.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/actor.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/actorpreloadable.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/collider.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/engine.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/finitestatemachine.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/loop.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/quaternion.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/shader.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/sound.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/sprite.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/stage.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/stagepreloadable.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/state.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/storage.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/timeline.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/timelinekeyframe.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/utils.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/vector2.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/vector3.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/core/vibration.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/events/gamepad.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/events/gamepadanalog.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/events/gamepaddigital.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/extensions/gamepad.extension.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/index.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/actor.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/audio.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/collision.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/input.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/render.system.js","webpack://@theatrejs/example-menu/./node_modules/@theatrejs/theatrejs/sources/systems/vibration.system.js","webpack://@theatrejs/example-menu/webpack/bootstrap","webpack://@theatrejs/example-menu/webpack/runtime/async module","webpack://@theatrejs/example-menu/webpack/runtime/define property getters","webpack://@theatrejs/example-menu/webpack/runtime/global","webpack://@theatrejs/example-menu/webpack/runtime/hasOwnProperty shorthand","webpack://@theatrejs/example-menu/webpack/runtime/make namespace object","webpack://@theatrejs/example-menu/webpack/runtime/publicPath","webpack://@theatrejs/example-menu/webpack/before-startup","webpack://@theatrejs/example-menu/webpack/startup","webpack://@theatrejs/example-menu/webpack/after-startup"],"sourcesContent":["import {Engine, UTILS} from '@theatrejs/theatrejs';\n\nimport StageMenu from 'stages/stage-menu.js';\n\nconst engine = new Engine({$container: document.body});\nengine.initiate(60);\n\nawait engine.preloadStage(StageMenu);\nawait UTILS.frame();\nengine.createStage(StageMenu);\n","export default __webpack_public_path__ + \"4378e9fa9e4ca0b2781ec67b69c8af0f.mp3\";","export default __webpack_public_path__ + \"f2651d13f4de25921433f7a8c179abd0.mp3\";","import {ActorPreloadable, EVENTCODES, FiniteStateMachine, Sound, STORAGE, Vector2, Vibration} from '@theatrejs/theatrejs';\n\nimport ActorButtonContinue from 'actors/button-continue/actor-button-continue.js';\nimport ActorButtonDlc from 'actors/button-dlc/actor-button-dlc.js';\nimport ActorButtonNewGame from 'actors/button-new-game/actor-button-new-game.js';\nimport ActorButtonQuit from 'actors/button-quit/actor-button-quit.js';\n\nimport soundNavigation from './navigation.mp3';\nimport soundSelection from './selection.mp3';\n\nclass ActorMenu extends ActorPreloadable([ActorButtonContinue, ActorButtonDlc, ActorButtonNewGame, ActorButtonQuit, soundNavigation, soundSelection]) {\n\n    /**\n     * Stores the finite state machine.\n     * @type {import('@theatrejs/theatrejs').FiniteStateMachine<('INITIATE' | 'CONTINUESELECTED' | 'CONTINUEACTIVATED' | 'NEWGAMESELECTED' | 'NEWGAMEACTIVATED' | 'QUITSELECTED' | 'QUITACTIVATED')>}\n     * @private\n     */\n    $finiteStateMachineMenu;\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onBeforeRemove']}\n     */\n    onBeforeRemove() {\n\n        this.followers.forEach(($follower) => {\n\n            this.stage.removeActor($follower);\n        });\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        const DEBOUNCEINITIATE = 800;\n        const DEBOUNCENAVIGATION = 200;\n        const DEBOUNCESELECTION = 800;\n\n        const buttonContinue = /** @type {ActorButtonContinue} */(this.stage.createActor(ActorButtonContinue)).translate(new Vector2(0, 24 * 1.5));\n        const buttonNewGame = /** @type {ActorButtonNewGame} */(this.stage.createActor(ActorButtonNewGame)).translate(new Vector2(0, 24 * 0.5));\n        const buttonDlc = /** @type {ActorButtonDlc} */(this.stage.createActor(ActorButtonDlc)).translate(new Vector2(0, -24 * 0.5));\n        const buttonQuit = /** @type {ActorButtonQuit} */(this.stage.createActor(ActorButtonQuit)).translate(new Vector2(0, -24 * 1.5));\n\n        if (STORAGE.get('continue') !== true) {\n\n            buttonContinue.actionDisable();\n        }\n\n        buttonDlc.actionDisable();\n\n        this.addFollower(buttonContinue);\n        this.addFollower(buttonNewGame);\n        this.addFollower(buttonDlc);\n        this.addFollower(buttonQuit);\n\n        const checkCommandActivate = () => {\n\n            return this.engine.getInput(EVENTCODES.KEYBOARDAZERTY.ENTER)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.A)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.START);\n        };\n\n        const checkCommandNavigateUp = () => {\n\n            return this.engine.getInput(EVENTCODES.KEYBOARDAZERTY.UP)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.UP)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.LSUP);\n        };\n\n        const checkCommandNavigateDown = () => {\n\n            return this.engine.getInput(EVENTCODES.KEYBOARDAZERTY.DOWN)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.DOWN)\n            || this.engine.getInput(EVENTCODES.GAMEPADXBOX.LSDOWN);\n        };\n\n        this.$finiteStateMachineMenu = new FiniteStateMachine([\n\n            {\n                $state: 'INITIATE',\n                $transitions: [\n\n                    {\n                        $state: 'CONTINUESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCEINITIATE && STORAGE.get('continue') === true\n                    },\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCEINITIATE && STORAGE.get('continue') !== true\n                    }\n                ]\n            },\n            {\n                $state: 'CONTINUESELECTED',\n                $onEnter: ({$previous}) => {\n\n                    buttonContinue.actionFocus();\n\n                    if ($previous === 'INITIATE') {\n\n                        return;\n                    }\n\n                    if ($previous === 'CONTINUEACTIVATED') {\n\n                        return;\n                    }\n\n                    this.addSound(new Sound({\n\n                        $audio: soundNavigation,\n                        $volume: 0.5\n                    }));\n                },\n                $onLeave: () => buttonContinue.actionRest(),\n                $transitions: [\n\n                    {\n                        $state: 'CONTINUEACTIVATED',\n                        $condition: () => checkCommandActivate() === true\n                    },\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCENAVIGATION && checkCommandNavigateDown() === true && checkCommandNavigateUp() === false && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'CONTINUEACTIVATED',\n                $onEnter: () => {\n\n                    buttonContinue.actionActivate();\n\n                    this.addSound(new Sound({\n\n                        $audio: soundSelection,\n                        $volume: 0.5\n                    }));\n\n                    this.addVibration(new Vibration({\n\n                        $duration: 100,\n                        $intensityFrequencyHigh: 1,\n                        $intensityFrequencyLow: 0\n                    }));\n                },\n                $onLeave: () => {\n\n                    buttonContinue.actionRest();\n\n                    console.log('Continue');\n                },\n                $transitions: [\n\n                    {\n                        $state: 'CONTINUESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCESELECTION && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'NEWGAMESELECTED',\n                $onEnter: ({$previous}) => {\n\n                    buttonNewGame.actionFocus();\n\n                    if ($previous === 'INITIATE') {\n\n                        return;\n                    }\n\n                    if ($previous === 'NEWGAMEACTIVATED') {\n\n                        return;\n                    }\n\n                    this.addSound(new Sound({\n\n                        $audio: soundNavigation,\n                        $volume: 0.5\n                    }));\n                },\n                $onLeave: () => buttonNewGame.actionRest(),\n                $transitions: [\n\n                    {\n                        $state: 'NEWGAMEACTIVATED',\n                        $condition: () => checkCommandActivate() === true\n                    },\n                    {\n                        $state: 'CONTINUESELECTED',\n                        $condition: ({$timer}) => STORAGE.get('continue') === true && $timer >= DEBOUNCENAVIGATION && checkCommandNavigateUp() === true && checkCommandNavigateDown() === false && checkCommandActivate() === false\n                    },\n                    {\n                        $state: 'QUITSELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCENAVIGATION && checkCommandNavigateDown() === true && checkCommandNavigateUp() === false && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'NEWGAMEACTIVATED',\n                $onEnter: () => {\n\n                    buttonNewGame.actionActivate();\n\n                    this.addSound(new Sound({\n\n                        $audio: soundSelection,\n                        $volume: 0.5\n                    }));\n\n                    this.addVibration(new Vibration({\n\n                        $duration: 100,\n                        $intensityFrequencyHigh: 1,\n                        $intensityFrequencyLow: 0\n                    }));\n                },\n                $onLeave: () => {\n\n                    buttonNewGame.actionRest();\n\n                    if (STORAGE.get('continue') !== true) {\n\n                        buttonContinue.actionRest();\n                        STORAGE.set('continue', true);\n                    }\n\n                    console.log('New Game');\n                },\n                $transitions: [\n\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCESELECTION && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'QUITSELECTED',\n                $onEnter: ({$previous}) => {\n\n                    buttonQuit.actionFocus();\n\n                    if ($previous === 'QUITACTIVATED') {\n\n                        return;\n                    }\n\n                    this.addSound(new Sound({\n\n                        $audio: soundNavigation,\n                        $volume: 0.5\n                    }));\n                },\n                $onLeave: () => buttonQuit.actionRest(),\n                $transitions: [\n\n                    {\n                        $state: 'QUITACTIVATED',\n                        $condition: () => checkCommandActivate() === true\n                    },\n                    {\n                        $state: 'NEWGAMESELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCENAVIGATION && checkCommandNavigateUp() === true && checkCommandNavigateDown() === false && checkCommandActivate() === false\n                    }\n                ]\n            },\n            {\n                $state: 'QUITACTIVATED',\n                $onEnter: () => {\n\n                    buttonQuit.actionActivate();\n\n                    this.addSound(new Sound({\n\n                        $audio: soundSelection,\n                        $volume: 0.5\n                    }));\n\n                    this.addVibration(new Vibration({\n\n                        $duration: 100,\n                        $intensityFrequencyHigh: 1,\n                        $intensityFrequencyLow: 0\n                    }));\n                },\n                $onLeave: () => {\n\n                    buttonQuit.actionRest();\n\n                    if (STORAGE.get('continue') === true) {\n\n                        buttonContinue.actionDisable()\n                        STORAGE.set('continue', false);\n                    }\n\n                    console.log('Quit');\n                },\n                $transitions: [\n\n                    {\n                        $state: 'QUITSELECTED',\n                        $condition: ({$timer}) => $timer >= DEBOUNCESELECTION && checkCommandActivate() === false\n                    }\n                ]\n            }\n        ]);\n\n        this.$finiteStateMachineMenu.initiate('INITIATE');\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$finiteStateMachineMenu.update($timetick);\n    }\n}\n\nexport default ActorMenu;\n","import {AABB, ActorPreloadable, Sprite, Timeline, TimelineKeyframe, Vector2} from '@theatrejs/theatrejs';\n\nimport dataButtonContinue from './button-continue-64x16.json';\nimport textureButtonContinue from './button-continue-64x16.png';\n\nclass ActorButtonContinue extends ActorPreloadable([textureButtonContinue]) {\n\n    /**\n     * Stores sprite data.\n     * @type {typedatasprite}\n     * @private\n     */\n    $data;\n\n    /**\n     * Stores the timeline.\n     * @type {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Creates an animated timeline for the spritesheet.\n     * @param {typedataspriteframe[]} $frames The sprite frames data.\n     * @param {typedataspritesize} $size The sprite size data.\n     * @returns {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $createTimeline($frames, $size) {\n\n        return new Timeline([\n\n            ...($frames.map(($frame, $index) => {\n\n                const {x, y, width, height} = $frame;\n\n                const sprite = new Sprite({\n\n                    $frameSource: new AABB(\n\n                        new Vector2(x / $size.width, y / $size.height),\n                        new Vector2((x + width) / $size.width, (y + height) / $size.height)\n                    ),\n                    $sizeTarget: new Vector2(width, height),\n                    $textureColor: textureButtonContinue\n                });\n\n                return new TimelineKeyframe({\n\n                    $onEnter: () => {\n\n                        this.setSprite(sprite);\n                    },\n                    $timecode: $index * (1000 / 10)\n                });\n            })),\n            new TimelineKeyframe({\n\n                $onEnter: ($timeline) => {\n\n                    $timeline.seekTimecode(0);\n                },\n                $timecode: $frames.length * (1000 / 10)\n            })\n        ]);\n    }\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.active, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.disabled, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.focus, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.idle, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$data = dataButtonContinue;\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport default ActorButtonContinue;\n","import {AABB, ActorPreloadable, Sprite, Timeline, TimelineKeyframe, Vector2} from '@theatrejs/theatrejs';\n\nimport dataButtonDlc from './button-dlc-64x16.json';\nimport textureButtonDlc from './button-dlc-64x16.png';\n\nclass ActorButtonDlc extends ActorPreloadable([textureButtonDlc]) {\n\n    /**\n     * Stores sprite data.\n     * @type {typedatasprite}\n     * @private\n     */\n    $data;\n\n    /**\n     * Stores the timeline.\n     * @type {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Creates an animated timeline for the spritesheet.\n     * @param {typedataspriteframe[]} $frames The sprite frames data.\n     * @param {typedataspritesize} $size The sprite size data.\n     * @returns {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $createTimeline($frames, $size) {\n\n        return new Timeline([\n\n            ...($frames.map(($frame, $index) => {\n\n                const {x, y, width, height} = $frame;\n\n                const sprite = new Sprite({\n\n                    $frameSource: new AABB(\n\n                        new Vector2(x / $size.width, y / $size.height),\n                        new Vector2((x + width) / $size.width, (y + height) / $size.height)\n                    ),\n                    $sizeTarget: new Vector2(width, height),\n                    $textureColor: textureButtonDlc\n                });\n\n                return new TimelineKeyframe({\n\n                    $onEnter: () => {\n\n                        this.setSprite(sprite);\n                    },\n                    $timecode: $index * (1000 / 10)\n                });\n            })),\n            new TimelineKeyframe({\n\n                $onEnter: ($timeline) => {\n\n                    $timeline.seekTimecode(0);\n                },\n                $timecode: $frames.length * (1000 / 10)\n            })\n        ]);\n    }\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.active, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.disabled, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.focus, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.idle, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$data = dataButtonDlc;\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport default ActorButtonDlc;\n","import {AABB, ActorPreloadable, Sprite, Timeline, TimelineKeyframe, Vector2} from '@theatrejs/theatrejs';\n\nimport dataButtonNewGame from './button-new-game-64x16.json';\nimport textureButtonNewGame from './button-new-game-64x16.png';\n\nclass ActorButtonNewGame extends ActorPreloadable([textureButtonNewGame]) {\n\n    /**\n     * Stores sprite data.\n     * @type {typedatasprite}\n     * @private\n     */\n    $data;\n\n    /**\n     * Stores the timeline.\n     * @type {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Creates an animated timeline for the spritesheet.\n     * @param {typedataspriteframe[]} $frames The sprite frames data.\n     * @param {typedataspritesize} $size The sprite size data.\n     * @returns {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $createTimeline($frames, $size) {\n\n        return new Timeline([\n\n            ...($frames.map(($frame, $index) => {\n\n                const {x, y, width, height} = $frame;\n\n                const sprite = new Sprite({\n\n                    $frameSource: new AABB(\n\n                        new Vector2(x / $size.width, y / $size.height),\n                        new Vector2((x + width) / $size.width, (y + height) / $size.height)\n                    ),\n                    $sizeTarget: new Vector2(width, height),\n                    $textureColor: textureButtonNewGame\n                });\n\n                return new TimelineKeyframe({\n\n                    $onEnter: () => {\n\n                        this.setSprite(sprite);\n                    },\n                    $timecode: $index * (1000 / 10)\n                });\n            })),\n            new TimelineKeyframe({\n\n                $onEnter: ($timeline) => {\n\n                    $timeline.seekTimecode(0);\n                },\n                $timecode: $frames.length * (1000 / 10)\n            })\n        ]);\n    }\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.active, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.disabled, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.focus, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.idle, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$data = dataButtonNewGame;\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport default ActorButtonNewGame;\n","import {AABB, ActorPreloadable, Sprite, Timeline, TimelineKeyframe, Vector2} from '@theatrejs/theatrejs';\n\nimport dataButtonQuit from './button-quit-64x16.json';\nimport textureButtonQuit from './button-quit-64x16.png';\n\nclass ActorButtonQuit extends ActorPreloadable([textureButtonQuit]) {\n\n    /**\n     * Stores sprite data.\n     * @type {typedatasprite}\n     * @private\n     */\n    $data;\n\n    /**\n     * Stores the timeline.\n     * @type {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Creates an animated timeline for the spritesheet.\n     * @param {typedataspriteframe[]} $frames The sprite frames data.\n     * @param {typedataspritesize} $size The sprite size data.\n     * @returns {import('@theatrejs/theatrejs').Timeline}\n     * @private\n     */\n    $createTimeline($frames, $size) {\n\n        return new Timeline([\n\n            ...($frames.map(($frame, $index) => {\n\n                const {x, y, width, height} = $frame;\n\n                const sprite = new Sprite({\n\n                    $frameSource: new AABB(\n\n                        new Vector2(x / $size.width, y / $size.height),\n                        new Vector2((x + width) / $size.width, (y + height) / $size.height)\n                    ),\n                    $sizeTarget: new Vector2(width, height),\n                    $textureColor: textureButtonQuit\n                });\n\n                return new TimelineKeyframe({\n\n                    $onEnter: () => {\n\n                        this.setSprite(sprite);\n                    },\n                    $timecode: $index * (1000 / 10)\n                });\n            })),\n            new TimelineKeyframe({\n\n                $onEnter: ($timeline) => {\n\n                    $timeline.seekTimecode(0);\n                },\n                $timecode: $frames.length * (1000 / 10)\n            })\n        ]);\n    }\n\n    /**\n     * Triggers the 'activate' action.\n     * @public\n     */\n    actionActivate() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.active, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'disable' action.\n     * @public\n     */\n    actionDisable() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.disabled, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'focus' action.\n     * @public\n     */\n    actionFocus() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.focus, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Triggers the 'rest' action.\n     * @public\n     */\n    actionRest() {\n\n        this.$timeline = this.$createTimeline(this.$data.frames.idle, this.$data.sprite);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$data = dataButtonQuit;\n\n        this.actionRest();\n    }\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport default ActorButtonQuit;\n","import {StagePreloadable, Vector2, Vector3} from '@theatrejs/theatrejs';\n\nimport ActorMenu from 'actors/actor-menu/actor-menu.js';\n\nclass StageMenu extends StagePreloadable([ActorMenu]) {\n\n    /**\n     * @type {import('@theatrejs/theatrejs').Stage['onCreate']}\n     */\n    onCreate() {\n\n        this.engine.setColor(new Vector3(27 / 255, 36 / 255, 71 / 255));\n        this.engine.setResolution(new Vector2(480, 360));\n\n        this.createActor(ActorMenu);\n    }\n}\n\nexport default StageMenu;\n","/**\n * The dynamic collider type.\n * @type {'DYNAMIC'}\n * @constant\n */\nconst DYNAMIC = 'DYNAMIC';\n\n/**\n * The kinetic collider type.\n * @type {'KINETIC'}\n * @constant\n */\nconst KINETIC = 'KINETIC';\n\n/**\n * The static collider type.\n * @type {'STATIC'}\n * @constant\n */\nconst STATIC = 'STATIC';\n\nexport {\n\n    DYNAMIC,\n    KINETIC,\n    STATIC\n};\n","/**\n * The audio/mpeg Content-Type.\n * @type {'audio/mpeg'}\n * @constant\n */\nconst AUDIOMPEG = 'audio/mpeg';\n\n/**\n * The audio/wave Content-Type.\n * @type {'audio/wave'}\n * @constant\n */\nconst AUDIOWAVE = 'audio/wave';\n\n/**\n * The image/jpeg Content-Type.\n * @type {'image/jpeg'}\n * @constant\n */\nconst IMAGEJPEG = 'image/jpeg';\n\n/**\n * The image/png Content-Type.\n * @type {'image/png'}\n * @constant\n */\nconst IMAGEPNG = 'image/png';\n\nexport {\n\n    AUDIOMPEG,\n    AUDIOWAVE,\n    IMAGEJPEG,\n    IMAGEPNG\n};\n","import * as GAMEPADXBOX from './eventcodes/gamepad.xbox.js';\nimport * as KEYBOARDAZERTY from './eventcodes/keyboard.azerty.js';\nimport * as KEYBOARDQWERTY from './eventcodes/keyboard.qwerty.js';\n\nexport {\n\n    GAMEPADXBOX,\n    KEYBOARDAZERTY,\n    KEYBOARDQWERTY\n};\n","/**\n * The XBOX gamepad 'A' event code.\n * @type {'ClusterRightButtonBottom'}\n * @constant\n */\nconst A = 'ClusterRightButtonBottom';\n\n/**\n * The XBOX gamepad 'B' event code.\n * @type {'ClusterRightButtonRight'}\n * @constant\n */\nconst B = 'ClusterRightButtonRight';\n\n/**\n * The XBOX gamepad 'X' event code.\n * @type {'ClusterRightButtonLeft'}\n * @constant\n */\nconst X = 'ClusterRightButtonLeft';\n\n/**\n * The XBOX gamepad 'Y' event code.\n * @type {'ClusterRightButtonTop'}\n * @constant\n */\nconst Y = 'ClusterRightButtonTop';\n\n/**\n * The XBOX gamepad 'LB' event code.\n * @type {'ClusterFrontButtonTopLeft'}\n * @constant\n */\nconst LB = 'ClusterFrontButtonTopLeft';\n\n/**\n * The XBOX gamepad 'RB' event code.\n * @type {'ClusterFrontButtonTopRight'}\n * @constant\n */\nconst RB = 'ClusterFrontButtonTopRight';\n\n/**\n * The XBOX gamepad 'LT' event code.\n * @type {'ClusterFrontButtonBottomLeft'}\n * @constant\n */\nconst LT = 'ClusterFrontButtonBottomLeft';\n\n/**\n * The XBOX gamepad 'RT' event code.\n * @type {'ClusterFrontButtonBottomRight'}\n * @constant\n */\nconst RT = 'ClusterFrontButtonBottomRight';\n\n/**\n * The XBOX gamepad 'BACK' event code.\n * @type {'ClusterCenterButtonLeft'}\n * @constant\n */\nconst BACK = 'ClusterCenterButtonLeft';\n\n/**\n * The XBOX gamepad 'START' event code.\n * @type {'ClusterCenterButtonRight'}\n * @constant\n */\nconst START = 'ClusterCenterButtonRight';\n\n/**\n * The XBOX gamepad 'LSB' event code.\n * @type {'StickLeftButton'}\n * @constant\n */\nconst LSB = 'StickLeftButton';\n\n/**\n * The XBOX gamepad 'RSB' event code.\n * @type {'StickRightButton'}\n * @constant\n */\nconst RSB = 'StickRightButton';\n\n/**\n * The XBOX gamepad 'UP' event code.\n * @type {'ClusterLeftButtonTop'}\n * @constant\n */\nconst UP = 'ClusterLeftButtonTop';\n\n/**\n * The XBOX gamepad 'DOWN' event code.\n * @type {'ClusterLeftButtonBottom'}\n * @constant\n */\nconst DOWN = 'ClusterLeftButtonBottom';\n\n/**\n * The XBOX gamepad 'LEFT' event code.\n * @type {'ClusterLeftButtonLeft'}\n * @constant\n */\nconst LEFT = 'ClusterLeftButtonLeft';\n\n/**\n * The XBOX gamepad 'RIGHT' event code.\n * @type {'ClusterLeftButtonRight'}\n * @constant\n */\nconst RIGHT = 'ClusterLeftButtonRight';\n\n/**\n * The XBOX gamepad 'XBOX' event code.\n * @type {'ClusterCenterButtonCenter'}\n * @constant\n */\nconst XBOX = 'ClusterCenterButtonCenter';\n\n/**\n * The XBOX gamepad 'LSLEFT' event code.\n * @type {'StickLeftLeft'}\n * @constant\n */\nconst LSLEFT = 'StickLeftLeft';\n\n/**\n * The XBOX gamepad 'LSRIGHT' event code.\n * @type {'StickLeftRight'}\n * @constant\n */\nconst LSRIGHT = 'StickLeftRight';\n\n/**\n * The XBOX gamepad 'LSUP' event code.\n * @type {'StickLeftUp'}\n * @constant\n */\nconst LSUP = 'StickLeftUp';\n\n/**\n * The XBOX gamepad 'LSDOWN' event code.\n * @type {'StickLeftDown'}\n * @constant\n */\nconst LSDOWN = 'StickLeftDown';\n\n/**\n * The XBOX gamepad 'RSLEFT' event code.\n * @type {'StickRightLeft'}\n * @constant\n */\nconst RSLEFT = 'StickRightLeft';\n\n/**\n * The XBOX gamepad 'RSRIGHT' event code.\n * @type {'StickRightRight'}\n * @constant\n */\nconst RSRIGHT = 'StickRightRight';\n\n/**\n * The XBOX gamepad 'RSUP' event code.\n * @type {'StickRightUp'}\n * @constant\n */\nconst RSUP = 'StickRightUp';\n\n/**\n * The XBOX gamepad 'RSDOWN' event code.\n * @type {'StickRightDown'}\n * @constant\n */\nconst RSDOWN = 'StickRightDown';\n\n/**\n * The XBOX gamepad 'CONNECTED' event code.\n * @type {'Connected'}\n * @constant\n */\nconst CONNECTED = 'Connected';\n\n/**\n * The XBOX gamepad 'DISCONNECTED' event code.\n * @type {'Disconnected'}\n * @constant\n */\nconst DISCONNECTED = 'Disconnected';\n\n/**\n * The XBOX gamepad 'VIBRATEEND' event code.\n * @type {'VibrateEnd'}\n * @constant\n */\nconst VIBRATEEND = 'VibrateEnd';\n\n/**\n * The XBOX gamepad 'VIBRATESTART' event code.\n * @type {'VibrateStart'}\n * @constant\n */\nconst VIBRATESTART = 'VibrateStart';\n\nexport {\n\n    A,\n    B,\n    X,\n    Y,\n\n    LB,\n    RB,\n    LT,\n    RT,\n\n    BACK,\n    START,\n\n    LSB,\n    RSB,\n\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT,\n\n    XBOX,\n\n    LSLEFT,\n    LSRIGHT,\n    LSUP,\n    LSDOWN,\n    RSLEFT,\n    RSRIGHT,\n    RSUP,\n    RSDOWN,\n\n    CONNECTED,\n    DISCONNECTED,\n    VIBRATEEND,\n    VIBRATESTART\n};\n","import {DIGIT0, DIGIT1, DIGIT2, DIGIT3, DIGIT4, DIGIT5, DIGIT6, DIGIT7, DIGIT8, DIGIT9, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, SPACE} from './keyboard.azertycharacters.js';\nimport {ENTER, DELETE} from './keyboard.azertyeditors.js';\nimport {F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12} from './keyboard.azertyfunctions.js';\nimport {CAPSLOCK} from './keyboard.azertylockers.js';\nimport {ALTLEFT, ALTRIGHT, CONTROLLEFT, CONTROLRIGHT, SHIFTLEFT, SHIFTRIGHT} from './keyboard.azertymodifiers.js';\nimport {TAB, UP, LEFT, RIGHT, DOWN} from './keyboard.azertynavigators.js';\nimport {CONTEXTMENU, ESCAPE} from './keyboard.azertysystems.js';\n\nexport {\n\n    DIGIT0,\n    DIGIT1,\n    DIGIT2,\n    DIGIT3,\n    DIGIT4,\n    DIGIT5,\n    DIGIT6,\n    DIGIT7,\n    DIGIT8,\n    DIGIT9,\n\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X,\n    Y,\n    Z,\n\n    SPACE,\n\n    ENTER,\n    DELETE,\n\n    F1,\n    F2,\n    F3,\n    F4,\n    F5,\n    F6,\n    F7,\n    F8,\n    F9,\n    F10,\n    F11,\n    F12,\n\n    CAPSLOCK,\n\n    ALTLEFT,\n    ALTRIGHT,\n    CONTROLLEFT,\n    CONTROLRIGHT,\n    SHIFTLEFT,\n    SHIFTRIGHT,\n\n    TAB,\n\n    UP,\n    LEFT,\n    RIGHT,\n    DOWN,\n\n    CONTEXTMENU,\n    ESCAPE\n};\n","/**\n * The AZERTY-based keyboard 'DIGIT0' event code.\n * @type {'Digit0'}\n * @constant\n */\nconst DIGIT0 = 'Digit0';\n\n/**\n * The AZERTY-based keyboard 'DIGIT1' event code.\n * @type {'Digit1'}\n * @constant\n */\nconst DIGIT1 = 'Digit1';\n\n/**\n * The AZERTY-based keyboard 'DIGIT2' event code.\n * @type {'Digit2'}\n * @constant\n */\nconst DIGIT2 = 'Digit2';\n\n/**\n * The AZERTY-based keyboard 'DIGIT3' event code.\n * @type {'Digit3'}\n * @constant\n */\nconst DIGIT3 = 'Digit3';\n\n/**\n * The AZERTY-based keyboard 'DIGIT4' event code.\n * @type {'Digit4'}\n * @constant\n */\nconst DIGIT4 = 'Digit4';\n\n/**\n * The AZERTY-based keyboard 'DIGIT5' event code.\n * @type {'Digit5'}\n * @constant\n */\nconst DIGIT5 = 'Digit5';\n\n/**\n * The AZERTY-based keyboard 'DIGIT6' event code.\n * @type {'Digit6'}\n * @constant\n */\nconst DIGIT6 = 'Digit6';\n\n/**\n * The AZERTY-based keyboard 'DIGIT7' event code.\n * @type {'Digit7'}\n * @constant\n */\nconst DIGIT7 = 'Digit7';\n\n/**\n * The AZERTY-based keyboard 'DIGIT8' event code.\n * @type {'Digit8'}\n * @constant\n */\nconst DIGIT8 = 'Digit8';\n\n/**\n * The AZERTY-based keyboard 'DIGIT9' event code.\n * @type {'Digit9'}\n * @constant\n */\nconst DIGIT9 = 'Digit9';\n\n/**\n * The AZERTY-based keyboard 'A' event code.\n * @type {'KeyQ'}\n * @constant\n */\nconst A = 'KeyQ';\n\n/**\n * The AZERTY-based keyboard 'B' event code.\n * @type {'KeyB'}\n * @constant\n */\nconst B = 'KeyB';\n\n/**\n * The AZERTY-based keyboard 'C' event code.\n * @type {'KeyB'}\n * @constant\n */\nconst C = 'KeyB';\n\n/**\n * The AZERTY-based keyboard 'D' event code.\n * @type {'KeyD'}\n * @constant\n */\nconst D = 'KeyD';\n\n/**\n * The AZERTY-based keyboard 'E' event code.\n * @type {'KeyE'}\n * @constant\n */\nconst E = 'KeyE';\n\n/**\n * The AZERTY-based keyboard 'F' event code.\n * @type {'KeyF'}\n * @constant\n */\nconst F = 'KeyF';\n\n/**\n * The AZERTY-based keyboard 'G' event code.\n * @type {'KeyG'}\n * @constant\n */\nconst G = 'KeyG';\n\n/**\n * The AZERTY-based keyboard 'H' event code.\n * @type {'KeyH'}\n * @constant\n */\nconst H = 'KeyH';\n\n/**\n * The AZERTY-based keyboard 'I' event code.\n * @type {'KeyI'}\n * @constant\n */\nconst I = 'KeyI';\n\n/**\n * The AZERTY-based keyboard 'J' event code.\n * @type {'KeyJ'}\n * @constant\n */\nconst J = 'KeyJ';\n\n/**\n * The AZERTY-based keyboard 'K' event code.\n * @type {'KeyK'}\n * @constant\n */\nconst K = 'KeyK';\n\n/**\n * The AZERTY-based keyboard 'L' event code.\n * @type {'KeyL'}\n * @constant\n */\nconst L = 'KeyL';\n\n/**\n * The AZERTY-based keyboard 'M' event code.\n * @type {'Semicolon'}\n * @constant\n */\nconst M = 'Semicolon';\n\n/**\n * The AZERTY-based keyboard 'N' event code.\n * @type {'KeyN'}\n * @constant\n */\nconst N = 'KeyN';\n\n/**\n * The AZERTY-based keyboard 'O' event code.\n * @type {'KeyO'}\n * @constant\n */\nconst O = 'KeyO';\n\n/**\n * The AZERTY-based keyboard 'P' event code.\n * @type {'KeyP'}\n * @constant\n */\nconst P = 'KeyP';\n\n/**\n * The AZERTY-based keyboard 'Q' event code.\n * @type {'KeyA'}\n * @constant\n */\nconst Q = 'KeyA';\n\n/**\n * The AZERTY-based keyboard 'R' event code.\n * @type {'KeyR'}\n * @constant\n */\nconst R = 'KeyR';\n\n/**\n * The AZERTY-based keyboard 'S' event code.\n * @type {'KeyS'}\n * @constant\n */\nconst S = 'KeyS';\n\n/**\n * The AZERTY-based keyboard 'T' event code.\n * @type {'KeyT'}\n * @constant\n */\nconst T = 'KeyT';\n\n/**\n * The AZERTY-based keyboard 'U' event code.\n * @type {'KeyU'}\n * @constant\n */\nconst U = 'KeyU';\n\n/**\n * The AZERTY-based keyboard 'V' event code.\n * @type {'KeyV'}\n * @constant\n */\nconst V = 'KeyV';\n\n/**\n * The AZERTY-based keyboard 'W' event code.\n * @type {'KeyZ'}\n * @constant\n */\nconst W = 'KeyZ';\n\n/**\n * The AZERTY-based keyboard 'X' event code.\n * @type {'KeyX'}\n * @constant\n */\nconst X = 'KeyX';\n\n/**\n * The AZERTY-based keyboard 'Y' event code.\n * @type {'KeyY'}\n * @constant\n */\nconst Y = 'KeyY';\n\n/**\n * The AZERTY-based keyboard 'Z' event code.\n * @type {'KeyW'}\n * @constant\n */\nconst Z = 'KeyW';\n\n/**\n * The AZERTY-based keyboard 'SPACE' event code.\n * @type {'Space'}\n * @constant\n */\nconst SPACE = 'Space';\n\nexport {\n\n    DIGIT0,\n    DIGIT1,\n    DIGIT2,\n    DIGIT3,\n    DIGIT4,\n    DIGIT5,\n    DIGIT6,\n    DIGIT7,\n    DIGIT8,\n    DIGIT9,\n\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X,\n    Y,\n    Z,\n\n    SPACE\n};\n","/**\n * The AZERTY-based keyboard 'DELETE' event code.\n * @type {'Delete'}\n * @constant\n */\nconst DELETE = 'Delete';\n\n/**\n * The AZERTY-based keyboard 'ENTER' event code.\n * @type {'Enter'}\n * @constant\n */\nconst ENTER = 'Enter';\n\nexport {\n\n    DELETE,\n    ENTER\n};\n","/**\n * The AZERTY-based keyboard 'F1' event code.\n * @type {'F1'}\n * @constant\n */\nconst F1 = 'F1';\n\n/**\n * The AZERTY-based keyboard 'F2' event code.\n * @type {'F2'}\n * @constant\n */\nconst F2 = 'F2';\n\n/**\n * The AZERTY-based keyboard 'F3' event code.\n * @type {'F3'}\n * @constant\n */\nconst F3 = 'F3';\n\n/**\n * The AZERTY-based keyboard 'F4' event code.\n * @type {'F4'}\n * @constant\n */\nconst F4 = 'F4';\n\n/**\n * The AZERTY-based keyboard 'F5' event code.\n * @type {'F5'}\n * @constant\n */\nconst F5 = 'F5';\n\n/**\n * The AZERTY-based keyboard 'F6' event code.\n * @type {'F6'}\n * @constant\n */\nconst F6 = 'F6';\n\n/**\n * The AZERTY-based keyboard 'F7' event code.\n * @type {'F7'}\n * @constant\n */\nconst F7 = 'F7';\n\n/**\n * The AZERTY-based keyboard 'F8' event code.\n * @type {'F8'}\n * @constant\n */\nconst F8 = 'F8';\n\n/**\n * The AZERTY-based keyboard 'F9' event code.\n * @type {'F9'}\n * @constant\n */\nconst F9 = 'F9';\n\n/**\n * The AZERTY-based keyboard 'F10' event code.\n * @type {'F10'}\n * @constant\n */\nconst F10 = 'F10';\n\n/**\n * The AZERTY-based keyboard 'F11' event code.\n * @type {'F11'}\n * @constant\n */\nconst F11 = 'F11';\n\n/**\n * The AZERTY-based keyboard 'F12' event code.\n * @type {'F12'}\n * @constant\n */\nconst F12 = 'F12';\n\nexport {\n\n    F1,\n    F2,\n    F3,\n    F4,\n    F5,\n    F6,\n    F7,\n    F8,\n    F9,\n    F10,\n    F11,\n    F12\n};\n","/**\n * The AZERTY-based keyboard 'CAPSLOCK' event code.\n * @type {'CapsLock'}\n * @constant\n */\nconst CAPSLOCK = 'CapsLock';\n\nexport {\n\n    CAPSLOCK\n};\n","/**\n * The AZERTY-based keyboard 'ALTLEFT' event code.\n * @type {'AltLeft'}\n * @constant\n */\nconst ALTLEFT = 'AltLeft';\n\n/**\n * The AZERTY-based keyboard 'ALTRIGHT' event code.\n * @type {'AltRight'}\n * @constant\n */\nconst ALTRIGHT = 'AltRight';\n\n/**\n * The AZERTY-based keyboard 'CONTROLLEFT' event code.\n * @type {'ControlLeft'}\n * @constant\n */\nconst CONTROLLEFT = 'ControlLeft';\n\n/**\n * The AZERTY-based keyboard 'CONTROLRIGHT' event code.\n * @type {'ControlRight'}\n * @constant\n */\nconst CONTROLRIGHT = 'ControlRight';\n\n/**\n * The AZERTY-based keyboard 'SHIFTLEFT' event code.\n * @type {'ShiftLeft'}\n * @constant\n */\nconst SHIFTLEFT = 'ShiftLeft';\n\n/**\n * The AZERTY-based keyboard 'SHIFTRIGHT' event code.\n * @type {'ShiftRight'}\n * @constant\n */\nconst SHIFTRIGHT = 'ShiftRight';\n\nexport {\n\n    CONTROLLEFT,\n    CONTROLRIGHT,\n    ALTLEFT,\n    ALTRIGHT,\n    SHIFTLEFT,\n    SHIFTRIGHT\n};\n","/**\n * The AZERTY-based keyboard 'TAB' event code.\n * @type {'Tab'}\n * @constant\n */\nconst TAB = 'Tab';\n\n/**\n * The AZERTY-based keyboard 'UP' event code.\n * @type {'ArrowUp'}\n * @constant\n */\nconst UP = 'ArrowUp';\n\n/**\n * The AZERTY-based keyboard 'LEFT' event code.\n * @type {'ArrowLeft'}\n * @constant\n */\nconst LEFT = 'ArrowLeft';\n\n/**\n * The AZERTY-based keyboard 'RIGHT' event code.\n * @type {'ArrowRight'}\n * @constant\n */\nconst RIGHT = 'ArrowRight';\n\n/**\n * The AZERTY-based keyboard 'DOWN' event code.\n * @type {'ArrowDown'}\n * @constant\n */\nconst DOWN = 'ArrowDown';\n\nexport {\n\n    TAB,\n\n    UP,\n    LEFT,\n    RIGHT,\n    DOWN\n};\n","/**\n * The AZERTY-based keyboard 'ESCAPE' event code.\n * @type {'ContextMenu'}\n * @constant\n */\nconst CONTEXTMENU = 'ContextMenu';\n\n/**\n * The AZERTY-based keyboard 'ESCAPE' event code.\n * @type {'Escape'}\n * @constant\n */\nconst ESCAPE = 'Escape';\n\nexport {\n\n    CONTEXTMENU,\n    ESCAPE\n};\n","import {DIGIT0, DIGIT1, DIGIT2, DIGIT3, DIGIT4, DIGIT5, DIGIT6, DIGIT7, DIGIT8, DIGIT9, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, SPACE} from './keyboard.qwertycharacters.js';\nimport {ENTER, DELETE} from './keyboard.qwertyeditors.js';\nimport {F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12} from './keyboard.qwertyfunctions.js';\nimport {CAPSLOCK} from './keyboard.qwertylockers.js';\nimport {ALTLEFT, ALTRIGHT, CONTROLLEFT, CONTROLRIGHT, SHIFTLEFT, SHIFTRIGHT} from './keyboard.qwertymodifiers.js';\nimport {TAB, UP, LEFT, RIGHT, DOWN} from './keyboard.qwertynavigators.js';\nimport {CONTEXTMENU, ESCAPE} from './keyboard.qwertysystems.js';\n\nexport {\n\n    DIGIT0,\n    DIGIT1,\n    DIGIT2,\n    DIGIT3,\n    DIGIT4,\n    DIGIT5,\n    DIGIT6,\n    DIGIT7,\n    DIGIT8,\n    DIGIT9,\n\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X,\n    Y,\n    Z,\n\n    SPACE,\n\n    ENTER,\n    DELETE,\n\n    F1,\n    F2,\n    F3,\n    F4,\n    F5,\n    F6,\n    F7,\n    F8,\n    F9,\n    F10,\n    F11,\n    F12,\n\n    CAPSLOCK,\n\n    ALTLEFT,\n    ALTRIGHT,\n    CONTROLLEFT,\n    CONTROLRIGHT,\n    SHIFTLEFT,\n    SHIFTRIGHT,\n\n    TAB,\n\n    UP,\n    LEFT,\n    RIGHT,\n    DOWN,\n\n    CONTEXTMENU,\n    ESCAPE\n};\n","/**\n * The QWERTY-based keyboard 'DIGIT0' event code.\n * @type {'Digit0'}\n * @constant\n */\nconst DIGIT0 = 'Digit0';\n\n/**\n * The QWERTY-based keyboard 'DIGIT1' event code.\n * @type {'Digit1'}\n * @constant\n */\nconst DIGIT1 = 'Digit1';\n\n/**\n * The QWERTY-based keyboard 'DIGIT2' event code.\n * @type {'Digit2'}\n * @constant\n */\nconst DIGIT2 = 'Digit2';\n\n/**\n * The QWERTY-based keyboard 'DIGIT3' event code.\n * @type {'Digit3'}\n * @constant\n */\nconst DIGIT3 = 'Digit3';\n\n/**\n * The QWERTY-based keyboard 'DIGIT4' event code.\n * @type {'Digit4'}\n * @constant\n */\nconst DIGIT4 = 'Digit4';\n\n/**\n * The QWERTY-based keyboard 'DIGIT5' event code.\n * @type {'Digit5'}\n * @constant\n */\nconst DIGIT5 = 'Digit5';\n\n/**\n * The QWERTY-based keyboard 'DIGIT6' event code.\n * @type {'Digit6'}\n * @constant\n */\nconst DIGIT6 = 'Digit6';\n\n/**\n * The QWERTY-based keyboard 'DIGIT7' event code.\n * @type {'Digit7'}\n * @constant\n */\nconst DIGIT7 = 'Digit7';\n\n/**\n * The QWERTY-based keyboard 'DIGIT8' event code.\n * @type {'Digit8'}\n * @constant\n */\nconst DIGIT8 = 'Digit8';\n\n/**\n * The QWERTY-based keyboard 'DIGIT9' event code.\n * @type {'Digit9'}\n * @constant\n */\nconst DIGIT9 = 'Digit9';\n\n/**\n * The QWERTY-based keyboard 'A' event code.\n * @type {'KeyA'}\n * @constant\n */\nconst A = 'KeyA';\n\n/**\n * The QWERTY-based keyboard 'B' event code.\n * @type {'KeyB'}\n * @constant\n */\nconst B = 'KeyB';\n\n/**\n * The QWERTY-based keyboard 'C' event code.\n * @type {'KeyC'}\n * @constant\n */\nconst C = 'KeyC';\n\n/**\n * The QWERTY-based keyboard 'D' event code.\n * @type {'KeyD'}\n * @constant\n */\nconst D = 'KeyD';\n\n/**\n * The QWERTY-based keyboard 'E' event code.\n * @type {'KeyE'}\n * @constant\n */\nconst E = 'KeyE';\n\n/**\n * The QWERTY-based keyboard 'F' event code.\n * @type {'KeyF'}\n * @constant\n */\nconst F = 'KeyF';\n\n/**\n * The QWERTY-based keyboard 'G' event code.\n * @type {'KeyG'}\n * @constant\n */\nconst G = 'KeyG';\n\n/**\n * The QWERTY-based keyboard 'H' event code.\n * @type {'KeyH'}\n * @constant\n */\nconst H = 'KeyH';\n\n/**\n * The QWERTY-based keyboard 'I' event code.\n * @type {'KeyI'}\n * @constant\n */\nconst I = 'KeyI';\n\n/**\n * The QWERTY-based keyboard 'J' event code.\n * @type {'KeyJ'}\n * @constant\n */\nconst J = 'KeyJ';\n\n/**\n * The QWERTY-based keyboard 'K' event code.\n * @type {'KeyK'}\n * @constant\n */\nconst K = 'KeyK';\n\n/**\n * The QWERTY-based keyboard 'L' event code.\n * @type {'KeyL'}\n * @constant\n */\nconst L = 'KeyL';\n\n/**\n * The QWERTY-based keyboard 'M' event code.\n * @type {'KeyM'}\n * @constant\n */\nconst M = 'KeyM';\n\n/**\n * The QWERTY-based keyboard 'N' event code.\n * @type {'KeyN'}\n * @constant\n */\nconst N = 'KeyN';\n\n/**\n * The QWERTY-based keyboard 'O' event code.\n * @type {'KeyO'}\n * @constant\n */\nconst O = 'KeyO';\n\n/**\n * The QWERTY-based keyboard 'P' event code.\n * @type {'KeyP'}\n * @constant\n */\nconst P = 'KeyP';\n\n/**\n * The QWERTY-based keyboard 'Q' event code.\n * @type {'KeyQ'}\n * @constant\n */\nconst Q = 'KeyQ';\n\n/**\n * The QWERTY-based keyboard 'R' event code.\n * @type {'KeyR'}\n * @constant\n */\nconst R = 'KeyR';\n\n/**\n * The QWERTY-based keyboard 'S' event code.\n * @type {'KeyS'}\n * @constant\n */\nconst S = 'KeyS';\n\n/**\n * The QWERTY-based keyboard 'T' event code.\n * @type {'KeyT'}\n * @constant\n */\nconst T = 'KeyT';\n\n/**\n * The QWERTY-based keyboard 'U' event code.\n * @type {'KeyU'}\n * @constant\n */\nconst U = 'KeyU';\n\n/**\n * The QWERTY-based keyboard 'V' event code.\n * @type {'KeyV'}\n * @constant\n */\nconst V = 'KeyV';\n\n/**\n * The QWERTY-based keyboard 'W' event code.\n * @type {'KeyW'}\n * @constant\n */\nconst W = 'KeyW';\n\n/**\n * The QWERTY-based keyboard 'X' event code.\n * @type {'KeyX'}\n * @constant\n */\nconst X = 'KeyX';\n\n/**\n * The QWERTY-based keyboard 'Y' event code.\n * @type {'KeyY'}\n * @constant\n */\nconst Y = 'KeyY';\n\n/**\n * The QWERTY-based keyboard 'Z' event code.\n * @type {'KeyZ'}\n * @constant\n */\nconst Z = 'KeyZ';\n\n/**\n * The QWERTY-based keyboard 'SPACE' event code.\n * @type {'Space'}\n * @constant\n */\nconst SPACE = 'Space';\n\nexport {\n\n    DIGIT0,\n    DIGIT1,\n    DIGIT2,\n    DIGIT3,\n    DIGIT4,\n    DIGIT5,\n    DIGIT6,\n    DIGIT7,\n    DIGIT8,\n    DIGIT9,\n\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X,\n    Y,\n    Z,\n\n    SPACE\n};\n","/**\n * The QWERTY-based keyboard 'DELETE' event code.\n * @type {'Delete'}\n * @constant\n */\nconst DELETE = 'Delete';\n\n/**\n * The QWERTY-based keyboard 'ENTER' event code.\n * @type {'Enter'}\n * @constant\n */\nconst ENTER = 'Enter';\n\nexport {\n\n    DELETE,\n    ENTER\n};\n","/**\n * The QWERTY-based keyboard 'F1' event code.\n * @type {'F1'}\n * @constant\n */\nconst F1 = 'F1';\n\n/**\n * The QWERTY-based keyboard 'F2' event code.\n * @type {'F2'}\n * @constant\n */\nconst F2 = 'F2';\n\n/**\n * The QWERTY-based keyboard 'F3' event code.\n * @type {'F3'}\n * @constant\n */\nconst F3 = 'F3';\n\n/**\n * The QWERTY-based keyboard 'F4' event code.\n * @type {'F4'}\n * @constant\n */\nconst F4 = 'F4';\n\n/**\n * The QWERTY-based keyboard 'F5' event code.\n * @type {'F5'}\n * @constant\n */\nconst F5 = 'F5';\n\n/**\n * The QWERTY-based keyboard 'F6' event code.\n * @type {'F6'}\n * @constant\n */\nconst F6 = 'F6';\n\n/**\n * The QWERTY-based keyboard 'F7' event code.\n * @type {'F7'}\n * @constant\n */\nconst F7 = 'F7';\n\n/**\n * The QWERTY-based keyboard 'F8' event code.\n * @type {'F8'}\n * @constant\n */\nconst F8 = 'F8';\n\n/**\n * The QWERTY-based keyboard 'F9' event code.\n * @type {'F9'}\n * @constant\n */\nconst F9 = 'F9';\n\n/**\n * The QWERTY-based keyboard 'F10' event code.\n * @type {'F10'}\n * @constant\n */\nconst F10 = 'F10';\n\n/**\n * The QWERTY-based keyboard 'F11' event code.\n * @type {'F11'}\n * @constant\n */\nconst F11 = 'F11';\n\n/**\n * The QWERTY-based keyboard 'F12' event code.\n * @type {'F12'}\n * @constant\n */\nconst F12 = 'F12';\n\nexport {\n\n    F1,\n    F2,\n    F3,\n    F4,\n    F5,\n    F6,\n    F7,\n    F8,\n    F9,\n    F10,\n    F11,\n    F12\n};\n","/**\n * The QWERTY-based keyboard 'CAPSLOCK' event code.\n * @type {'CapsLock'}\n * @constant\n */\nconst CAPSLOCK = 'CapsLock';\n\nexport {\n\n    CAPSLOCK\n};\n","/**\n * The QWERTY-based keyboard 'ALTLEFT' event code.\n * @type {'AltLeft'}\n * @constant\n */\nconst ALTLEFT = 'AltLeft';\n\n/**\n * The QWERTY-based keyboard 'ALTRIGHT' event code.\n * @type {'AltRight'}\n * @constant\n */\nconst ALTRIGHT = 'AltRight';\n\n/**\n * The QWERTY-based keyboard 'CONTROLLEFT' event code.\n * @type {'ControlLeft'}\n * @constant\n */\nconst CONTROLLEFT = 'ControlLeft';\n\n/**\n * The QWERTY-based keyboard 'CONTROLRIGHT' event code.\n * @type {'ControlRight'}\n * @constant\n */\nconst CONTROLRIGHT = 'ControlRight';\n\n/**\n * The QWERTY-based keyboard 'SHIFTLEFT' event code.\n * @type {'ShiftLeft'}\n * @constant\n */\nconst SHIFTLEFT = 'ShiftLeft';\n\n/**\n * The QWERTY-based keyboard 'SHIFTRIGHT' event code.\n * @type {'ShiftRight'}\n * @constant\n */\nconst SHIFTRIGHT = 'ShiftRight';\n\nexport {\n\n    CONTROLLEFT,\n    CONTROLRIGHT,\n    ALTLEFT,\n    ALTRIGHT,\n    SHIFTLEFT,\n    SHIFTRIGHT\n};\n","/**\n * The QWERTY-based keyboard 'TAB' event code.\n * @type {'Tab'}\n * @constant\n */\nconst TAB = 'Tab';\n\n/**\n * The QWERTY-based keyboard 'UP' event code.\n * @type {'ArrowUp'}\n * @constant\n */\nconst UP = 'ArrowUp';\n\n/**\n * The QWERTY-based keyboard 'LEFT' event code.\n * @type {'ArrowLeft'}\n * @constant\n */\nconst LEFT = 'ArrowLeft';\n\n/**\n * The QWERTY-based keyboard 'RIGHT' event code.\n * @type {'ArrowRight'}\n * @constant\n */\nconst RIGHT = 'ArrowRight';\n\n/**\n * The QWERTY-based keyboard 'DOWN' event code.\n * @type {'ArrowDown'}\n * @constant\n */\nconst DOWN = 'ArrowDown';\n\nexport {\n\n    TAB,\n\n    UP,\n    LEFT,\n    RIGHT,\n    DOWN\n};\n","/**\n * The QWERTY-based keyboard 'ESCAPE' event code.\n * @type {'ContextMenu'}\n * @constant\n */\nconst CONTEXTMENU = 'ContextMenu';\n\n/**\n * The QWERTY-based keyboard 'ESCAPE' event code.\n * @type {'Escape'}\n * @constant\n */\nconst ESCAPE = 'Escape';\n\nexport {\n\n    CONTEXTMENU,\n    ESCAPE\n};\n","/**\n * The value to convert an angle from degrees to radians.\n * @type {number}\n * @constant\n */\nconst RADIANS = Math.PI / 180;\n\nexport {\n\n    RADIANS\n};\n","/**\n * Creates AABBs.\n *\n * @example\n *\n * const aabb = new AABB(new Vector2(-1, -1), new Vector2(1, 1));\n */\nclass AABB {\n\n    /**\n     * Stores the maximum values of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @private\n     */\n    $maximum;\n\n    /**\n     * Stores the minimum values of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @private\n     */\n    $minimum;\n\n    /**\n     * Gets the center of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get center() {\n\n        return this.minimum.clone().add(this.halfSize);\n    }\n\n    /**\n     * Gets the half-size of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get halfSize() {\n\n        return this.size.clone().scale(0.5);\n    }\n\n    /**\n     * Gets the maximum values of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get maximum() {\n\n        return this.$maximum;\n    }\n\n    /**\n     * Gets the minimum values of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get minimum() {\n\n        return this.$minimum;\n    }\n\n    /**\n     * Gets the size of the AABB.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get size() {\n\n        return this.$maximum.clone().subtract(this.$minimum);\n    }\n\n    /**\n     * Creates a new AABB.\n     * @param {import('../index.js').Vector2} $minimum The minimum values of the AABB to create.\n     * @param {import('../index.js').Vector2} $maximum The maximum values of the AABB to create.\n     */\n    constructor($minimum, $maximum) {\n\n        this.$maximum = $maximum;\n        this.$minimum = $minimum;\n    }\n\n    /**\n     * Gets the manhattan distance between two AABBs.\n     * @param {import('../index.js').AABB} $a The first AABB to compare.\n     * @param {import('../index.js').AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceManhattan($a, $b) {\n\n        const distanceX = AABB.distanceX($a, $b);\n        const distanceY = AABB.distanceY($a, $b);\n\n        if (distanceX > 0 || distanceY > 0) {\n\n            return Math.max(distanceX, 0) + Math.max(distanceY, 0);\n        }\n\n        return distanceX + distanceY;\n    }\n\n    /**\n     * Gets the distance between two AABBs on the x-axis.\n     * @param {import('../index.js').AABB} $a The first AABB to compare.\n     * @param {import('../index.js').AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceX($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.x - $a.center.x);\n        const distanceMinimum = $a.halfSize.x + $b.halfSize.x;\n\n        return distanceCenter - distanceMinimum;\n    }\n\n    /**\n     * Gets the distance between two AABBs on the y-axis.\n     * @param {import('../index.js').AABB} $a The first AABB to compare.\n     * @param {import('../index.js').AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceY($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.y - $a.center.y);\n        const distanceMinimum = $a.halfSize.y + $b.halfSize.y;\n\n        return distanceCenter - distanceMinimum;\n    }\n\n    /**\n     * Creates a new AABB from the given AABB.\n     * @param {import('../index.js').AABB} $aabb The given AABB.\n     * @returns {import('../index.js').AABB}\n     * @public\n     * @static\n     */\n    static from($aabb) {\n\n        return $aabb.clone();\n    }\n\n    /**\n     * Gets the delta penetration between two AABBs strictly overlaping with each other on the x-axis (the common area).\n     * @param {import('../index.js').AABB} $a The first AABB to compare.\n     * @param {import('../index.js').AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static overlapX($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.x - $a.center.x);\n        const distanceMinimum = $a.halfSize.x + $b.halfSize.x;\n\n        return distanceMinimum - distanceCenter;\n    }\n\n    /**\n     * Gets the delta penetration between two AABBs strictly overlaping with each other on the y-axis (the common area).\n     * @param {import('../index.js').AABB} $a The first AABB to compare.\n     * @param {import('../index.js').AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static overlapY($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.y - $a.center.y);\n        const distanceMinimum = $a.halfSize.y + $b.halfSize.y;\n\n        return distanceMinimum - distanceCenter;\n    }\n\n    /**\n     * Clones the AABB.\n     * @returns {import('../index.js').AABB}\n     * @public\n     */\n    clone() {\n\n        return new AABB(this.$minimum, this.$maximum);\n    }\n\n    /**\n     * Translates the AABB in the world space from a third person point of view.\n     * @param {import('../index.js').Vector2} $vector The translation to apply.\n     * @returns {this}\n     * @public\n     */\n    translate($vector) {\n\n        this.$maximum = this.$maximum.clone().add($vector);\n        this.$minimum = this.$minimum.clone().add($vector);\n\n        return this;\n    }\n}\n\nexport {\n\n    AABB\n};\n\nexport default AABB;\n","import {UTILS, Sprite, Vector2, Collider} from '../index.js';\n\n/**\n * Abstract actors.\n *\n * @example\n *\n * class ActorExample extends Actor {}\n */\nclass Actor {\n\n    /**\n     * Stores the preloadable assets.\n     * @type {string[]}\n     * @public\n     * @static\n     */\n    static preloadables = [];\n\n    /**\n     * Stores the collider.\n     * @type {import('../index.js').Collider}\n     * @private\n     */\n    $collider;\n\n    /**\n     * Stores the components.\n     * @type {Object.<string, any>}\n     * @private\n     */\n    $components;\n\n    /**\n     * Stores the follower actors.\n     * @type {Set<import('../index.js').Actor>}\n     * @private\n     */\n    $followers;\n\n    /**\n     * Stores the sounds.\n     * @type {import('../index.js').Sound[]}\n     * @private\n     */\n    $sounds;\n\n    /**\n     * Stores the sprite.\n     * @type {import('../index.js').Sprite}\n     * @private\n     */\n    $sprite;\n\n    /**\n     * Stores the current stage.\n     * @type {import('../index.js').Stage}\n     * @private\n     */\n    $stage;\n\n    /**\n     * Stores the position.\n     * @type {import('../index.js').Vector2}\n     * @private\n     */\n    $translation;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Stores the vibrations.\n     * @type {import('../index.js').Vibration[]}\n     * @private\n     */\n    $vibrations;\n\n    /**\n     * Stores the z-index.\n     * @type {number}\n     * @private\n     */\n    $zIndex;\n\n    /**\n     * Gets the collider.\n     * @type {import('../index.js').Collider}\n     * @public\n     */\n    get collider() {\n\n        return this.$collider;\n    }\n\n    /**\n     * Gets the current engine.\n     * @type {import('../index.js').Engine}\n     * @public\n     */\n    get engine() {\n\n        return this.stage.engine;\n    }\n\n    /**\n     * Gets the follower actors.\n     * @type {Actor[]}\n     * @public\n     */\n    get followers() {\n\n        return Array.from(this.$followers);\n    }\n\n    /**\n     * Gets the sounds.\n     * @type {import('../index.js').Sound[]}\n     * @public\n     */\n    get sounds() {\n\n        return this.$sounds;\n    }\n\n    /**\n     * Gets the sprite.\n     * @type {import('../index.js').Sprite}\n     * @public\n     */\n    get sprite() {\n\n        return this.$sprite;\n    }\n\n    /**\n     * Gets the current stage.\n     * @type {import('../index.js').Stage}\n     * @public\n     */\n    get stage() {\n\n        return this.$stage;\n    }\n\n    /**\n     * Gets the position.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get translation() {\n\n        return this.$translation;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Gets the vibrations.\n     * @type {import('../index.js').Vibration[]}\n     * @public\n     */\n    get vibrations() {\n\n        return this.$vibrations;\n    }\n\n    /**\n     * Gets the z-index.\n     * @type {number}\n     * @public\n     */\n    get zIndex() {\n\n        return this.$zIndex;\n    }\n\n    /**\n     * Create a new actor.\n     * @param {import('../index.js').Stage} $stage The stage on which to create the actor.\n     */\n    constructor($stage) {\n\n        this.$stage = $stage;\n\n        this.$components = {};\n        this.$followers = new Set();\n        this.$sounds = [];\n        this.$translation = new Vector2(0, 0);\n        this.$uuid = UTILS.uuid();\n        this.$vibrations = [];\n        this.$zIndex = 0;\n    }\n\n    /**\n     * Adds a follower actor.\n     * @param {import('../index.js').Actor} $actor The follower actor to add.\n     * @returns {this}\n     * @public\n     */\n    addFollower($actor) {\n\n        this.$followers.add($actor);\n\n        return this;\n    }\n\n    /**\n     * Adds the given sound.\n     * @param {import('../index.js').Sound} $sound The sound to add.\n     * @returns {this}\n     * @public\n     */\n    addSound($sound) {\n\n        this.$sounds.push($sound);\n\n        return this;\n    }\n\n    /**\n     * Adds the given vibration.\n     * @param {import('../index.js').Vibration} $vibration The vibration to add.\n     * @returns {this}\n     * @public\n     */\n    addVibration($vibration) {\n\n        this.$vibrations.push($vibration);\n\n        return this;\n    }\n\n    /**\n     * Gets a component.\n     * @param {string} $name The name of the component to get.\n     * @returns {any}\n     * @public\n     */\n    getComponent($name) {\n\n        return this.$components[$name];\n    }\n\n    /**\n     * Checks if the actor has a collider.\n     * @returns {boolean}\n     * @public\n     */\n    hasCollider() {\n\n        return this.$collider instanceof Collider;\n    }\n\n    /**\n     * Checks if the actor has the given component.\n     * @param {string} $name The name of the component to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasComponent($name) {\n\n        return this.$components.hasOwnProperty($name) === true;\n    }\n\n    /**\n     * Checks if the actor has the given follower actor.\n     * @param {import('../index.js').Actor} $actor The actor to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasFollower($actor) {\n\n        return this.$followers.has($actor) === true;\n    }\n\n    /**\n     * Checks if the actor has a sprite.\n     * @returns {boolean}\n     * @public\n     */\n    hasSprite() {\n\n        return this.$sprite instanceof Sprite;\n    }\n\n    /**\n     * Called just after removing the actor.\n     * @public\n     */\n    onAfterRemove() {}\n\n    /**\n     * Called just before removing the actor.\n     * @public\n     */\n    onBeforeRemove() {}\n\n    /**\n     * Called when a collision is being resolved.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').Actor} $parameters.$actor The colliding actor.\n     * @param {boolean} $parameters.$east If the origin of collision is facing the east face.\n     * @param {boolean} $parameters.$north If the origin of collision is facing the north face.\n     * @param {boolean} $parameters.$south If the origin of collision is facing the south face.\n     * @param {boolean} $parameters.$west If the origin of collision is facing the west face.\n     * @public\n     */\n    onCollide({$actor, $east, $north, $south, $west}) {}\n\n    /**\n     * Called when a collision is being entered.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').Actor} $parameters.$actor The colliding actor.\n     * @param {boolean} $parameters.$east If the origin of collision is facing the east face.\n     * @param {boolean} $parameters.$north If the origin of collision is facing the north face.\n     * @param {boolean} $parameters.$south If the origin of collision is facing the south face.\n     * @param {boolean} $parameters.$west If the origin of collision is facing the west face.\n     * @public\n     */\n    onCollideEnter({$actor, $east, $north, $south, $west}) {}\n\n    /**\n     * Called when a collision is being left.\n     * @param {import('../index.js').Actor} $actor The colliding actor.\n     * @public\n     */\n    onCollideLeave($actor) {}\n\n    /**\n     * Called when the actor is being created.\n     * @public\n     */\n    onCreate() {}\n\n    /**\n     * Called when a sound is finishing playing.\n     * @param {import('../index.js').Sound} $sound The sound.\n     * @public\n     */\n    onSoundFinish($sound) {}\n\n    /**\n     * Called when the actor is being updated by one tick update.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    onTick($timetick) {}\n\n    /**\n     * Removes a follower actor.\n     * @param {import('../index.js').Actor} $actor The follower actor to remove.\n     * @returns {this}\n     * @public\n     */\n    removeFollower($actor) {\n\n        this.$followers.delete($actor);\n\n        return this;\n    }\n\n    /**\n     * Removes the given sound.\n     * @param {import('../index.js').Sound} $sound The sound to remove.\n     * @returns {this}\n     * @public\n     */\n    removeSound($sound) {\n\n        UTILS.extract($sound, this.$sounds);\n\n        return this;\n    }\n\n    /**\n     * Removes all sound.\n     * @returns {this}\n     * @public\n     */\n    removeSounds() {\n\n        this.$sounds = [];\n\n        return this;\n    }\n\n    /**\n     * Removes the given vibration.\n     * @param {import('../index.js').Vibration} $vibration The vibration to remove.\n     * @returns {this}\n     * @public\n     */\n    removeVibration($vibration) {\n\n        UTILS.extract($vibration, this.$vibrations);\n\n        return this;\n    }\n\n    /**\n     * Removes all vibration.\n     * @returns {this}\n     * @public\n     */\n    removeVibrations() {\n\n        this.$vibrations = [];\n\n        return this;\n    }\n\n    /**\n     * Sets the collider.\n     * @param {import('../index.js').Collider} $collider The collider to set.\n     * @returns {this}\n     * @public\n     */\n    setCollider($collider) {\n\n        this.$collider = $collider;\n\n        return this;\n    }\n\n    /**\n     * Sets a component.\n     * @param {string} $name The name of the component to set.\n     * @param {any} $component The value of the component to set.\n     * @returns {this}\n     * @public\n     */\n    setComponent($name, $component) {\n\n        this.$components[$name] = $component;\n\n        return this;\n    }\n\n    /**\n     * Sets the sprite.\n     * @param {import('../index.js').Sprite} $sprite The sprite to set.\n     * @returns {this}\n     * @public\n     */\n    setSprite($sprite) {\n\n        this.$sprite = $sprite;\n\n        return this;\n    }\n\n    /**\n     * Sets the z-index.\n     * @param {number} $zIndex The z-index to set.\n     * @returns {this}\n     * @public\n     */\n    setZIndex($zIndex) {\n\n        this.$zIndex = $zIndex;\n\n        return this;\n    }\n\n    /**\n     * Translates the actor in the world space from a third person point of view.\n     * @param {import('../index.js').Vector2} $vector The translation to apply.\n     * @returns {this}\n     * @public\n     */\n    translate($vector) {\n\n        const translation = $vector.clone();\n\n        Array.from(this.$followers).forEach(($follower) => {\n\n            if (this.stage.hasActor($follower) === false) {\n\n                this.$followers.delete($follower);\n\n                return;\n            }\n\n            $follower.translate(translation);\n        });\n\n        this.$translation.add(translation);\n\n        return this;\n    }\n\n    /**\n     * Translates the actor in the world space to the given position.\n     * @param {import('../index.js').Vector2} $vector The position to translate to.\n     * @returns {this}\n     * @public\n     */\n    translateTo($vector) {\n\n        const translation = $vector.clone().subtract(this.$translation);\n\n        Array.from(this.$followers).forEach(($follower) => {\n\n            if (this.stage.hasActor($follower) === false) {\n\n                this.$followers.delete($follower);\n\n                return;\n            }\n\n            $follower.translate(translation);\n        });\n\n        this.$translation.add(translation);\n\n        return this;\n    }\n}\n\nexport {\n\n    Actor\n};\n\nexport default Actor;\n","import {Actor} from '../index.js';\n\n/**\n * Factores an actor with preloadable assets.\n * @param {(string | typeof import('../index.js').Actor)[]} $preloadables The preloadable assets (mix of preloadable assets and/or actors with preloadable assets).\n * @returns {typeof import('../index.js').Actor}\n */\nfunction ActorPreloadable($preloadables = []) {\n\n    /**\n     * @type {Set<string>}\n     */\n    const preloadables = new Set();\n\n    $preloadables.forEach(($preloadable) => {\n\n        if (typeof $preloadable === 'string') {\n\n            if (preloadables.has($preloadable) === true) {\n\n                return;\n            }\n\n            preloadables.add($preloadable);\n\n            return;\n        }\n\n        if (typeof $preloadable === typeof Actor) {\n\n            $preloadable.preloadables.forEach(($preloadable) => {\n\n                if (preloadables.has($preloadable) === true) {\n\n                    return;\n                }\n\n                preloadables.add($preloadable);\n            });\n\n            return;\n        }\n    });\n\n    return class extends Actor {\n\n        /**\n         * @type {typeof import('../index.js').Actor.preloadables}\n         */\n        static preloadables = Array.from(preloadables);\n    };\n}\n\nexport {\n\n    ActorPreloadable\n};\n\nexport default ActorPreloadable;\n","/**\n * Creates colliders.\n *\n * @example\n *\n * const collider = new Collider({$boundaries, $traversable, $type});\n */\nclass Collider {\n\n    /**\n     * @typedef {(import('../index.js').COLLIDERTYPES.DYNAMIC | import('../index.js').COLLIDERTYPES.KINETIC | import('../index.js').COLLIDERTYPES.STATIC)} typecollider A collider type.\n     */\n\n    /**\n     * Stores the boundaries.\n     * @type {import('../index.js').AABB}\n     * @private\n     */\n    $boundaries;\n\n    /**\n     * Stores the traversable status.\n     * @type {boolean}\n     * @private\n     */\n    $traversable;\n\n    /**\n     * Stores the collider type.\n     * @type {typecollider}\n     * @private\n     */\n    $type;\n\n    /**\n     * Gets the boundaries.\n     * @type {import('../index.js').AABB}\n     * @public\n     */\n    get boundaries() {\n\n        return this.$boundaries;\n    }\n\n    /**\n     * Gets the traversable status.\n     * @type {boolean}\n     * @public\n     */\n    get traversable() {\n\n        return this.$traversable;\n    }\n\n    /**\n     * Gets the collider type.\n     * @type {typecollider}\n     * @public\n     */\n    get type() {\n\n        return this.$type;\n    }\n\n    /**\n     * Creates a new collider.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').AABB} $parameters.$boundaries The boundaries of the collider to create.\n     * @param {boolean} [$parameters.$traversable] The traversable status of the collider to create.\n     * @param {typecollider} $parameters.$type The type of the collider to create.\n     */\n    constructor({$boundaries, $traversable = false, $type}) {\n\n        this.$boundaries = $boundaries;\n        this.$traversable = $traversable;\n        this.$type = $type;\n    }\n}\n\nexport {\n\n    Collider\n};\n\nexport default Collider;\n","import {CONTENTTYPES, Loop, Stage, SystemActor, SystemAudio, SystemCollision, SystemInput, SystemRender, SystemVibration, UTILS, Vector2, Vector3} from '../index.js';\n\n/**\n * Creates game engines.\n *\n * @example\n *\n * const engine = new Engine({$color, $container, $resolution});\n * engine.initiate(60);\n *\n * await engine.preloadStage(SceneExample);\n *\n * engine.createStage(SceneExample);\n */\nclass Engine {\n\n    /**\n     * Stores the rendering background color.\n     * @type {import('../index.js').Vector3}\n     * @private\n     */\n    $color;\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the loop.\n     * @type {import('../index.js').Loop}\n     * @private\n     */\n    $loop;\n\n    /**\n     * Stores the next stage.\n     * @type {typeof import('../index.js').Stage}\n     * @private\n     */\n    $next;\n\n    /**\n     * Stores the preloaded status of the assets.\n     * @type {Set<string>}\n     * @private\n     */\n    $preloaded;\n\n    /**\n     * Stores the rendering resolution.\n     * @type {import('../index.js').Vector2}\n     * @private\n     */\n    $resolution;\n\n    /**\n     * Stores the current stage.\n     * @type {import('../index.js').Stage}\n     * @private\n     */\n    $stage;\n\n    /**\n     * Stores the current actor system.\n     * @type {import('../index.js').SystemActor}\n     * @private\n     */\n    $systemActor;\n\n    /**\n     * Stores the current audio system.\n     * @type {import('../index.js').SystemAudio}\n     * @private\n     */\n    $systemAudio;\n\n    /**\n     * Stores the current collision system.\n     * @type {import('../index.js').SystemCollision}\n     * @private\n     */\n    $systemCollision;\n\n    /**\n     * Stores the current input system.\n     * @type {import('../index.js').SystemInput}\n     * @private\n     */\n    $systemInput;\n\n    /**\n     * Stores the current render system.\n     * @type {import('../index.js').SystemRender}\n     * @private\n     */\n    $systemRender;\n\n    /**\n     * Stores the current vibration system.\n     * @type {import('../index.js').SystemVibration}\n     * @private\n     */\n    $systemVibration;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Gets the container.\n     * @type {HTMLElement}\n     * @public\n     */\n    get container() {\n\n        return this.$container;\n    }\n\n    /**\n     * Gets the current stage.\n     * @type {import('../index.js').Stage}\n     * @public\n     */\n    get stage() {\n\n        return this.$stage;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Creates a new game engine.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').Vector3} [$parameters.$color] The rendering background color to use.\n     * @param {HTMLElement} $parameters.$container The container for the game engine to create.\n     * @param {import('../index.js').Vector2} [$parameters.$resolution] The rendering resolution to use.\n     */\n    constructor({$color = new Vector3(0, 0, 0), $container, $resolution = new Vector2(320, 240)}) {\n\n        this.$color = $color;\n        this.$container = $container;\n        this.$resolution = $resolution;\n\n        this.$uuid = UTILS.uuid();\n\n        this.$loop = new Loop(this.tick.bind(this));\n        this.$preloaded = new Set();\n\n        this.$systemActor = new SystemActor();\n        this.$systemAudio = new SystemAudio();\n        this.$systemCollision = new SystemCollision();\n        this.$systemInput = new SystemInput({$container: this.$container});\n        this.$systemRender = new SystemRender({$color: this.$color, $container: this.$container, $resolution: this.$resolution});\n        this.$systemVibration = new SystemVibration();\n    }\n\n    /**\n     * Creates the given stage.\n     * @param {typeof import('../index.js').Stage} $stage The stage to create.\n     * @private\n     */\n    $createStage($stage) {\n\n        this.$stage = new $stage(this);\n        this.$stage.onCreate();\n    }\n\n    /**\n     * Creates the given stage on the next tick update.\n     * @param {typeof import('../index.js').Stage} $stage The stage to create on the next tick update.\n     * @public\n     */\n    createStage($stage) {\n\n        this.$next = $stage;\n    }\n\n    /**\n     * @type {import('../index.js').SystemInput['getInput']}\n     */\n    getInput(...$parameters) {\n\n        return this.$systemInput.getInput(...$parameters);\n    }\n\n    /**\n     * @type {import('../index.js').SystemInput['getInputAnalog']}\n     */\n    getInputAnalog(...$parameters) {\n\n        return this.$systemInput.getInputAnalog(...$parameters);\n    }\n\n    /**\n     * Checks if the engine has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        return this.$preloaded.has($asset) === true;\n    }\n\n    /**\n     * Initiates the engine.\n     * @param {number} [$tickrateMinimum] The minimum acceptable number of ticks per virtual second (in ticks/s).\n     * @public\n     */\n    initiate($tickrateMinimum = 60) {\n\n        this.$loop.initiate($tickrateMinimum);\n\n        this.$systemInput.initiate();\n        this.$systemRender.initiate();\n    }\n\n    /**\n     * Preloads the assets of the given stage.\n     * @param {typeof import('../index.js').Stage} $stage The stage to preload the assets from.\n     * @returns {Promise<(undefined | AudioBuffer | WebGLTexture)[]>}\n     * @public\n     */\n    preloadStage($stage) {\n\n        /**\n         * @type {Promise<undefined | AudioBuffer | WebGLTexture>[]}\n         */\n        const promises = [];\n\n        UTILS.deduplicate($stage.preloadables).forEach(($asset) => {\n\n            if (this.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            this.$preloaded.add($asset);\n\n            if (this.$systemAudio.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            if (this.$systemRender.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            /**\n             * @type {Promise<undefined | AudioBuffer | WebGLTexture>}\n             */\n            const promise = new Promise(($resolve) => {\n\n                fetch($asset)\n                .then(($content) => {\n\n                    const contentType = $content.headers.get('Content-Type');\n\n                    switch(contentType) {\n\n                        case CONTENTTYPES.IMAGEJPEG:\n                        case CONTENTTYPES.IMAGEPNG: {\n\n                            this.$systemRender.loadTexture($content)\n                            .then(($texture) => {\n\n                                $resolve($texture);\n                            });\n\n                            break;\n                        }\n\n                        case CONTENTTYPES.AUDIOMPEG:\n                        case CONTENTTYPES.AUDIOWAVE: {\n\n                            this.$systemAudio.loadAudio($content)\n                            .then(($bufferAudio) => {\n\n                                $resolve($bufferAudio);\n                            });\n\n                            break;\n                        }\n\n                        default: {\n\n                            $resolve(undefined);\n                        }\n                    }\n                });\n            });\n\n            promises.push(promise);\n        });\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * @type {import('../index.js').SystemRender['setColor']}\n     */\n    setColor(...$parameters) {\n\n        return this.$systemRender.setColor(...$parameters);\n    }\n\n    /**\n     * @type {import('../index.js').SystemRender['setResolution']}\n     */\n    setResolution(...$parameters) {\n\n        return this.$systemRender.setResolution(...$parameters);\n    }\n\n    /**\n     * Terminates the engine (immediately) (must be used outside the lifecycle of this engine).\n     * @public\n     */\n    terminate() {\n\n        this.$loop.terminate();\n\n        this.$createStage(Stage);\n        this.tick(0);\n\n        this.$systemInput.terminate();\n        this.$systemRender.terminate();\n        this.$systemAudio.terminate();\n        this.$systemVibration.terminate();\n    }\n\n    /**\n     * Updates each system once.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    tick($timetick) {\n\n        if (typeof this.$next === typeof Stage) {\n\n            const stage = this.$next;\n\n            this.$next = undefined;\n\n            this.$createStage(stage);\n        }\n\n        if (typeof this.$stage === 'undefined') {\n\n            return;\n        }\n\n        this.$systemInput.tick();\n        this.$systemActor.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n        this.$systemCollision.tick(this.$stage);\n        this.$systemRender.tick(this.$stage);\n        this.$systemAudio.tick(this.$stage);\n        this.$systemVibration.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n    }\n}\n\nexport {\n\n    Engine\n};\n\nexport default Engine;\n","/**\n * Creates finite state machines.\n * @template {string} Type The generic type of the names of a state.\n *\n * @example\n *\n * const toggle = new FiniteStateMachine([\n *\n *     {\n *         $state: 'ON',\n *         $transitions: [{\n *\n *             $state: 'OFF',\n *             $condition: ({$timer}) => ($timer >= 1000)\n *         }]\n *     },\n *     {\n *         $state: 'OFF',\n *         $transitions: [{\n *\n *             $state: 'ON',\n *             $condition: ({$timer}) => ($timer >= 1000)\n *         }]\n *     }\n * ]);\n */\nclass FiniteStateMachine {\n\n    /**\n     * @callback typestatehandlerenter A state entering handler.\n     * @param {Object} $parameters The given parameters.\n     * @param {Type} $parameters.$previous The previous state.\n     * @returns {void}\n     */\n\n    /**\n     * @callback typestatehandlerleave A state leaving handler.\n     * @param {Object} $parameters The given parameters.\n     * @param {number} $parameters.$timer The timer of the current state.\n     * @param {Type} $parameters.$next The next state.\n     * @returns {void}\n     */\n\n    /**\n     * @callback typestatetransitioncondition A state transition condition.\n     * @param {Object} $parameters The given parameters.\n     * @param {Type} $parameters.$previous The previous state.\n     * @param {number} $parameters.$timer The timer of the current state.\n     * @returns {boolean}\n     */\n\n    /**\n     * @typedef {Object} typestatetransition A transition to a state.\n     * @property {typestatetransitioncondition} typestatetransition.$condition The condition to transition to given state.\n     * @property {Type} typestatetransition.$state The given state to transition to.\n     */\n\n    /**\n     * @typedef {Object} typestate A state.\n     * @property {Type} typestate.$state The name of the state.\n     * @property {typestatehandlerenter} [typestate.$onEnter] The handler to execute when entering the state.\n     * @property {typestatehandlerleave} [typestate.$onLeave] The handler to execute when leaving the state.\n     * @property {typestatetransition[]} typestate.$transitions The transitions to given states.\n     */\n\n    /**\n     * Stores the initiated status.\n     * @type {boolean}\n     * @private\n     */\n    $initiated;\n\n    /**\n     * Stores the previous state.\n     * @type {typestate}\n     * @private\n     */\n    $previous;\n\n    /**\n     * Stores the current state.\n     * @type {typestate}\n     * @private\n     */\n    $state;\n\n    /**\n     * Stores the states.\n     * @type {Map.<Type, typestate>}\n     * @private\n     */\n    $states;\n\n    /**\n     * Stores the timer of the current state.\n     * @type {number}\n     * @private\n     */\n    $timer;\n\n    /**\n     * Creates a new finite state machine.\n     * @param {typestate[]} $data The representation of the finite state machine.\n     */\n    constructor($data) {\n\n        this.$initiated = false;\n        this.$states = new Map();\n        this.$timer = 0;\n\n        $data.forEach(($state) => {\n\n            this.$states.set($state.$state, $state);\n        });\n    }\n\n    /**\n     * Initiates the finite state machine.\n     * @param {Type} $state The name of the state to initiate.\n     * @public\n     */\n    initiate($state) {\n\n        if (this.$initiated === true) {\n\n            return;\n        }\n\n        this.$previous = this.$state\n        this.$state = this.$states.get($state);\n\n        if (typeof this.$state.$onEnter === 'function') {\n\n            this.$state.$onEnter({$previous: undefined});\n        }\n\n        this.$initiated = true;\n    }\n\n    /**\n     * Updates the finite state machine.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    update($timetick) {\n\n        if (this.$initiated === false) {\n\n            return;\n        }\n\n        this.$timer += $timetick;\n\n        for (let $transition of this.$state.$transitions) {\n\n            let previous;\n\n            if (typeof this.$previous !== 'undefined') {\n\n                previous = this.$previous.$state;\n            }\n\n            const current = this.$state.$state;\n            const next = $transition.$state;\n\n            if ($transition.$condition({$previous: previous, $timer: this.$timer}) === true) {\n\n                if (typeof this.$state.$onLeave === 'function') {\n\n                    this.$state.$onLeave({$timer: this.$timer, $next: next});\n                }\n\n                this.$timer = 0;\n\n                this.$previous = this.$state;\n                this.$state = this.$states.get(next);\n\n                if (typeof this.$state.$onEnter === 'function') {\n\n                    this.$state.$onEnter({$previous: current});\n                }\n\n                break;\n            }\n        }\n    }\n}\n\nexport {\n\n    FiniteStateMachine\n};\n\nexport default FiniteStateMachine;\n","/**\n * Creates update loops.\n *\n * @example\n *\n * const loop = new Loop(handler);\n * loop.initiate();\n */\nclass Loop {\n\n    /**\n     * Stores the handler to execute with the update loop.\n     * @type {Function}\n     * @private\n     */\n    $handler;\n\n    /**\n     * Stores the identifier of the last requestAnimationFrame call.\n     * @type {number}\n     * @private\n     */\n    $identifier;\n\n    /**\n     * Stores the time value of the previous tick call.\n     * @type {number}\n     * @private\n     */\n    $timePrevious;\n\n    /**\n     * Stores the global scope used.\n     * @type {typeof globalThis}\n     * @private\n     */\n    $scope;\n\n    /**\n     * Creates a new update loop.\n     * @param {Function} $handler The handler to execute with the update loop.\n     * @param {typeof globalThis} $scope The global scope to use.\n     */\n    constructor($handler, $scope = window) {\n\n        this.$handler = $handler;\n        this.$scope = $scope;\n    }\n\n    /**\n     * Loops the update loop.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    $loop($timetick) {\n\n        const timeCurrent = performance.now();\n\n        if (typeof this.$timePrevious !== 'undefined') {\n\n            const timetickCurrent = timeCurrent - this.$timePrevious;\n            const timetickMinimum = $timetick;\n            const timetickSafe = Math.min(timetickMinimum, timetickCurrent);\n\n            this.$handler(timetickSafe);\n        }\n\n        this.$identifier = this.$scope.requestAnimationFrame(this.$loop.bind(this, $timetick));\n\n        this.$timePrevious = timeCurrent;\n    }\n\n    /**\n     * Initiates the update loop.\n     * @param {number} [$tickrateMinimum] The minimum acceptable number of ticks per virtual second (in ticks/s).\n     * @public\n     */\n    initiate($tickrateMinimum = 60) {\n\n        this.$loop(1000 / $tickrateMinimum);\n    }\n\n    /**\n     * Terminates the update loop.\n     * @public\n     */\n    terminate() {\n\n        if (typeof this.$identifier !== 'undefined') {\n\n            this.$scope.cancelAnimationFrame(this.$identifier);\n\n            this.$timePrevious = undefined;\n        }\n    }\n}\n\nexport {\n\n    Loop\n};\n\nexport default Loop;\n","/**\n * Creates quaternions.\n *\n * @example\n *\n * const quaternion = new Quaternion(0, 0, 0, 1);\n */\nclass Quaternion {\n\n    /**\n     * Stores the w component.\n     * @type {number}\n     * @private\n     */\n    $w;\n\n    /**\n     * Stores the x component.\n     * @type {number}\n     * @private\n     */\n    $x;\n\n    /**\n     * Stores the y component.\n     * @type {number}\n     * @private\n     */\n    $y;\n\n    /**\n     * Stores the z component.\n     * @type {number}\n     * @private\n     */\n    $z;\n\n    /**\n     * Gets the w component.\n     * @type {number}\n     * @public\n     */\n    get w() {\n\n        return this.$w;\n    }\n\n    /**\n     * Gets the x component.\n     * @type {number}\n     * @public\n     */\n    get x() {\n\n        return this.$x;\n    }\n\n    /**\n     * Gets the y component.\n     * @type {number}\n     * @public\n     */\n    get y() {\n\n        return this.$y;\n    }\n\n    /**\n     * Gets the z component.\n     * @type {number}\n     * @public\n     */\n    get z() {\n\n        return this.$z;\n    }\n\n    /**\n     * Creates a new quaternion.\n     * @param {number} $x The x component of the quaternion to create.\n     * @param {number} $y The y component of the quaternion to create.\n     * @param {number} $z The z component of the quaternion to create.\n     * @param {number} $w The w component of the quaternion to create.\n     */\n    constructor($x, $y, $z, $w) {\n\n        this.$w = $w;\n        this.$x = $x;\n        this.$y = $y;\n        this.$z = $z;\n    }\n}\n\nexport {\n\n    Quaternion\n};\n\nexport default Quaternion;\n","/**\n * Static default shader sources.\n *\n * @example\n *\n * const sourceFragment = Shader.sourceFragment;\n * const sourceVertex = Shader.sourceVertex;\n */\nclass Shader {\n\n    /**\n     * @typedef {('vec2' | 'vec3')} typetypeattribute A type of attribute.\n     */\n\n    /**\n     * @typedef {('bool' | 'bool[]' | 'float' | 'float[]' | 'int' | 'int[]' | 'mat4' | 'mat4[]' | 'sampler2D' | 'vec2' | 'vec2[]' | 'vec3' | 'vec3[]')} typetypeuniform A type of uniform.\n     */\n\n    /**\n     * Stores the attributes needed by the shader program.\n     * @type {Object.<string, typetypeattribute>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static attributes = {\n\n        'attributePosition': 'vec2',\n        'attributeUvmapping': 'vec2'\n    };\n\n    /**\n     * Stores the fragment shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourceFragment = (\n\n        'precision highp float;' +\n\n        'uniform sampler2D uniformTextureColor;' +\n        'uniform sampler2D uniformTextureOpacity;' +\n        'uniform vec2 uniformTranslationPointOfView;' +\n\n        'varying vec2 varyingUvmapping;' +\n\n        'void main(void) {' +\n\n            'vec4 colorTextureColor = texture2D(uniformTextureColor, varyingUvmapping);' +\n            'vec4 colorTextureOpacity = texture2D(uniformTextureOpacity, varyingUvmapping);' +\n\n            'float alpha = colorTextureColor.a * colorTextureOpacity.r;' +\n\n            'gl_FragColor = vec4(colorTextureColor.rgb, alpha);' +\n        '}'\n    );\n\n    /**\n     * Stores the vertex shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourceVertex = (\n\n        'attribute vec2 attributePosition;' +\n        'attribute vec2 attributeUvmapping;' +\n\n        'uniform vec2 uniformAspect;' +\n        'uniform vec2 uniformSize;' +\n        'uniform vec2 uniformTranslation;' +\n        'uniform vec2 uniformTranslationPointOfView;' +\n\n        'varying vec2 varyingUvmapping;' +\n\n        'void main(void) {' +\n\n            'varyingUvmapping = attributeUvmapping;' +\n\n            'vec2 position = (attributePosition * uniformSize + uniformTranslation);' +\n            'vec2 projection = 2.0 * (position - uniformTranslationPointOfView) / uniformAspect;' +\n\n            'gl_Position = vec4(projection, 0.0, 1.0);' +\n        '}'\n    );\n\n    /**\n     * Stores the uniforms needed by the shader program.\n     * @type {Object.<string, typetypeuniform>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static uniforms = {\n\n        'uniformAspect': 'vec2',\n        'uniformSize': 'vec2',\n        'uniformTextureColor': 'sampler2D',\n        'uniformTextureOpacity': 'sampler2D',\n        'uniformTranslation': 'vec2',\n        'uniformTranslationPointOfView': 'vec2'\n    };\n}\n\nexport {\n\n    Shader\n};\n\nexport default Shader;\n","/**\n * Creates sounds.\n *\n * @example\n *\n * // minimal\n * const sound = new Sound({\n *\n *     $audio: audio\n * });\n *\n * @example\n *\n * // full\n * const sound = new Sound({\n *\n *     $audio: audio,\n *     $durationFadeOut: 125,\n *     $loop: false,\n *     $volume: 1\n * });\n */\nclass Sound {\n\n    /**\n     * Stores the audio source.\n     * @type {string}\n     * @private\n     */\n    $audio;\n\n    /**\n     * Stores fade out duration.\n     * @type {number}\n     * @private\n     */\n    $durationFadeOut;\n\n    /**\n     * Stores the loop status.\n     * @type {boolean}\n     * @private\n     */\n    $loop;\n\n    /**\n     * Stores the volume.\n     * @type {number}\n     * @private\n     */\n    $volume;\n\n    /**\n     * Gets the audio source.\n     * @type {string}\n     * @public\n     */\n    get audio() {\n\n        return this.$audio;\n    }\n\n    /**\n     * Gets fade out duration (in ms) (must be positive).\n     * @type {number}\n     * @public\n     */\n    get durationFadeOut() {\n\n        return this.$durationFadeOut;\n    }\n\n    /**\n     * Gets the loop status.\n     * @type {boolean}\n     * @public\n     */\n    get loop() {\n\n        return this.$loop;\n    }\n\n    /**\n     * Gets the volume.\n     * @type {number}\n     * @public\n     */\n    get volume() {\n\n        return this.$volume;\n    }\n\n    /**\n     * Creates a new sound.\n     * @param {Object} $parameters The given parameters.\n     * @param {string} $parameters.$audio The audio source.\n     * @param {number} [$parameters.$durationFadeOut] The fade out duration (in ms) (must be positive).\n     * @param {boolean} [$parameters.$loop] The loop status.\n     * @param {number} [$parameters.$volume] The volume.\n     */\n    constructor({$audio, $durationFadeOut = 1000 / 60, $loop = false, $volume = 1}) {\n\n        this.$audio = $audio;\n        this.$durationFadeOut = $durationFadeOut;\n        this.$loop = $loop;\n        this.$volume = $volume;\n    }\n}\n\nexport {\n\n    Sound\n};\n\nexport default Sound;\n","import {AABB, Vector2} from '../index.js';\n\n/**\n * Creates sprites.\n *\n * @example\n *\n * // minimal\n * const sprite = new Sprite({\n *\n *     $sizeTarget: new Vector2(32, 32),\n *     $textureColor: textureColor\n * });\n *\n * @example\n *\n * // full\n * const sprite = new Sprite({\n *\n *     $frameSource: new AABB(new Vector2(0, 0), new Vector2(1, 1)),\n *     $sizeTarget: new Vector2(32, 32),\n *     $textureColor: textureColor,\n *     $textureOpacity: textureOpacity\n * });\n */\nclass Sprite {\n\n    /**\n     * Stores the frame to use from the texture sources (with values in [0, 1] ranges).\n     * @type {import('../index.js').AABB}\n     * @private\n     */\n    $frameSource;\n\n    /**\n     * Stores the serialized value of frame to use from the texture sources (with values in [0, 1] ranges).\n     * @type {string}\n     * @private\n     */\n    $frameSourceSerialized;\n\n    /**\n     * Stores the target size.\n     * @type {import('../index.js').Vector2}\n     * @private\n     */\n    $sizeTarget;\n\n    /**\n     * Stores the color texture source.\n     * @type {string}\n     * @private\n     */\n    $textureColor;\n\n    /**\n     * Stores the opacity texture source.\n     * @type {string}\n     * @private\n     */\n    $textureOpacity;\n\n    /**\n     * Gets the frame to use from the texture sources.\n     * @type {import('../index.js').AABB}\n     * @public\n     */\n    get frameSource() {\n\n        return this.$frameSource;\n    }\n\n    /**\n     * Gets the serialized value of the frame to use from the texture sources.\n     * @type {string}\n     * @public\n     */\n    get frameSourceSerialized() {\n\n        return this.$frameSourceSerialized;\n    }\n\n    /**\n     * Gets the target size.\n     * @type {import('../index.js').Vector2}\n     * @public\n     */\n    get sizeTarget() {\n\n        return this.$sizeTarget;\n    }\n\n    /**\n     * Gets the color texture source.\n     * @type {string}\n     * @public\n     */\n    get textureColor() {\n\n        return this.$textureColor;\n    }\n\n    /**\n     * Gets the opacity texture source.\n     * @type {string}\n     * @public\n     */\n    get textureOpacity() {\n\n        return this.$textureOpacity;\n    }\n\n    /**\n     * Creates a new sprite.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').AABB} [$parameters.$frameSource] The frame to use from the texture sources (with values in [0, 1] ranges) (if not specified then the full texture is used).\n     * @param {import('../index.js').Vector2} $parameters.$sizeTarget The target size.\n     * @param {string} $parameters.$textureColor The color texture source.\n     * @param {string} [$parameters.$textureOpacity] The opacity texture source.\n     */\n    constructor({$frameSource = new AABB(new Vector2(0, 0), new Vector2(1, 1)), $sizeTarget, $textureColor, $textureOpacity}) {\n\n        this.$frameSource = $frameSource;\n        this.$sizeTarget = $sizeTarget;\n        this.$textureColor = $textureColor;\n        this.$textureOpacity = $textureOpacity;\n\n        this.$frameSourceSerialized = JSON.stringify([\n\n            [$frameSource.minimum.x, $frameSource.minimum.y],\n            [$frameSource.maximum.x, $frameSource.maximum.y]\n        ]);\n    }\n}\n\nexport {\n\n    Sprite\n};\n\nexport default Sprite;\n","import {Actor, UTILS} from '../index.js';\n\n/**\n * Abstract stages.\n *\n * @example\n *\n * class StageExample extends Stage {}\n */\nclass Stage {\n\n    /**\n     * Stores the preloadable assets.\n     * @type {string[]}\n     * @public\n     * @static\n     */\n    static preloadables = [];\n\n    /**\n     * Stores the current actors.\n     * @type {import('../index.js').Actor[]}\n     * @private\n     */\n    $actors;\n\n    /**\n     * Stores the current engine.\n     * @type {import('../index.js').Engine}\n     * @private\n     */\n    $engine;\n\n    /**\n     * Stores the point of view.\n     * @type {import('../index.js').Actor}\n     * @private\n     */\n    $pointOfView;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Gets the current actors.\n     * @type {import('../index.js').Actor[]}\n     * @public\n     */\n    get actors() {\n\n        return this.$actors;\n    }\n\n    /**\n     * Gets the current engine.\n     * @type {import('../index.js').Engine}\n     * @public\n     */\n    get engine() {\n\n        return this.$engine;\n    }\n\n    /**\n     * Gets the point of view.\n     * @type {import('../index.js').Actor}\n     * @public\n     */\n    get pointOfView() {\n\n        return this.$pointOfView;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Creates a new stage.\n     * @param {import('../index.js').Engine} $engine The engine on which to create the stage.\n     */\n    constructor($engine) {\n\n        this.$engine = $engine;\n\n        this.$actors = [];\n        this.$pointOfView = this.createActor(Actor);\n        this.$uuid = UTILS.uuid();\n    }\n\n    /**\n     * Creates the given actor.\n     * @param {typeof import('../index.js').Actor} [$actor] The actor to create.\n     * @public\n     */\n    createActor($actor = Actor) {\n\n        const actor = new $actor(this);\n\n        this.$actors.push(actor);\n\n        actor.onCreate();\n\n        return actor;\n    }\n\n    /**\n     * Checks if the stage has the given actor.\n     * @param {import('../index.js').Actor} $actor The actor to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasActor($actor) {\n\n        return this.$actors.indexOf($actor) !== -1;\n    }\n\n    /**\n     * Called when the stage is being created.\n     * @public\n     */\n    onCreate() {}\n\n    /**\n     * Removes the given actor.\n     * @param {import('../index.js').Actor} $actor The actor to remove.\n     * @public\n     */\n    removeActor($actor) {\n\n        const index = this.$actors.indexOf($actor);\n\n        if (index === -1) {\n\n            return;\n        }\n\n        $actor.onBeforeRemove();\n\n        this.$actors.splice(index, 1);\n\n        $actor.onAfterRemove();\n    }\n\n    /**\n     * Removes all actors.\n     * @public\n     */\n    removeActors() {\n\n        while (this.$actors.length > 0) {\n\n            this.removeActor(this.$actors[0]);\n        }\n    }\n\n    /**\n     * Sets the given actor as the point of view.\n     * @param {import('../index.js').Actor} $actor The actor to set as the point of view.\n     * @public\n     */\n    setPointOfView($actor) {\n\n        this.$pointOfView = $actor;\n    }\n}\n\nexport {\n\n    Stage\n};\n\nexport default Stage;\n","import {Actor, Stage} from '../index.js';\n\n/**\n * Factores a stage with preloadable assets.\n * @param {(string | typeof import('../index.js').Actor)[]} $preloadables The preloadable assets (mix of preloadable assets and/or actors with preloadable assets).\n * @returns {typeof import('../index.js').Stage}\n */\nfunction StagePreloadable($preloadables = []) {\n\n    /**\n     * @type {Set<string>}\n     */\n    const preloadables = new Set();\n\n    $preloadables.forEach(($preloadable) => {\n\n        if (typeof $preloadable === 'string') {\n\n            if (preloadables.has($preloadable) === true) {\n\n                return;\n            }\n\n            preloadables.add($preloadable);\n\n            return;\n        }\n\n        if (typeof $preloadable === typeof Actor) {\n\n            $preloadable.preloadables.forEach(($preloadable) => {\n\n                if (preloadables.has($preloadable) === true) {\n\n                    return;\n                }\n\n                preloadables.add($preloadable);\n            });\n\n            return;\n        }\n    });\n\n    return class extends Stage {\n\n        /**\n         * @type {typeof import('../index.js').Stage.preloadables}\n         */\n        static preloadables = Array.from(preloadables);\n    };\n}\n\nexport {\n\n    StagePreloadable\n};\n\nexport default StagePreloadable;\n","/**\n * Creates state managers.\n * @template {any} Type The generic type of the data state.\n *\n * @example\n *\n * const state = new State(data);\n */\nclass State {\n\n    /**\n     * @callback typewatcherstate A state changing handler.\n     * @param {Type} $state The new data state.\n     * @returns {void}\n     */\n\n    /**\n     * Stores the data state.\n     * @type {Type}\n     * @private\n     */\n    $data;\n\n    /**\n     * Stores the state changing handlers.\n     * @type {typewatcherstate[]}\n     * @private\n     */\n    $watchers;\n\n    /**\n     * Creates a new state manager.\n     * @param {Type} $data The data state to store.\n     */\n    constructor($data) {\n\n        this.$data = $data;\n        this.$watchers = [];\n    }\n\n    /**\n     * Gets the data state.\n     * @returns {Type}\n     * @public\n     */\n    getState() {\n\n        return this.$data;\n    }\n\n    /**\n     * Sets the data state.\n     * @param {Type} $data The data state to set.\n     * @public\n     */\n    setState($data) {\n\n        this.$data = $data;\n\n        this.$watchers.forEach(($handler) => {\n\n            $handler(this.$data);\n        });\n    }\n\n    /**\n     * Removes all watchers of the data state changes.\n     * @public\n     */\n    unwatchAll() {\n\n        this.$watchers = [];\n    }\n\n    /**\n     * Removes a watcher of the data state changes.\n     * @param {typewatcherstate} $handler The state changing handler to detach.\n     * @public\n     */\n    unwatchState($handler) {\n\n        while (this.$watchers.indexOf($handler) !== -1) {\n\n            this.$watchers.splice(this.$watchers.indexOf($handler), 1);\n        }\n    }\n\n    /**\n     * Adds a watcher for the data state changes.\n     * @param {typewatcherstate} $handler The state changing handler to attach.\n     * @public\n     */\n    watchState($handler) {\n\n        this.$watchers.push($handler);\n    }\n}\n\nexport {\n\n    State\n};\n\nexport default State;\n","/**\n * Gets the stored data with the given name.\n * @param {string} $name The name of the stored data to get.\n * @returns {any}\n */\nfunction get($name) {\n\n    const value = window.localStorage.getItem($name);\n\n    if (value === null) {\n\n        return undefined;\n    }\n\n    return JSON.parse(value);\n}\n\n/**\n * Checks if the storage has data stored with the given name.\n * @param {string} $name The name of the stored data to check.\n * @returns {boolean}\n */\nfunction has($name) {\n\n    const value = window.localStorage.getItem($name);\n\n    if (value === null) {\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Removes the stored data with the given name.\n * @param {string} $name The name of the stored data to remove.\n */\nfunction remove($name) {\n\n    window.localStorage.removeItem($name);\n}\n\n/**\n * Sets the data to store with the given name.\n * @param {string} $name The name of the data to store.\n * @param {any} $value The value of the data to store.\n */\nfunction set($name, $value) {\n\n    const value = JSON.stringify($value);\n\n    if (typeof value === 'undefined') {\n\n        return;\n    }\n\n    window.localStorage.setItem($name, value);\n}\n\nexport {\n\n    get,\n    has,\n    remove,\n    set\n};\n","/**\n * Creates timelines.\n *\n * @example\n *\n * const timeline = new Timeline(keyframes);\n * timeline.seekTimecode(0);\n * timeline.tick(timetick);\n */\nclass Timeline {\n\n    /**\n     * Stores the keyframes.\n     * @type {import('../index.js').TimelineKeyframe[]}\n     * @private\n     */\n    $keyframes;\n\n    /**\n     * Stores the timecode.\n     * @type {number}\n     * @private\n     */\n    $timecode;\n\n    /**\n     * Gets the timecode.\n     * @type {number}\n     * @public\n     */\n    get timecode() {\n\n        return this.$timecode;\n    }\n\n    /**\n     * Creates a new timeline.\n     * @param {import('../index.js').TimelineKeyframe[]} [$keyframes] The keyframes.\n     */\n    constructor($keyframes = []) {\n\n        this.$keyframes = [...$keyframes].sort(($a, $b) => ($a.timecode - $b.timecode));\n\n        this.$timecode = 0;\n    }\n\n    /**\n     * Seeks to the given name.\n     * @param {string} $name The name of the keyframe to seek to.\n     * @returns {this}\n     * @public\n     */\n    seekName($name) {\n\n        const result = this.$keyframes.find(($keyframe) => ($keyframe.name === $name));\n\n        if (typeof result !== 'undefined') {\n\n            this.seekTimecode(result.timecode);\n        }\n\n        return this;\n    }\n\n    /**\n     * Seeks to the given timecode.\n     * @param {number} $timecode The timecode to seek to (in ms).\n     * @returns {this}\n     * @public\n     */\n    seekTimecode($timecode) {\n\n        this.$timecode = $timecode;\n\n        this.$keyframes.forEach(($keyframe) => {\n\n            if ($keyframe.timecode !== this.$timecode) {\n\n                return;\n            }\n\n            $keyframe.onEnter(this);\n        });\n\n        return this;\n    }\n\n    /**\n     * Updates the timeline by one tick update.\n     * @param {number} $timetick The tick duration (in ms).\n     * @returns {this}\n     * @public\n     */\n    tick($timetick) {\n\n        if ($timetick === 0) {\n\n            return this;\n        }\n\n        const previous = this.$timecode;\n\n        this.$timecode += $timetick;\n\n        const current = this.$timecode;\n\n        this.$keyframes.forEach(($keyframe) => {\n\n            if ($keyframe.timecode <= previous) {\n\n                return;\n            }\n\n            if ($keyframe.timecode > current) {\n\n                return;\n            }\n\n            $keyframe.onEnter(this);\n        });\n\n        return this;\n    }\n}\n\nexport {\n\n    Timeline\n};\n\nexport default Timeline;\n","/**\n * Creates timeline keyframes.\n *\n * @example\n *\n * // minimal\n * const keyframe = new TimelineKeyframe({$onEnter, $timecode});\n *\n * @example\n *\n * // full\n * const keyframe = new TimelineKeyframe({$name, $onEnter, $timecode});\n */\nclass TimelineKeyframe {\n\n    /**\n     * @callback typehandlerenter A handler to execute when entering a keyframe.\n     * @param {import('../index.js').Timeline} $timeline The reference timeline.\n     * @returns {void}\n     */\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Stores the keyframe entering handler.\n     * @type {typehandlerenter}\n     * @private\n     */\n    $onEnter;\n\n    /**\n     * Stores the timecode.\n     * @type {number}\n     * @private\n     */\n    $timecode;\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Gets the keyframe entering handler.\n     * @type {typehandlerenter}\n     * @public\n     */\n    get onEnter() {\n\n        return this.$onEnter;\n    }\n\n    /**\n     * Gets the timecode.\n     * @type {number}\n     * @public\n     */\n    get timecode() {\n\n        return this.$timecode;\n    }\n\n    /**\n     * Creates a new timeline keyframe.\n     * @param {Object} $parameters The given parameters.\n     * @param {string} [$parameters.$name] The name.\n     * @param {typehandlerenter} $parameters.$onEnter The keyframe entering handler.\n     * @param {number} $parameters.$timecode The timecode.\n     */\n    constructor({$name, $onEnter, $timecode}) {\n\n        this.$name = $name;\n        this.$onEnter = $onEnter;\n        this.$timecode = $timecode;\n    }\n}\n\nexport {\n\n    TimelineKeyframe\n};\n\nexport default TimelineKeyframe;\n","/**\n * Deduplicates the items of the given array (a new array is created).\n * @template T\n * @param {T[]} $array The array.\n * @returns {T[]}\n */\nfunction deduplicate($array) {\n\n    return Array.from(new Set($array));\n}\n\n/**\n * Extracts the given item from the given array.\n * @template T\n * @param {T} $item The item to remove.\n * @param {T[]} $array The array.\n * @returns {T[]}\n */\nfunction extract($item, $array) {\n\n    const index = $array.indexOf($item);\n\n    if (index === -1) {\n\n        return [];\n    }\n\n    return $array.splice(index, 1);\n}\n\n/**\n * Resolves when the browser is ready to perform an animation frame request.\n * @returns Promise<void>\n */\nfunction frame() {\n\n    /**\n     * @type {Promise<number>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        window.requestAnimationFrame($resolve);\n    });\n\n    return promise;\n}\n\n/**\n * Resolves when the user has interacted at least once since page load.\n * @returns {Promise<void>}\n */\nfunction ready() {\n\n    /**\n     * @type {Promise<void>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        /**\n         * @type {number}\n         */\n        let id;\n\n        const check = () => {\n\n            if (navigator.userActivation.hasBeenActive === false) {\n\n                id = window.requestAnimationFrame(check);\n\n                return;\n            }\n\n            window.cancelAnimationFrame(id);\n\n            $resolve();\n        };\n\n        id = window.requestAnimationFrame(check);\n    });\n\n    return promise;\n}\n\n/**\n * Resolves when the given delay has passed.\n * @param {number} $delay The delay (in ms).\n * @returns Promise<void>\n */\nfunction sleep($delay) {\n\n    /**\n     * @type {Promise<void>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        window.setTimeout($resolve, $delay);\n    });\n\n    return promise;\n}\n\n/**\n * Gets a new UUID.\n * @returns {string}\n */\nfunction uuid() {\n\n    return window.crypto.randomUUID();\n}\n\nexport {\n\n    deduplicate,\n    extract,\n    frame,\n    ready,\n    sleep,\n    uuid\n};\n","import {MATHEMATICS} from '../index.js';\n\n/**\n * Creates two-dimensional vectors.\n *\n * @example\n *\n * // without chaining\n * const vector = new Vector2(3, 2);\n * vector.add(new Vector2(1, 0));\n *\n * @example\n *\n * // with chaining\n * const vector = new Vector2(3, 2).add(new Vector2(1, 0));\n */\nclass Vector2 {\n\n    /**\n     * Stores the x component.\n     * @type {number}\n     * @private\n     */\n    $x;\n\n    /**\n     * Stores the y component.\n     * @type {number}\n     * @private\n     */\n    $y;\n\n    /**\n     * Gets the x component.\n     * @type {number}\n     * @public\n     */\n    get x() {\n\n        return this.$x;\n    }\n\n    /**\n     * Gets the y component.\n     * @type {number}\n     * @public\n     */\n    get y() {\n\n        return this.$y;\n    }\n\n    /**\n     * Creates a new two-dimensional vector.\n     * @param {number} $x The x component of the vector to create.\n     * @param {number} $y The y component of the vector to create.\n     */\n    constructor($x, $y) {\n\n        this.$x = $x;\n        this.$y = $y;\n    }\n\n    /**\n     * Creates a new vector from the given vector.\n     * @param {import('../index.js').Vector2} $vector The given vector.\n     * @returns {import('../index.js').Vector2}\n     * @public\n     * @static\n     */\n    static from($vector) {\n\n        return $vector.clone();\n    }\n\n    /**\n     * Adds the given vector.\n     * @param {import('../index.js').Vector2} $vector The vector to add.\n     * @returns {this}\n     * @public\n     */\n    add($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x + $vector.x;\n        this.$y = y + $vector.y;\n\n        return this;\n    }\n\n    /**\n     * Clones the vector.\n     * @returns {import('../index.js').Vector2}\n     * @public\n     */\n    clone() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        return new Vector2(x, y);\n    }\n\n    /**\n     * Checks the equality with the given vector.\n     * @param {import('../index.js').Vector2} $vector The vector to check with.\n     * @returns {boolean}\n     * @public\n     */\n    equal($vector) {\n\n        return this.$x === $vector.x\n        && this.$y === $vector.y;\n    }\n\n    /**\n     * Gets the length of the vector.\n     * @returns {number}\n     * @public\n     */\n    length() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    /**\n     * Multiplies with the given vector.\n     * @param {import('../index.js').Vector2} $vector The vector to multiply with.\n     * @returns {this}\n     * @public\n     */\n    multiply($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x * $vector.x;\n        this.$y = y * $vector.y;\n\n        return this;\n    }\n\n    /**\n     * Negates the vector.\n     * @returns {this}\n     * @public\n     */\n    negate() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = - x;\n        this.$y = - y;\n\n        return this;\n    }\n\n    /**\n     * Normalizes the vector.\n     * @returns {this}\n     * @public\n     */\n    normalize() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        let length = x * x + y * y;\n\n        if (length > 0) {\n\n            length = 1 / Math.sqrt(length);\n        }\n\n        this.$x = x * length;\n        this.$y = y * length;\n\n        return this;\n    }\n\n    /**\n     * Rotates the vector by the given angle.\n     * @param {number} $angle The angle of rotation to apply (in degrees) (clockwise).\n     * @returns {this}\n     * @public\n     */\n    rotate($angle) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        const radians = $angle * MATHEMATICS.RADIANS;\n\n        const cosine = Math.cos(radians);\n        const sine = Math.sin(radians);\n\n        this.$x = x * cosine - y * sine;\n        this.$y = x * sine + y * cosine;\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by the given scalar factor.\n     * @param {number} $factor The scalar factor to multiply with.\n     * @returns {this}\n     * @public\n     */\n    scale($factor) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x * $factor;\n        this.$y = y * $factor;\n\n        return this;\n    }\n\n    /**\n     * Subtracts the given vector.\n     * @param {import('../index.js').Vector2} $vector The vector to subtract.\n     * @returns {this}\n     * @public\n     */\n    subtract($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x - $vector.x;\n        this.$y = y - $vector.y;\n\n        return this;\n    }\n}\n\nexport {\n\n    Vector2\n};\n\nexport default Vector2;\n","/**\n * Creates three-dimensional vectors.\n *\n * @example\n *\n * // without chaining\n * const vector = new Vector3(3, 2, 1);\n * vector.add(new Vector3(1, 0, -1));\n *\n * @example\n *\n * // with chaining\n * const vector = new Vector3(3, 2, 1).add(new Vector3(1, 0, -1));\n */\nclass Vector3 {\n\n    /**\n     * Stores the x component.\n     * @type {number}\n     * @private\n     */\n    $x;\n\n    /**\n     * Stores the y component.\n     * @type {number}\n     * @private\n     */\n    $y;\n\n    /**\n     * Stores the z component.\n     * @type {number}\n     * @private\n     */\n    $z;\n\n    /**\n     * Gets the x component.\n     * @type {number}\n     * @public\n     */\n    get x() {\n\n        return this.$x;\n    }\n\n    /**\n     * Gets the y component.\n     * @type {number}\n     * @public\n     */\n    get y() {\n\n        return this.$y;\n    }\n\n    /**\n     * Gets the z component.\n     * @type {number}\n     * @public\n     */\n    get z() {\n\n        return this.$z;\n    }\n\n    /**\n     * Creates a new three-dimensional vector.\n     * @param {number} $x The x component of the vector to create.\n     * @param {number} $y The y component of the vector to create.\n     * @param {number} $z The z component of the vector to create.\n     */\n    constructor($x, $y, $z) {\n\n        this.$x = $x;\n        this.$y = $y;\n        this.$z = $z;\n    }\n\n    /**\n     * Creates a new vector from the given vector.\n     * @param {import('../index.js').Vector3} $vector The given vector.\n     * @returns {import('../index.js').Vector3}\n     * @public\n     * @static\n     */\n    static from($vector) {\n\n        return $vector.clone();\n    }\n\n    /**\n     * Adds the given vector.\n     * @param {import('../index.js').Vector3} $vector The vector to add.\n     * @returns {this}\n     * @public\n     */\n    add($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x + $vector.x;\n        this.$y = y + $vector.y;\n        this.$z = z + $vector.z;\n\n        return this;\n    }\n\n    /**\n     * Clones the vector.\n     * @returns {import('../index.js').Vector3}\n     * @public\n     */\n    clone() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        return new Vector3(x, y, z);\n    }\n\n    /**\n     * Checks the equality with the given vector.\n     * @param {import('../index.js').Vector3} $vector The vector to check with.\n     * @returns {boolean}\n     * @public\n     */\n    equal($vector) {\n\n        return this.$x === $vector.x\n        && this.$y === $vector.y\n        && this.$z === $vector.z;\n    }\n\n    /**\n     * Gets the length of the vector.\n     * @returns {number}\n     * @public\n     */\n    length() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n\n    /**\n     * Multiplies with the given vector.\n     * @param {import('../index.js').Vector3} $vector The vector to multiply with.\n     * @returns {this}\n     * @public\n     */\n    multiply($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x * $vector.x;\n        this.$y = y * $vector.y;\n        this.$z = z * $vector.z;\n\n        return this;\n    }\n\n    /**\n     * Negates the vector.\n     * @returns {this}\n     * @public\n     */\n    negate() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = - x;\n        this.$y = - y;\n        this.$z = - z;\n\n        return this;\n    }\n\n    /**\n     * Normalizes the vector.\n     * @returns {this}\n     * @public\n     */\n    normalize() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        let length = x * x + y * y + z * z;\n\n        if (length > 0) {\n\n            length = 1 / Math.sqrt(length);\n        }\n\n        this.$x = x * length;\n        this.$y = y * length;\n        this.$z = z * length;\n\n        return this;\n    }\n\n    /**\n     * Rotates the vector.\n     * @param {import('../index.js').Quaternion} $quaternion The rotation to apply.\n     * @returns {this}\n     * @public\n     */\n    rotate($quaternion) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        const xq = $quaternion.x;\n        const yq = $quaternion.y;\n        const zq = $quaternion.z;\n        const wq = $quaternion.w;\n\n        let xu = yq * z - zq * y;\n        let yu = zq * x - xq * z;\n        let zu = xq * y - yq * x;\n\n        let xv = yq * zu - zq * yu;\n        let yv = zq * xu - xq * zu;\n        let zv = xq * yu - yq * xu;\n\n        const w = wq * 2;\n\n        xu *= w;\n        yu *= w;\n        zu *= w;\n\n        xv *= 2;\n        yv *= 2;\n        zv *= 2;\n\n        this.$x = x + xu + xv;\n        this.$y = y + yu + yv;\n        this.$z = z + zu + zv;\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by the given scalar factor.\n     * @param {number} $factor The scalar factor to multiply with.\n     * @returns {this}\n     * @public\n     */\n    scale($factor) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x * $factor;\n        this.$y = y * $factor;\n        this.$z = z * $factor;\n\n        return this;\n    }\n\n    /**\n     * Subtracts the given vector.\n     * @param {import('../index.js').Vector3} $vector The vector to subtract.\n     * @returns {this}\n     * @public\n     */\n    subtract($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x - $vector.x;\n        this.$y = y - $vector.y;\n        this.$z = z - $vector.z;\n\n        return this;\n    }\n}\n\nexport {\n\n    Vector3\n};\n\nexport default Vector3;\n","/**\n * Creates vibrations.\n *\n * @example\n *\n * const vibration = new Vibration({\n *\n *     $duration: 200,\n *     $intensityFrequencyHigh: 0.8,\n *     $intensityFrequencyLow: 0.2\n * });\n */\nclass Vibration {\n\n    /**\n     * Stores the duration.\n     * @type {number}\n     * @private\n     */\n    $duration;\n\n    /**\n     * Stores the intensity of the high-frequency (weak) rumble motors.\n     * @type {number}\n     * @private\n     */\n    $intensityFrequencyHigh;\n\n    /**\n     * Stores the intensity of the low-frequency (strong) rumble motors.\n     * @type {number}\n     * @private\n     */\n    $intensityFrequencyLow;\n\n    /**\n     * Gets the duration (in ms).\n     * @type {number}\n     * @public\n     */\n    get duration() {\n\n        return this.$duration;\n    }\n\n    /**\n     * Gets the intensity of the high-frequency (weak) rumble motors (with value in [0, 1] range).\n     * @type {number}\n     * @public\n     */\n    get intensityFrequencyHigh() {\n\n        return this.$intensityFrequencyHigh;\n    }\n\n    /**\n     * Gets the intensity of the low-frequency (strong) rumble motors (with value in [0, 1] range).\n     * @type {number}\n     * @public\n     */\n    get intensityFrequencyLow() {\n\n        return this.$intensityFrequencyLow;\n    }\n\n    /**\n     * Creates a new vibration.\n     * @param {Object} $parameters The given parameters.\n     * @param {number} $parameters.$duration The duration (in ms).\n     * @param {number} $parameters.$intensityFrequencyHigh The intensity of the high-frequency (weak) rumble motors (with value in [0, 1] range).\n     * @param {number} $parameters.$intensityFrequencyLow The intensity of the low-frequency (strong) rumble motors (with value in [0, 1] range).\n     */\n    constructor({$duration, $intensityFrequencyHigh, $intensityFrequencyLow}) {\n\n        this.$duration = $duration;\n        this.$intensityFrequencyHigh = $intensityFrequencyHigh;\n        this.$intensityFrequencyLow = $intensityFrequencyLow;\n    }\n}\n\nexport {\n\n    Vibration\n};\n\nexport default Vibration;\n","/**\n * Creates gamepad events.\n *\n * @example\n *\n * const event = new EventGamepad(type, code, data);\n */\nclass EventGamepad extends Event {\n\n    /**\n     * @typedef {Object} typedatavibration The event data.\n     * @property {number} typedatavibration.$duration The duration of the vibration (in ms).\n     * @property {number} typedatavibration.$intensityFrequencyHigh The intensity of the high-frequency (weak) rumble motors (with value in [0, 1] range).\n     * @property {number} typedatavibration.$intensityFrequencyLow The intensity of the low-frequency (strong) rumble motors (with value in [0, 1] range).\n     */\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the data.\n     * @type {typedatavibration}\n     * @private\n     */\n    $data;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the data.\n     * @type {typedatavibration}\n     * @public\n     */\n    get data() {\n\n        return this.$data;\n    }\n\n    /**\n     * Creates a new gamepad event.\n     * @param {('gamepadvibrate')} $type The event type.\n     * @param {string} $code The event code.\n     * @param {typedatavibration} $data The data.\n     */\n    constructor($type, $code, $data) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$data = $data;\n    }\n}\n\nexport {\n\n    EventGamepad\n};\n\nexport default EventGamepad;\n","/**\n * Creates gamepad analog events.\n *\n * @example\n *\n * const event = new EventGamepadAnalog(type, code, value);\n */\nclass EventGamepadAnalog extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the analog value.\n     * @type {number}\n     * @private\n     */\n    $value;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the analog value.\n     * @type {number}\n     * @public\n     */\n    get value() {\n\n        return this.$value;\n    }\n\n    /**\n     * Creates a new gamepad analog event.\n     * @param {('gamepadanalog')} $type The event type.\n     * @param {string} $code The event code.\n     * @param {number} $value The analog value.\n     */\n    constructor($type, $code, $value) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$value = $value;\n    }\n}\n\nexport {\n\n    EventGamepadAnalog\n};\n\nexport default EventGamepadAnalog;\n","/**\n * Creates gamepad digital events.\n *\n * @example\n *\n * const event = new EventGamepadDigital(type, code);\n */\nclass EventGamepadDigital extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Creates a new gamepad digital event.\n     * @param {('gamepadconnect' | 'gamepaddown' | 'gamepadup' | 'gamepadvibrate')} $type The event type.\n     * @param {string} $code The event code.\n     */\n    constructor($type, $code) {\n\n        super($type);\n\n        this.$code = $code;\n    }\n}\n\nexport {\n\n    EventGamepadDigital\n};\n\nexport default EventGamepadDigital;\n","import {EventGamepad, EventGamepadAnalog, EventGamepadDigital} from '../index.js';\n\n/**\n * The ordered list of the axes event codes of the gamepad.\n * @type {string[][]}\n * @constant\n */\nconst GAMEPADAXES = [\n\n    ['StickLeftLeft', 'StickLeftRight'],\n    ['StickLeftUp', 'StickLeftDown'],\n    ['StickRightLeft', 'StickRightRight'],\n    ['StickRightUp', 'StickRightDown']\n];\n\n/**\n * The ordered list of the buttons event codes of the gamepad.\n * @type {string[]}\n * @constant\n */\nconst GAMEPADBUTTONS = [\n\n    'ClusterRightButtonBottom',\n    'ClusterRightButtonRight',\n    'ClusterRightButtonLeft',\n    'ClusterRightButtonTop',\n    'ClusterFrontButtonTopLeft',\n    'ClusterFrontButtonTopRight',\n    'ClusterFrontButtonBottomLeft',\n    'ClusterFrontButtonBottomRight',\n    'ClusterCenterButtonLeft',\n    'ClusterCenterButtonRight',\n    'StickLeftButton',\n    'StickRightButton',\n    'ClusterLeftButtonTop',\n    'ClusterLeftButtonBottom',\n    'ClusterLeftButtonLeft',\n    'ClusterLeftButtonRight',\n    'ClusterCenterButtonCenter'\n];\n\n/**\n * The threshold of the gampead axes.\n * @type {number}\n * @constant\n */\nconst THRESHOLDGAMEPADAXES = 0.5;\n\n/**\n * Creates gamepad extension.\n *\n * @example\n *\n * const extensionGamepad = new ExtensionGamepad();\n */\nclass ExtensionGamepad {\n\n    /**\n     * Stores the index of the last connected gamepad.\n     * @type {number}\n     * @private\n     */\n    $indexLastConnected;\n\n    /**\n     * Stores the gamepad state.\n     * @type {Object.<string, boolean>}\n     * @private\n     */\n    $stateGamepad;\n\n    /**\n     * Stores the unloaded status.\n     * @type {boolean}\n     * @private\n     */\n    $unloaded;\n\n    /**\n     * Creates a new gamepad extension.\n     */\n    constructor() {\n\n        this.$stateGamepad = {};\n        this.$unloaded = false;\n\n        [...GAMEPADBUTTONS, ...GAMEPADAXES.flat()].forEach(($code) => {\n\n            this.$stateGamepad[$code] = false;\n        });\n\n        window.addEventListener('beforeunload', this.$onBeforeUnload.bind(this));\n\n        window.addEventListener('gamepadconnected', this.$onConnect.bind(this));\n        window.addEventListener('gamepaddisconnected', this.$onDisconnect.bind(this));\n\n        window.addEventListener('gamepadvibrate', this.$onVibrate.bind(this));\n\n        window.requestAnimationFrame(this.$update.bind(this));\n    }\n\n    /**\n     * Called when the scope is about to be unloaded.\n     * @private\n     */\n    $onBeforeUnload() {\n\n        this.$unloaded = true;\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (typeof gamepad === 'undefined') {\n\n            return;\n        }\n\n        if (typeof gamepad.vibrationActuator === 'undefined') {\n\n            return;\n        }\n\n        gamepad.vibrationActuator.reset();\n    }\n\n    /**\n     * Called when the gamepad is connected.\n     * @param {GamepadEvent} $event The native gamepad connected event.\n     * @private\n     */\n    $onConnect($event) {\n\n        if ($event.gamepad.mapping !== 'standard') {\n\n            return;\n        }\n\n        Object.entries(this.$stateGamepad).forEach(([$code, $activated]) => {\n\n            if ($activated === true) {\n\n                this.$stateGamepad[$code] = false;\n\n                window.dispatchEvent(new EventGamepadDigital('gamepadup', $code));\n            }\n        });\n\n        this.$indexLastConnected = $event.gamepad.index;\n\n        window.dispatchEvent(new EventGamepadDigital('gamepadconnect', 'Connected'));\n    }\n\n    /**\n     * Called when the gamepad is disconnected.\n     * @param {GamepadEvent} $event The native gamepad disconnected event.\n     * @private\n     */\n    $onDisconnect($event) {\n\n        if ($event.gamepad.index !== this.$indexLastConnected) {\n\n            return;\n        }\n\n        Object.entries(this.$stateGamepad).forEach(([$code, $activated]) => {\n\n            if ($activated === true) {\n\n                this.$stateGamepad[$code] = false;\n\n                window.dispatchEvent(new EventGamepadDigital('gamepadup', $code));\n            }\n        });\n\n        this.$indexLastConnected = undefined;\n\n        window.dispatchEvent(new EventGamepadDigital('gamepadconnect', 'Disconnected'));\n    }\n\n    /**\n     * Called when a gamepad vibration is needed.\n     * @param {Event} $event The gamepad vibrate event.\n     * @private\n     */\n    $onVibrate($event) {\n\n        if (this.$unloaded === true) {\n\n            return;\n        }\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (typeof gamepad === 'undefined') {\n\n            return;\n        }\n\n        if (typeof gamepad.vibrationActuator === 'undefined') {\n\n            return;\n        }\n\n        if ($event instanceof EventGamepadDigital\n        && $event.code === 'VibrateEnd') {\n\n            gamepad.vibrationActuator.reset();\n\n            return;\n        }\n\n        if ($event instanceof EventGamepad\n        && $event.code === 'VibrateStart') {\n\n            gamepad.vibrationActuator.playEffect('dual-rumble', {\n\n                startDelay: 0,\n                duration: $event.data.$duration,\n                strongMagnitude: $event.data.$intensityFrequencyLow,\n                weakMagnitude: $event.data.$intensityFrequencyHigh\n            });\n\n            return;\n        }\n    }\n\n    /**\n     * Updates the state of the gamepad.\n     * @private\n     */\n    $update() {\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (gamepad instanceof Gamepad) {\n\n            GAMEPADBUTTONS.forEach(($button, $index) => {\n\n                const button = gamepad.buttons[$index];\n\n                if (button.pressed === true) {\n\n                    if (this.$stateGamepad[$button] === false) {\n\n                        this.$stateGamepad[$button] = true;\n                    }\n\n                    window.dispatchEvent(new EventGamepadDigital('gamepaddown', $button));\n                    window.dispatchEvent(new EventGamepadAnalog('gamepadanalog', $button, button.value));\n                }\n\n                else {\n\n                    if (this.$stateGamepad[$button] === true) {\n\n                        this.$stateGamepad[$button] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', $button));\n                    }\n                }\n            });\n\n            gamepad.axes.forEach(($direction, $index) => {\n\n                const [axeMinimum, axeMaximum] = GAMEPADAXES[$index];\n\n                if ($direction <= - THRESHOLDGAMEPADAXES) {\n\n                    if (this.$stateGamepad[axeMaximum] === true) {\n\n                        this.$stateGamepad[axeMaximum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMaximum));\n                    }\n\n                    this.$stateGamepad[axeMinimum] = true;\n                    window.dispatchEvent(new EventGamepadDigital('gamepaddown', axeMinimum));\n                    window.dispatchEvent(new EventGamepadAnalog('gamepadanalog', axeMinimum, ($direction - (Math.sign($direction) * THRESHOLDGAMEPADAXES)) / (1 - THRESHOLDGAMEPADAXES)));\n                }\n\n                else if ($direction >= THRESHOLDGAMEPADAXES) {\n\n                    if (this.$stateGamepad[axeMinimum] === true) {\n\n                        this.$stateGamepad[axeMinimum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMinimum));\n                    }\n\n                    this.$stateGamepad[axeMaximum] = true;\n                    window.dispatchEvent(new EventGamepadDigital('gamepaddown', axeMaximum));\n                    window.dispatchEvent(new EventGamepadAnalog('gamepadanalog', axeMaximum, ($direction - (Math.sign($direction) * THRESHOLDGAMEPADAXES)) / (1 - THRESHOLDGAMEPADAXES)));\n                }\n\n                else {\n\n                    if (this.$stateGamepad[axeMinimum] === true) {\n\n                        this.$stateGamepad[axeMinimum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMinimum));\n                    }\n\n                    if (this.$stateGamepad[axeMaximum] === true) {\n\n                        this.$stateGamepad[axeMaximum] = false;\n                        window.dispatchEvent(new EventGamepadDigital('gamepadup', axeMaximum));\n                    }\n                }\n            });\n        }\n\n        window.requestAnimationFrame(this.$update.bind(this));\n    }\n}\n\nexport {\n\n    ExtensionGamepad\n};\n\nexport default ExtensionGamepad;\n","import {ExtensionGamepad} from './extensions/gamepad.extension.js';\n\nnew ExtensionGamepad();\n\nexport * as COLLIDERTYPES from './constants/collidertypes.js';\nexport * as CONTENTTYPES from './constants/contenttypes.js';\nexport * as EVENTCODES from './constants/eventcodes.js';\nexport * as MATHEMATICS from './constants/mathematics.js';\n\nexport {AABB} from './core/aabb.js';\nexport {Actor} from './core/actor.js';\nexport {ActorPreloadable} from './core/actorpreloadable.js';\nexport {Collider} from './core/collider.js';\nexport {Engine} from './core/engine.js';\nexport {FiniteStateMachine} from './core/finitestatemachine.js';\nexport {Loop} from './core/loop.js';\nexport {Quaternion} from './core/quaternion.js';\nexport {Shader} from './core/shader.js';\nexport {Sound} from './core/sound.js';\nexport {Sprite} from './core/sprite.js';\nexport {Stage} from './core/stage.js';\nexport {StagePreloadable} from './core/stagepreloadable.js';\nexport {State} from './core/state.js';\nexport * as STORAGE from './core/storage.js';\nexport {Timeline} from './core/timeline.js';\nexport {TimelineKeyframe} from './core/timelinekeyframe.js';\nexport * as UTILS from './core/utils.js';\nexport {Vector2} from './core/vector2.js';\nexport {Vector3} from './core/vector3.js';\nexport {Vibration} from './core/vibration.js';\n\nexport {EventGamepad} from './events/gamepad.js';\nexport {EventGamepadAnalog} from './events/gamepadanalog.js';\nexport {EventGamepadDigital} from './events/gamepaddigital.js';\n\nexport {SystemActor} from './systems/actor.system.js';\nexport {SystemAudio} from './systems/audio.system.js';\nexport {SystemCollision} from './systems/collision.system.js';\nexport {SystemInput} from './systems/input.system.js';\nexport {SystemRender} from './systems/render.system.js';\nexport {SystemVibration} from './systems/vibration.system.js';\n","/**\n * Creates actor systems.\n *\n * @example\n *\n * const system = new SystemActor();\n * system.tick({$stage, $timetick});\n */\nclass SystemActor {\n\n    /**\n     * Updates the system by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    tick({$stage, $timetick}) {\n\n        $stage.actors.forEach(($actor) => {\n\n            $actor.onTick($timetick);\n        });\n    }\n}\n\nexport {\n\n    SystemActor\n};\n\nexport default SystemActor;\n","import {UTILS} from '../index.js';\n\n/**\n * Creates audio systems.\n *\n * @example\n *\n * const system = new SystemAudio();\n */\nclass SystemAudio {\n\n    /**\n     * @typedef {Object} typedataaudio The audio data.\n     * @property {AudioBufferSourceNode} typeaudio.$audio The audio buffer source node.\n     * @property {GainNode} typeaudio.$gain The gain.\n     * @property {number} typeaudio.$startTime The start time of the audio in the audio context timeline.\n     */\n\n    /**\n     * Stores the safe delay before removing the audio context when the system terminates.\n     * @type {number}\n     * @public\n     * @readonly\n     * @static\n     */\n    static DELAYCONTEXTCLEARSAFE = 1000;\n\n    /**\n     * Stores the cache of the audio assets.\n     * @type {Map<string, AudioBuffer>}\n     * @private\n     */\n    $cache;\n\n    /**\n     * Stores the audio context.\n     * @type {AudioContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Stores the mapping between the playing sounds and their audio data.\n     * @type {Map<import('../index.js').Sound, typedataaudio>}\n     * @private\n     */\n    $mappingSoundsPlaying;\n\n    /**\n     * Creates a new audio system.\n     */\n    constructor() {\n\n        this.$cache = new Map();\n        this.$context = new AudioContext();\n        this.$mappingSoundsPlaying = new Map();\n    }\n\n    /**\n     * Creates the values for the fade out curve.\n     * @param {number} $volume The volume of the sound.\n     * @returns {number[]}\n     * @private\n     */\n    $createValuesCurveFadeOut($volume) {\n\n        return [\n\n            - 1 + $volume * 1,\n            - 1 + $volume * 0\n        ];\n    }\n\n    /**\n     * Loads the audio from the given audio file content.\n     * @param {Response} $content The audio file content.\n     * @returns {Promise<AudioBuffer>}\n     * @private\n     */\n    $loadAudio($content) {\n\n        const promise = new Promise(($resolve) => {\n\n            $content.arrayBuffer()\n            .then(($bufferArray) => (this.$context.decodeAudioData($bufferArray))\n            .then(($bufferAudio) => {\n\n                this.$cache.set($content.url, $bufferAudio);\n\n                $resolve($bufferAudio);\n            }));\n        });\n\n        return promise;\n    }\n\n    /**\n     * Prepares the audio from the given audio source.\n     * @param {string} $audio The audio source.\n     * @private\n     */\n    $prepareAudio($audio) {\n\n        if (this.$cache.has($audio) === true) {\n\n            return;\n        }\n\n        this.$cache.set($audio, undefined);\n\n        fetch($audio)\n        .then(($content) => (this.$loadAudio($content)));\n    }\n\n    /**\n     * Terminates the given sound.\n     * @param {import('../index.js').Sound} $sound The sound to terminate.\n     * @private\n     */\n    $terminateSound($sound) {\n\n        const {$audio, $gain, $startTime} = this.$mappingSoundsPlaying.get($sound);\n\n        if ($sound.loop === false\n        && this.$context.currentTime > $startTime + Math.max(0, $audio.buffer.duration - ($sound.durationFadeOut / 1000))) {\n\n            return\n        }\n\n        $gain.gain.cancelScheduledValues(this.$context.currentTime);\n        $gain.gain.setValueCurveAtTime(\n\n            this.$createValuesCurveFadeOut($sound.volume),\n            this.$context.currentTime,\n            Math.min($audio.buffer.duration, $sound.durationFadeOut / 1000)\n        );\n\n        this.$mappingSoundsPlaying.delete($sound);\n\n        $audio.onended = () => {\n\n            $audio.disconnect();\n            $gain.disconnect();\n        };\n    }\n\n    /**\n     * Checks if the system has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        return this.$cache.has($asset) === true;\n    }\n\n    /**\n     * Loads the audio from the given audio file content.\n     * @param {Response} $content The audio file content.\n     * @returns {Promise<AudioBuffer>}\n     * @public\n     */\n    loadAudio($content) {\n\n        if (this.$cache.has($content.url) === true) {\n\n            const promise = new Promise(($resolve) => {\n\n                const audio = this.$cache.get($content.url);\n\n                $resolve(audio);\n            });\n\n            return promise;\n        }\n\n        this.$cache.set($content.url, undefined);\n\n        return this.$loadAudio($content);\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        let delayFadeOut = 0;\n\n        Array.from(this.$mappingSoundsPlaying.keys()).forEach(($sound) => {\n\n            if ($sound.durationFadeOut > delayFadeOut) {\n\n                delayFadeOut = $sound.durationFadeOut;\n            }\n\n            this.$terminateSound($sound);\n        });\n\n        window.setTimeout(() => {\n\n            this.$context.close();\n            this.$context = undefined;\n\n        }, delayFadeOut + SystemAudio.DELAYCONTEXTCLEARSAFE);\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {import('../index.js').Stage} $stage The stage on which to execute the system.\n     * @public\n     */\n    tick($stage) {\n\n        /**\n         * @type {import('../index.js').Sound[]}\n         */\n        const previous = Array.from(this.$mappingSoundsPlaying.keys());\n\n        $stage.actors.forEach(($actor) => {\n\n            $actor.sounds.forEach(($sound) => {\n\n                if (this.$mappingSoundsPlaying.has($sound) === true) {\n\n                    UTILS.extract($sound, previous);\n\n                    return;\n                }\n\n                this.$prepareAudio($sound.audio);\n\n                if (typeof this.$cache.get($sound.audio) === 'undefined') {\n\n                    return;\n                }\n\n                const bufferAudio = this.$cache.get($sound.audio);\n\n                const audio = this.$context.createBufferSource();\n                audio.buffer = bufferAudio;\n                audio.connect(this.$context.destination);\n                audio.start(0);\n\n                const gain = this.$context.createGain();\n                gain.gain.value = $sound.volume - 1;\n                gain.connect(this.$context.destination);\n\n                audio.connect(gain);\n\n                this.$mappingSoundsPlaying.set($sound, {\n\n                    $audio: audio,\n                    $gain: gain,\n                    $startTime: this.$context.currentTime\n                });\n\n                if ($sound.loop === true) {\n\n                    audio.loop = true;\n\n                    return;\n                }\n\n                gain.gain.setValueCurveAtTime(\n\n                    this.$createValuesCurveFadeOut($sound.volume),\n                    this.$context.currentTime + Math.max(0, audio.buffer.duration - ($sound.durationFadeOut / 1000)),\n                    Math.min(audio.buffer.duration, $sound.durationFadeOut / 1000)\n                );\n\n                audio.onended = () => {\n\n                    audio.disconnect();\n                    gain.disconnect();\n\n                    this.$mappingSoundsPlaying.delete($sound);\n\n                    $actor.removeSound($sound);\n                    $actor.onSoundFinish($sound);\n                };\n            });\n        });\n\n        previous.forEach(($sound) => {\n\n            this.$terminateSound($sound);\n        });\n    }\n}\n\nexport {\n\n    SystemAudio\n};\n\nexport default SystemAudio;\n","import {AABB, COLLIDERTYPES, Vector2} from '../index.js';\n\n/**\n * Creates collision systems.\n *\n * @example\n *\n * const system = new SystemCollision();\n */\nclass SystemCollision {\n\n    /**\n     * @typedef {[import('../index.js').Actor, import('../index.js').Actor]} typepairactor A pair of actors.\n     */\n\n    /**\n     * Stores the current collision pairs.\n     * @type {typepairactor[]}\n     * @private\n     */\n    $current;\n\n    /**\n     * Stores the previous collision pairs.\n     * @type {typepairactor[]}\n     * @private\n     */\n    $previous;\n\n    /**\n     * Creates a new collision system.\n     */\n    constructor() {\n\n        this.$current = [];\n        this.$previous = [];\n    }\n\n    /**\n     * Checks if a collision previously existed between two given actors.\n     * @param {import('../index.js').Actor} $dynamic The first actor to check on.\n     * @param {import('../index.js').Actor} $inert The second actor to check with.\n     * @returns {boolean}\n     * @private\n     */\n    $hasCollisionPrevious($dynamic, $inert) {\n\n        const result = this.$previous.find(([$dynamicPrevious, $inertPrevious]) => {\n\n            return $dynamic === $dynamicPrevious\n            && $inert === $inertPrevious;\n\n        });\n\n        return typeof result !== 'undefined';\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {import('../index.js').Stage} $stage The stage on which to execute the system.\n     * @public\n     */\n    tick($stage) {\n\n        /**\n         * @typedef {Object} typepaircollision A pair of candidates for collision.\n         * @property {number} typepaircollision.$distance The manhattan distance between the two actors.\n         * @property {import('../index.js').Actor} typepaircollision.$dynamic The first actor.\n         * @property {import('../index.js').Actor} typepaircollision.$inert The second actor.\n         */\n\n        /**\n         * @type {typepaircollision[]}\n         */\n        const pairs = [];\n\n        /**\n         * @type {import('../index.js').Actor[]}\n         */\n        const dynamics = [];\n\n        /**\n         * @type {import('../index.js').Actor[]}\n         */\n        const kinetics = [];\n\n        /**\n         * @type {import('../index.js').Actor[]}\n         */\n        const statics = [];\n\n        $stage.actors.forEach(($actor) => {\n\n            if ($actor.hasCollider() === false) {\n\n                return;\n            }\n\n            switch ($actor.collider.type) {\n\n                case COLLIDERTYPES.DYNAMIC: {\n\n                    dynamics.push($actor);\n\n                    break;\n                }\n\n                case COLLIDERTYPES.KINETIC: {\n\n                    kinetics.push($actor);\n\n                    break;\n                }\n\n                case COLLIDERTYPES.STATIC: {\n\n                    statics.push($actor);\n\n                    break;\n                }\n            }\n        });\n\n        const inerts = [...statics, ...kinetics];\n\n        if (inerts.length === 0) {\n\n            return;\n        }\n\n        dynamics.forEach(($dynamic) => {\n\n            const boundariesDynamic = $dynamic.collider.boundaries.clone().translate($dynamic.translation);\n            const centerBoundariesDynamic = new AABB(boundariesDynamic.center, boundariesDynamic.center);\n\n            inerts.forEach(($inert) => {\n\n                const boundariesInert = $inert.collider.boundaries.clone().translate($inert.translation);\n\n                const distance = AABB.distanceManhattan(centerBoundariesDynamic, boundariesInert);\n\n                pairs.push({\n\n                    $distance: distance,\n                    $dynamic: $dynamic,\n                    $inert: $inert\n                });\n            });\n        });\n\n        pairs.sort(($a, $b) => {\n\n            return $a.$distance - $b.$distance;\n        });\n\n        pairs.forEach(($pair) => {\n\n            const {$dynamic, $inert} = $pair;\n\n            if ($stage.hasActor($dynamic) === false) {\n\n                return;\n            }\n\n            if ($stage.hasActor($inert) === false) {\n\n                return;\n            }\n\n            const boundariesDynamic = $dynamic.collider.boundaries.clone().translate($dynamic.translation);\n            const boundariesInert = $inert.collider.boundaries.clone().translate($inert.translation);\n\n            const overlapX = AABB.overlapX(boundariesDynamic, boundariesInert);\n\n            if (overlapX <= 0) {\n\n                return;\n            }\n\n            const overlapY = AABB.overlapY(boundariesDynamic, boundariesInert);\n\n            if (overlapY <= 0) {\n\n                return;\n            }\n\n            this.$current.push([$dynamic, $inert]);\n\n            const directionX = Math.sign($inert.translation.x - $dynamic.translation.x);\n            const directionY = Math.sign($inert.translation.y - $dynamic.translation.y);\n\n            const checkMinimumX = (overlapX <= overlapY);\n            const checkMinimumY = (overlapY <= overlapX);\n\n            if ($dynamic.collider.traversable === false\n            && $inert.collider.traversable === false) {\n\n                const resolverDynamic = new Vector2(\n\n                    checkMinimumX ? - directionX * overlapX : 0,\n                    checkMinimumY ? - directionY * overlapY : 0\n                );\n\n                $dynamic.translate(resolverDynamic);\n            }\n\n            const originDynamicEast = checkMinimumX === true && directionX === 1;\n            const originDynamicNorth = checkMinimumY === true && directionY === 1;\n            const originDynamicSouth = checkMinimumY === true && directionY === -1;\n            const originDynamicWest = checkMinimumX === true && directionX === -1;\n\n            if (this.$hasCollisionPrevious($dynamic, $inert) === false) {\n\n                $dynamic.onCollideEnter({\n\n                    $actor: $inert,\n                    $east: originDynamicEast,\n                    $north: originDynamicNorth,\n                    $south: originDynamicSouth,\n                    $west: originDynamicWest\n                });\n\n                $inert.onCollideEnter({\n\n                    $actor: $dynamic,\n                    $east: originDynamicWest,\n                    $north: originDynamicSouth,\n                    $south: originDynamicNorth,\n                    $west: originDynamicEast\n                });\n            }\n\n            $dynamic.onCollide({\n\n                $actor: $inert,\n                $east: originDynamicEast,\n                $north: originDynamicNorth,\n                $south: originDynamicSouth,\n                $west: originDynamicWest\n            });\n\n            $inert.onCollide({\n\n                $actor: $dynamic,\n                $east: originDynamicWest,\n                $north: originDynamicSouth,\n                $south: originDynamicNorth,\n                $west: originDynamicEast\n            });\n        });\n\n        this.$previous.filter(([$dynamicPrevious, $inertPrevious]) => {\n\n            const result = this.$current.find(([$dynamic, $inert]) => {\n\n                return $dynamic === $dynamicPrevious\n                && $inert === $inertPrevious;\n            });\n\n            return typeof result === 'undefined';\n\n        }).forEach(([$dynamicPrevious, $inertPrevious]) => {\n\n            $dynamicPrevious.onCollideLeave($inertPrevious);\n            $inertPrevious.onCollideLeave($dynamicPrevious);\n        });\n\n        this.$previous = [...this.$current];\n        this.$current = [];\n    }\n}\n\nexport {\n\n    SystemCollision\n};\n\nexport default SystemCollision;\n","import {EventGamepadAnalog, EventGamepadDigital} from '../index.js';\n\n/**\n * Creates input systems.\n *\n * @example\n *\n * const system = new SystemInput({$container});\n * system.initiate();\n * system.tick();\n */\nclass SystemInput {\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the input events.\n     * @type {Event[]}\n     * @private\n     */\n    $events;\n\n    /**\n     * Stores the initiated status.\n     * @type {boolean}\n     * @private\n     */\n    $initiated;\n\n    /**\n     * Stores the state of the accepted inputs.\n     * @type {Object.<string, boolean>}\n     * @private\n     */\n    $inputs;\n\n    /**\n     * Stores the state of the accepted analog inputs.\n     * @type {Object.<string, number>}\n     * @private\n     */\n    $inputsAnalog;\n\n    /**\n     * Creates a new input system.\n     * @param {Object} $parameters The given parameters.\n     * @param {HTMLElement} $parameters.$container The container on which to attach input events.\n     */\n    constructor({$container}) {\n\n        this.$container = $container;\n\n        this.$events = [];\n        this.$initiated = false;\n        this.$inputs = {};\n        this.$inputsAnalog = {};\n    }\n\n    /**\n     * Stacks the input events for the next tick.\n     * @param {Event} $event The input event to stack.\n     * @private\n     */\n    $stack($event) {\n\n        $event.preventDefault();\n\n        this.$events.push($event);\n    }\n\n    /**\n     * Gets the current input state value of the given digital input.\n     * @param {string} $input The event code of the given digital input.\n     * @returns {boolean}\n     * @public\n     */\n    getInput($input) {\n\n        const input = this.$inputs[$input];\n\n        if (typeof input === 'undefined') {\n\n            return false;\n        }\n\n        return input;\n    }\n\n    /**\n     * Gets the current input state value of the given analog input.\n     * @param {string} $input The event code of the given analog input.\n     * @returns {number}\n     * @public\n     */\n    getInputAnalog($input) {\n\n        const input = this.$inputsAnalog[$input];\n\n        if (typeof input === 'undefined') {\n\n            return 0;\n        }\n\n        return input;\n    }\n\n    /**\n     * Initiates the system.\n     * @public\n     */\n    initiate() {\n\n        if (this.$initiated === true) {\n\n            return;\n        }\n\n        window.addEventListener('blur', this.$stack.bind(this));\n\n        window.addEventListener('contextmenu', this.$stack.bind(this));\n\n        window.addEventListener('gamepadanalog', this.$stack.bind(this));\n        window.addEventListener('gamepadconnect', this.$stack.bind(this));\n        window.addEventListener('gamepaddown', this.$stack.bind(this));\n        window.addEventListener('gamepadup', this.$stack.bind(this));\n\n        this.$container.addEventListener('keydown', this.$stack.bind(this));\n        this.$container.addEventListener('keyup', this.$stack.bind(this));\n\n        this.$initiated = true;\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        if (this.$initiated === false) {\n\n            return;\n        }\n\n        window.removeEventListener('blur', this.$stack.bind(this));\n\n        window.removeEventListener('contextmenu', this.$stack.bind(this));\n\n        window.removeEventListener('gamepadanalog', this.$stack.bind(this));\n        window.removeEventListener('gamepadconnect', this.$stack.bind(this));\n        window.removeEventListener('gamepaddown', this.$stack.bind(this));\n        window.removeEventListener('gamepadup', this.$stack.bind(this));\n\n        this.$container.removeEventListener('keydown', this.$stack.bind(this));\n        this.$container.removeEventListener('keyup', this.$stack.bind(this));\n\n        this.$initiated = false;\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @public\n     */\n    tick() {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        while (this.$events.length > 0) {\n\n            const $event = this.$events.shift();\n\n            if ($event.type === 'blur') {\n\n                this.$inputs = {};\n                this.$inputsAnalog = {};\n            }\n\n            else if ($event instanceof EventGamepadAnalog\n            && $event.type === 'gamepadanalog') {\n\n                this.$inputsAnalog[$event.code] = $event.value;\n            }\n\n            else if ($event instanceof EventGamepadDigital\n            && $event.type === 'gamepaddown') {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof EventGamepadDigital\n            && $event.type === 'gamepadup') {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n\n            else if ($event instanceof KeyboardEvent\n            && $event.type === 'keydown') {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof KeyboardEvent\n            && $event.type === 'keyup') {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n        }\n    }\n}\n\nexport {\n\n    SystemInput\n};\n\nexport default SystemInput;\n","import {Shader, Vector3} from '../index.js';\n\n/**\n * Creates render systems.\n *\n * @example\n *\n * const system = new SystemRender({$color, $container, $resolution});\n * system.initiate();\n * system.tick($stage);\n */\nclass SystemRender {\n\n    /**\n     * Stores the texture unit for the textures to preload.\n     * @type {0}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNITTEXTURE0 = 0;\n\n    /**\n     * Stores the texture unit for the color textures.\n     * @type {1}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNITTEXTURE1 = 1;\n\n    /**\n     * Stores the texture unit for the opacity textures.\n     * @type {2}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNITTEXTURE2 = 2;\n\n    /**\n     * Stores the common vertices positions of the sprites.\n     * @type {WebGLBuffer}\n     * @private\n     */\n    $bufferPosition;\n\n    /**\n     * Stores the cache of the texture assets.\n     * @type {Map<string, WebGLTexture>}\n     * @private\n     */\n    $cache;\n\n    /**\n     * Stores the canvas element.\n     * @type {HTMLCanvasElement}\n     * @private\n     */\n    $canvas;\n\n    /**\n     * Stores the background color.\n     * @type {import('../index.js').Vector3}\n     * @private\n     */\n    $color;\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the canvas context.\n     * @type {WebGL2RenderingContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Stores the number of indices of the vertices positions of the sprites.\n     * @type {number}\n     * @private\n     */\n    $indices;\n\n    /**\n     * Stores the initiated status.\n     * @type {boolean}\n     * @private\n     */\n    $initiated;\n\n    /**\n     * Stores the shader program attribute locations.\n     * @type {Object.<string, number>}\n     * @private\n     */\n    $locationsAttribute;\n\n    /**\n     * Stores the shader program uniform locations.\n     * @type {Object.<string, WebGLUniformLocation>}\n     * @private\n     */\n    $locationsUniform;\n\n    /**\n     * Stores the mapping between the texture sources and their uvmappings.\n     * @type {Object.<string, WebGLBuffer>}\n     * @private\n     */\n    $mappingBuffersUv;\n\n    /**\n     * Stores the shader program.\n     * @type {WebGLProgram}\n     * @private\n     */\n    $program;\n\n    /**\n     * Stores the ResizeObserver.\n     * @type {ResizeObserver}\n     * @private\n     */\n    $resizeOberver;\n\n    /**\n     * Stores the resolution.\n     * @type {import('../index.js').Vector2}\n     * @private\n     */\n    $resolution;\n\n    /**\n     * Stores the texture of the default color texture source.\n     * @type {WebGLTexture}\n     * @private\n     */\n    $textureColorDefault;\n\n    /**\n     * Stores the texture of the default opacity texture source.\n     * @type {WebGLTexture}\n     * @private\n     */\n    $textureOpacityDefault;\n\n    /**\n     * Creates a new render system.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').Vector3} [$parameters.$color] The rendering background color to use.\n     * @param {HTMLElement} $parameters.$container The container on which to attach the canvas.\n     * @param {import('../index.js').Vector2} $parameters.$resolution The rendering resolution to use.\n     */\n    constructor({$color = new Vector3(0, 0, 0), $container, $resolution}) {\n\n        this.$color = $color;\n        this.$container = $container;\n        this.$resolution = $resolution;\n\n        this.$cache = new Map();\n        this.$canvas = document.createElement('canvas');\n        this.$canvas.style.width = '100%';\n        this.$canvas.style.height = '100%';\n        this.$canvas.style.display = 'block';\n        this.$canvas.style.outline = '0';\n        this.$canvas.style.imageRendering = 'pixelated';\n        this.$context = this.$canvas.getContext('webgl2', {\n\n            'antialias': false\n        });\n\n        $container.appendChild(this.$canvas);\n\n        this.$resize();\n\n        this.$initiated = false;\n    }\n\n    /**\n     * Creates the common vertices positions of the sprites.\n     * @private\n     */\n    $createBufferPositions() {\n\n        const positions = [\n\n            -0.5, -0.5,\n            -0.5, 0.5,\n            0.5, 0.5,\n            0.5, -0.5\n        ];\n\n        const bufferPosition = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ARRAY_BUFFER, bufferPosition);\n        this.$context.bufferData(this.$context.ARRAY_BUFFER, new Float32Array(positions), this.$context.STATIC_DRAW);\n\n        this.$bufferPosition = bufferPosition;\n    }\n\n    /**\n     * Creates the uvmapping from the given sprite.\n     * @param {import('../index.js').Sprite} $sprite The sprite.\n     * @private\n     */\n    $createBufferUvsOnce($sprite) {\n\n        if (typeof this.$mappingBuffersUv[$sprite.frameSourceSerialized] !== 'undefined') {\n\n            return;\n        }\n\n        const frame = $sprite.frameSource;\n\n        const uvs = [\n\n            frame.minimum.x, frame.maximum.y,\n            frame.minimum.x, frame.minimum.y,\n            frame.maximum.x, frame.minimum.y,\n            frame.maximum.x, frame.maximum.y\n        ];\n\n        const bufferUv = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ARRAY_BUFFER, bufferUv);\n        this.$context.bufferData(this.$context.ARRAY_BUFFER, new Float32Array(uvs), this.$context.STATIC_DRAW);\n\n        this.$mappingBuffersUv[$sprite.frameSourceSerialized] = bufferUv;\n    }\n\n    /**\n     * Creates the indices of the vertices positions of the sprites.\n     * @private\n     */\n    $createIndices() {\n\n        const indices = [\n\n            0,\n            1,\n            2,\n            3\n        ];\n\n        const bufferIndex = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ELEMENT_ARRAY_BUFFER, bufferIndex);\n        this.$context.bufferData(this.$context.ELEMENT_ARRAY_BUFFER, new Uint32Array(indices), this.$context.STATIC_DRAW);\n\n        this.$indices = indices.length;\n    }\n\n    /**\n     * Creates the attributes locations to use by the shader program.\n     * @param {WebGLProgram} $program The shader program.\n     * @param {typeof import('../index.js').Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createLocationsAttribute($program, $shader) {\n\n        Object.keys($shader.attributes).forEach(($name) => {\n\n            this.$locationsAttribute[$name] = this.$context.getAttribLocation($program, $name);\n        });\n    }\n\n    /**\n     * Creates the uniform locations to use by the shader program.\n     * @param {WebGLProgram} $program The shader program.\n     * @param {typeof import('../index.js').Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createLocationsUniform($program, $shader) {\n\n        Object.keys($shader.uniforms).forEach(($name) => {\n\n            this.$locationsUniform[$name] = this.$context.getUniformLocation($program, $name);\n        });\n    }\n\n    /**\n     * Creates the shader program.\n     * @param {typeof import('../index.js').Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createProgram($shader) {\n\n        const shaderVertex = this.$context.createShader(this.$context.VERTEX_SHADER);\n        this.$context.shaderSource(shaderVertex, $shader.sourceVertex);\n        this.$context.compileShader(shaderVertex);\n\n        const shaderFragment = this.$context.createShader(this.$context.FRAGMENT_SHADER);\n        this.$context.shaderSource(shaderFragment, $shader.sourceFragment);\n        this.$context.compileShader(shaderFragment);\n\n        this.$program = this.$context.createProgram();\n        this.$context.attachShader(this.$program, shaderVertex);\n        this.$context.attachShader(this.$program, shaderFragment);\n        this.$context.linkProgram(this.$program);\n    }\n\n    /**\n     * Creates a texture from the given bitmap texture data.\n     * @param {ImageBitmap} $textureBitmap The bitmap texture data.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {WebGLTexture}\n     * @private\n     */\n    $createTexture($textureBitmap, $unitTexture) {\n\n        const texture = this.$context.createTexture();\n\n        this.$context.activeTexture($unitTexture);\n        this.$context.bindTexture(this.$context.TEXTURE_2D, texture);\n\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_MIN_FILTER, this.$context.NEAREST);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_MAG_FILTER, this.$context.NEAREST);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_WRAP_S, this.$context.CLAMP_TO_EDGE);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_WRAP_T, this.$context.CLAMP_TO_EDGE);\n\n        this.$context.texImage2D(this.$context.TEXTURE_2D, 0, this.$context.RGBA, this.$context.RGBA, this.$context.UNSIGNED_BYTE, $textureBitmap);\n\n        return texture;\n    }\n\n    /**\n     * Creates a default texture (1 pixel texture).\n     * @param {import('../index.js').Vector3} $color The target texture unit.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {WebGLTexture}\n     * @private\n     */\n    $createTextureDefault($color, $unitTexture) {\n\n        const texture = this.$context.createTexture();\n\n        this.$context.activeTexture(this.$context.TEXTURE0 + $unitTexture);\n        this.$context.bindTexture(this.$context.TEXTURE_2D, texture);\n        this.$context.texImage2D(this.$context.TEXTURE_2D, 0, this.$context.RGBA, 1, 1, 0, this.$context.RGBA, this.$context.UNSIGNED_BYTE, new Uint8Array([$color.x, $color.y, $color.z, 255]));\n\n        return texture;\n    }\n\n    /**\n     * Loads the texture from the given texture file content.\n     * @param {Response} $content The texture file content.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {Promise<WebGLTexture>}\n     * @private\n     */\n    $loadTexture($content, $unitTexture) {\n\n        const promise = new Promise(($resolve) => {\n\n            $content.blob()\n            .then(($blob) => (createImageBitmap($blob)))\n            .then(($textureBitmap) => {\n\n                const texture = this.$createTexture($textureBitmap, $unitTexture);\n\n                this.$cache.set($content.url, texture);\n\n                $resolve(texture);\n            });\n        });\n\n        return promise;\n    }\n\n    /**\n     * Prepares the texture from the given texture source.\n     * @param {string} $texture The texture source.\n     * @param {number} $unitTexture The target texture unit.\n     * @private\n     */\n    $prepareTexture($texture, $unitTexture) {\n\n        if (this.$cache.has($texture) === true) {\n\n            return;\n        }\n\n        this.$cache.set($texture, undefined);\n\n        fetch($texture)\n        .then(($content) => (this.$loadTexture($content, $unitTexture)));\n    }\n\n    /**\n     * Called when the scope is about to be unloaded.\n     * @private\n     */\n    $onBeforeUnload() {\n\n        this.$context.getExtension('WEBGL_lose_context').loseContext();\n    }\n\n    /**\n     * Resets the canvas.\n     * @param {number} $width The context viewport width.\n     * @param {number} $height The context viewport height.\n     * @private\n     */\n    $resetCanvas($width, $height) {\n\n        this.$context.clearColor(this.$color.x, this.$color.y, this.$color.z, 1);\n        this.$context.clearDepth(1);\n\n        this.$context.viewport(0, 0, $width, $height);\n        this.$context.clear(this.$context.COLOR_BUFFER_BIT | this.$context.DEPTH_BUFFER_BIT);\n    }\n\n    /**\n     * Resizes the rendering context.\n     * @public\n     */\n    $resize() {\n\n        const width = this.$resolution.x;\n        const height = this.$resolution.y;\n\n        const widthContext = Math.max(width, Math.floor(height * this.$canvas.clientWidth / this.$canvas.clientHeight));\n        const heightContext = Math.max(height, Math.floor(width * this.$canvas.clientHeight / this.$canvas.clientWidth));\n\n        this.$canvas.setAttribute('width', '' + Math.floor(widthContext / 2) * 2);\n        this.$canvas.setAttribute('height', '' + Math.floor(heightContext / 2) * 2);\n    }\n\n    /**\n     * Sends an attribute to the shader program.\n     * @param {typeof import('../index.js').Shader} $shader The representation of the shader.\n     * @param {string} $name The name of the attribute.\n     * @param {any} $value The value of the attribute.\n     * @private\n     */\n    $sendAttribute($shader, $name, $value) {\n\n        if (typeof $shader.attributes[$name] === 'undefined') {\n\n            return;\n        }\n\n        const type = $shader.attributes[$name];\n\n        switch (type) {\n\n            case 'vec2': {\n\n                this.$context.bindBuffer(this.$context.ARRAY_BUFFER, $value);\n                const location = this.$locationsAttribute[$name];\n                this.$context.vertexAttribPointer(location, 2, this.$context.FLOAT, false, 0, 0);\n                this.$context.enableVertexAttribArray(location);\n\n                break;\n            }\n\n            case 'vec3': {\n\n                this.$context.bindBuffer(this.$context.ARRAY_BUFFER, $value);\n                const location = this.$locationsAttribute[$name];\n                this.$context.vertexAttribPointer(location, 3, this.$context.FLOAT, false, 0, 0);\n                this.$context.enableVertexAttribArray(location);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Sends a uniform to the shader program.\n     * @param {typeof import('../index.js').Shader} $shader The representation of the shader.\n     * @param {string} $name The name of the uniform.\n     * @param {any} $value The value of the uniform.\n     * @private\n     */\n    $sendUniform($shader, $name, $value) {\n\n        if (typeof $shader.uniforms[$name] === 'undefined') {\n\n            return;\n        }\n\n        const type = $shader.uniforms[$name];\n\n        switch (type) {\n\n            case 'bool':\n            case 'int':\n            case 'sampler2D': {\n\n                this.$context.uniform1i(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'bool[]':\n            case 'int[]': {\n\n                this.$context.uniform1iv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'float': {\n\n                this.$context.uniform1f(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'float[]': {\n\n                this.$context.uniform1fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'mat4':\n            case 'mat4[]': {\n\n                this.$context.uniformMatrix4fv(this.$locationsUniform[$name], false, $value);\n\n                break;\n            }\n\n            case 'vec2':\n            case 'vec2[]': {\n\n                this.$context.uniform2fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case 'vec3':\n            case 'vec3[]': {\n\n                this.$context.uniform3fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Checks if the system has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        return this.$cache.has($asset) === true;\n    }\n\n    /**\n     * Initiates the system.\n     * @public\n     */\n    initiate() {\n\n        if (this.$initiated === true) {\n\n            return;\n        }\n\n        this.$indices = 0;\n        this.$locationsAttribute = {};\n        this.$locationsUniform = {};\n        this.$mappingBuffersUv = {};\n\n        this.$context.frontFace(this.$context.CW);\n        this.$context.enable(this.$context.CULL_FACE);\n        this.$context.cullFace(this.$context.BACK);\n\n        this.$context.enable(this.$context.BLEND);\n        this.$context.blendFunc(this.$context.SRC_ALPHA, this.$context.ONE_MINUS_SRC_ALPHA);\n\n        this.$createProgram(Shader);\n\n        this.$context.useProgram(this.$program);\n\n        this.$createLocationsUniform(this.$program, Shader);\n        this.$createLocationsAttribute(this.$program, Shader);\n\n        this.$createBufferPositions();\n        this.$createIndices();\n\n        this.$textureColorDefault = this.$createTextureDefault(new Vector3(127, 127, 127), SystemRender.UNITTEXTURE1);\n        this.$textureOpacityDefault = this.$createTextureDefault(new Vector3(255, 255, 255), SystemRender.UNITTEXTURE2);\n\n        this.$resizeOberver = new ResizeObserver(this.$resize.bind(this));\n        this.$resizeOberver.observe(this.$container);\n\n        window.addEventListener('beforeunload', this.$onBeforeUnload.bind(this));\n\n        this.$initiated = true;\n    }\n\n    /**\n     * Loads the texture from the given texture file content.\n     * @param {Response} $content The texture file content.\n     * @returns {Promise<WebGLTexture>}\n     * @public\n     */\n    loadTexture($content) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        if (this.$cache.has($content.url) === true) {\n\n            const promise = new Promise(($resolve) => {\n\n                const texture = this.$cache.get($content.url);\n\n                $resolve(texture);\n            });\n\n            return promise;\n        }\n\n        this.$cache.set($content.url, undefined);\n\n        return this.$loadTexture($content, this.$context.TEXTURE0 + SystemRender.UNITTEXTURE0);\n    }\n\n    /**\n     * Sets the rendering background color.\n     * @param {import('../index.js').Vector3} $color The rendering background color to set.\n     * @public\n     */\n    setColor($color) {\n\n        this.$color = $color;\n    }\n\n    /**\n     * Sets the rendering resolution.\n     * @param {import('../index.js').Vector2} $resolution The rendering resolution to set.\n     * @public\n     */\n    setResolution($resolution) {\n\n        this.$resolution = $resolution.clone();\n\n        this.$resize();\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        if (this.$initiated === false) {\n\n            return;\n        }\n\n        this.$resizeOberver.disconnect();\n\n        window.removeEventListener('beforeunload', this.$onBeforeUnload.bind(this));\n\n        this.$initiated = false;\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {import('../index.js').Stage} $stage The stage on which to execute the system.\n     * @public\n     */\n    tick($stage) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        this.$resetCanvas(this.$canvas.width, this.$canvas.height);\n\n        this.$sendUniform(Shader, 'uniformAspect', [this.$canvas.width, this.$canvas.height]);\n        this.$sendUniform(Shader, 'uniformTranslationPointOfView', [Math.floor($stage.pointOfView.translation.x), Math.floor($stage.pointOfView.translation.y)]);\n\n        this.$sendAttribute(Shader, 'attributePosition', this.$bufferPosition);\n\n        const actors = [...$stage.actors];\n\n        actors.sort(($a, $b) => {\n\n            return $a.zIndex - $b.zIndex;\n        });\n\n        actors.forEach(($actor) => {\n\n            if ($actor.hasSprite() === false) {\n\n                return;\n            }\n\n            let textureColor = this.$textureColorDefault;\n\n            this.$prepareTexture($actor.sprite.textureColor, this.$context.TEXTURE0 + SystemRender.UNITTEXTURE1);\n\n            if (typeof this.$cache.get($actor.sprite.textureColor) !== 'undefined') {\n\n                textureColor = this.$cache.get($actor.sprite.textureColor);\n            }\n\n            this.$context.activeTexture(this.$context.TEXTURE0 + SystemRender.UNITTEXTURE1);\n            this.$context.bindTexture(this.$context.TEXTURE_2D, textureColor);\n            this.$sendUniform(Shader, 'uniformTextureColor', SystemRender.UNITTEXTURE1);\n\n            let textureOpacity = this.$textureOpacityDefault;\n\n            if (typeof $actor.sprite.textureOpacity !== 'undefined') {\n\n                this.$prepareTexture($actor.sprite.textureOpacity, this.$context.TEXTURE0 + SystemRender.UNITTEXTURE2);\n\n                if (typeof this.$cache.get($actor.sprite.textureOpacity) !== 'undefined') {\n\n                    textureOpacity = this.$cache.get($actor.sprite.textureOpacity);\n                }\n            }\n\n            this.$context.activeTexture(this.$context.TEXTURE0 + SystemRender.UNITTEXTURE2);\n            this.$context.bindTexture(this.$context.TEXTURE_2D, textureOpacity);\n            this.$sendUniform(Shader, 'uniformTextureOpacity', SystemRender.UNITTEXTURE2);\n\n            this.$sendUniform(Shader, 'uniformSize', [$actor.sprite.sizeTarget.x, $actor.sprite.sizeTarget.y]);\n            this.$sendUniform(Shader, 'uniformTranslation', [Math.floor($actor.translation.x), Math.floor($actor.translation.y)]);\n\n            this.$createBufferUvsOnce($actor.sprite);\n            this.$sendAttribute(Shader, 'attributeUvmapping', this.$mappingBuffersUv[$actor.sprite.frameSourceSerialized]);\n\n            this.$context.drawElements(this.$context.TRIANGLE_FAN, this.$indices, this.$context.UNSIGNED_INT, 0);\n        });\n    }\n}\n\nexport {\n\n    SystemRender\n};\n\nexport default SystemRender;\n","import {EVENTCODES, EventGamepad, EventGamepadDigital, UTILS} from '../index.js';\n\n/**\n * Creates vibration systems.\n *\n * @example\n *\n * const system = new SystemVibration();\n */\nclass SystemVibration {\n\n    /**\n     * Stores the delay before a vibration ends.\n     * @type {number}\n     * @public\n     * @readonly\n     * @static\n     */\n    static DELAYVIBRATIONEND = 1000;\n\n    /**\n     * Stores the mapping between the playing vibrations and their elapsed time.\n     * @type {Map<import('../index.js').Vibration, number>}\n     * @private\n     */\n    $mappingVibrationsPlaying;\n\n    /**\n     * Creates a new vibration system.\n     */\n    constructor() {\n\n        this.$mappingVibrationsPlaying = new Map();\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        window.dispatchEvent(new EventGamepadDigital('gamepadvibrate', EVENTCODES.GAMEPADXBOX.VIBRATEEND));\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {Object} $parameters The given parameters.\n     * @param {import('../index.js').Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    tick({$stage, $timetick}) {\n\n        /**\n         * @type {import('../index.js').Vibration[]}\n         */\n        const previous = Array.from(this.$mappingVibrationsPlaying.keys());\n\n        $stage.actors.forEach(($actor) => {\n\n            /**\n             * @type {import('../index.js').Vibration[]}\n             */\n            const finished = [];\n\n            $actor.vibrations.forEach(($vibration) => {\n\n                if (this.$mappingVibrationsPlaying.has($vibration) === false) {\n\n                    this.$mappingVibrationsPlaying.set($vibration, 0);\n\n                    return;\n                }\n\n                const elapsedTime = this.$mappingVibrationsPlaying.get($vibration) + $timetick;\n\n                if (elapsedTime >= $vibration.duration) {\n\n                    finished.push($vibration);\n\n                    return;\n                }\n\n                this.$mappingVibrationsPlaying.set($vibration, elapsedTime);\n\n                UTILS.extract($vibration, previous);\n            });\n\n            finished.forEach(($vibration) => {\n\n                $actor.removeVibration($vibration);\n            });\n        });\n\n        previous.forEach(($vibration) => {\n\n            this.$mappingVibrationsPlaying.delete($vibration);\n        });\n\n        /**\n         * @type {import('../index.js').Vibration[]}\n         */\n        const current = Array.from(this.$mappingVibrationsPlaying.keys());\n\n        let intensityFrequencyHigh = 0;\n        let intensityFrequencyLow = 0;\n\n        current.forEach(($vibration) => {\n\n            intensityFrequencyHigh = Math.max(intensityFrequencyHigh, $vibration.intensityFrequencyHigh);\n            intensityFrequencyLow = Math.max(intensityFrequencyLow, $vibration.intensityFrequencyLow);\n        });\n\n        window.dispatchEvent(new EventGamepad('gamepadvibrate', EVENTCODES.GAMEPADXBOX.VIBRATESTART, {\n\n            $duration: SystemVibration.DELAYVIBRATIONEND,\n            $intensityFrequencyHigh: intensityFrequencyHigh,\n            $intensityFrequencyLow: intensityFrequencyLow\n        }));\n    }\n}\n\nexport {\n\n    SystemVibration\n};\n\nexport default SystemVibration;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var webpackThen = typeof Symbol === \"function\" ? Symbol(\"webpack then\") : \"__webpack_then__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar completeQueue = (queue) => {\n\tif(queue) {\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar completeFunction = (fn) => (!--fn.r && fn());\nvar queueFunction = (queue, fn) => (queue ? queue.push(fn) : completeFunction(fn));\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackThen]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tcompleteQueue(queue);\n\t\t\t\tqueue = 0;\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\t\t\t\t\t\t\t\tobj[webpackThen] = (fn, reject) => (queueFunction(queue, fn), dep.catch(reject));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\t\t\t\t\t\tret[webpackThen] = (fn) => (completeFunction(fn));\n\t\t\t\t\t\tret[webpackExports] = dep;\n\t\t\t\t\t\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue = hasAwait && [];\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar isEvaluating = true;\n\tvar nested = false;\n\tvar whenAll = (deps, onResolve, onReject) => {\n\t\tif (nested) return;\n\t\tnested = true;\n\t\tonResolve.r += deps.length;\n\t\tdeps.map((dep, i) => (dep[webpackThen](onResolve, onReject)));\n\t\tnested = false;\n\t};\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = () => (resolve(exports), completeQueue(queue), queue = 0);\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackThen] = (fn, rejectFn) => {\n\t\tif (isEvaluating) { return completeFunction(fn); }\n\t\tif (currentDeps) whenAll(currentDeps, fn, rejectFn);\n\t\tqueueFunction(queue, fn);\n\t\tpromise.catch(rejectFn);\n\t};\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tif(!deps) return outerResolve();\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn, result;\n\t\tvar promise = new Promise((resolve, reject) => {\n\t\t\tfn = () => (resolve(result = currentDeps.map((d) => (d[webpackExports]))));\n\t\t\tfn.r = 0;\n\t\t\twhenAll(currentDeps, fn, reject);\n\t\t});\n\t\treturn fn.r ? promise : result;\n\t}).then(outerResolve, reject);\n\tisEvaluating = false;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n",""],"names":[],"sourceRoot":""}